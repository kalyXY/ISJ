generator client {
  provider     = "prisma-client"
  output       = "../generated"
  moduleFormat = "esm"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  gender         String
  birthDate      DateTime
  class          String
  section        String?
  option         String?
  promotion      String
  matricule      String     @unique
  parentPhone    String
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  classeId       String?    @db.ObjectId
  classe         Classe?    @relation(fields: [classeId], references: [id])
  userId         String?    @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], name: "UserStudents")
  notes          Note[]
  bulletins      Bulletin[]
}

model User {
  id            String                  @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String                  @unique
  password      String
  role          String                  @default("pending_parent")
  status        String                  @default("en_attente")
  resetToken    String?
  resetExpires  DateTime?
  emailVerified Boolean                 @default(false)
  image         String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  sessions      Session[]
  accounts      Account[]
  students      Student[]               @relation("UserStudents")
  enseignants   Enseignant[]            @relation("UserEnseignants")
  historiqueModifications HistoriqueModification[]

  @@map("users")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

model Verification {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verifications")
}

model Section {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nom       String    @unique
  classes   Classe[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("sections")
}

model Option {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nom       String    @unique
  classes   Classe[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("options")
}

model Classe {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  nom                 String
  salle               String?           // A, B, C, etc. pour les variantes physiques
  sectionId           String?           @db.ObjectId
  optionId            String?           @db.ObjectId
  anneeScolaire       String
  capaciteMaximale    Int               @default(30)  // Capacité maximale d'élèves
  description         String?           // Description optionnelle de la classe
  section             Section?          @relation(fields: [sectionId], references: [id])
  option              Option?           @relation(fields: [optionId], references: [id])
  matieres            Matiere[]
  students            Student[]
  enseignantsClasses  EnseignantClasse[]
  titulaireEnseignant Enseignant?       @relation(name: "TitulaireEnseignant")
  bulletins           Bulletin[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("classes")
}

model Matiere {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  nom                String
  classeId           String             @db.ObjectId
  classe             Classe             @relation(fields: [classeId], references: [id])
  enseignantsMatieres EnseignantMatiere[]
  notes              Note[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("matieres")
}

model Enseignant {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  nom                  String
  email                String              @unique
  enseignantMatieres   EnseignantMatiere[]
  enseignantClasses    EnseignantClasse[]
  presences            Presence[]
  notes                Note[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  userId               String?             @db.ObjectId
  user                 User?               @relation(fields: [userId], references: [id], name: "UserEnseignants")
  assignedClassroomId  String?             @unique @db.ObjectId
  assignedClassroom    Classe?             @relation(fields: [assignedClassroomId], references: [id], name: "TitulaireEnseignant")
}

model EnseignantClasse {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  enseignantId  String      @db.ObjectId
  classeId      String      @db.ObjectId
  enseignant    Enseignant  @relation(fields: [enseignantId], references: [id])
  classe        Classe      @relation(fields: [classeId], references: [id])
}

model EnseignantMatiere {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  enseignantId  String      @db.ObjectId
  matiereId     String      @db.ObjectId
  enseignant    Enseignant  @relation(fields: [enseignantId], references: [id])
  matiere       Matiere     @relation(fields: [matiereId], references: [id])
}

model AnneeScolaire {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nom       String    @unique
  debut     DateTime
  fin       DateTime
  actuelle  Boolean   @default(false)
  periodes  Periode[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("annees_scolaires")
}

model Presence {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  enseignantId String     @db.ObjectId
  date         DateTime
  status       String
  enseignant   Enseignant @relation(fields: [enseignantId], references: [id])
}

// Nouveaux modèles pour le module de gestion des bulletins et notes

model Periode {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  nom              String        // Trimestre 1, Semestre 1, etc.
  type             String        // "trimestre" ou "semestre"
  dateDebut        DateTime
  dateFin          DateTime
  anneeScolaireId  String        @db.ObjectId
  anneeScolaire    AnneeScolaire @relation(fields: [anneeScolaireId], references: [id])
  isActive         Boolean       @default(true)
  isValidated      Boolean       @default(false) // Verrouille les notes
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  notes            Note[]
  bulletins        Bulletin[]

  @@map("periodes")
}

model Note {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  valeur                 Float                   // Note sur 20
  studentId              String                  @db.ObjectId
  matiereId              String                  @db.ObjectId
  periodeId              String                  @db.ObjectId
  enseignantId           String                  @db.ObjectId
  typeEvaluation         String                  @default("note_normale") // note_normale, interrogation, examen, etc.
  coefficient            Float                   @default(1.0)
  appreciation           String?                 // Commentaire sur la note
  isValidated            Boolean                 @default(false)
  dateValidation         DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  student                Student                 @relation(fields: [studentId], references: [id])
  matiere                Matiere                 @relation(fields: [matiereId], references: [id])
  periode                Periode                 @relation(fields: [periodeId], references: [id])
  enseignant             Enseignant              @relation(fields: [enseignantId], references: [id])
  historiqueModifications HistoriqueModification[]

  @@unique([studentId, matiereId, periodeId, typeEvaluation])
  @@map("notes")
}

model Bulletin {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String   @db.ObjectId
  periodeId        String   @db.ObjectId
  classeId         String   @db.ObjectId
  moyenneGenerale  Float?   // Moyenne calculée
  rangClasse       Int?     // Position dans la classe
  appreciationGenerale String? // Appréciation globale du conseil de classe
  isGenerated      Boolean  @default(false)
  dateGeneration   DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  student          Student  @relation(fields: [studentId], references: [id])
  periode          Periode  @relation(fields: [periodeId], references: [id])
  classe           Classe   @relation(fields: [classeId], references: [id])

  @@unique([studentId, periodeId])
  @@map("bulletins")
}

model HistoriqueModification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  noteId       String   @db.ObjectId
  ancienneValeur Float?
  nouvelleValeur Float?
  userId       String   @db.ObjectId
  action       String   // "creation", "modification", "suppression", "validation"
  commentaire  String?
  createdAt    DateTime @default(now())
  note         Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])

  @@map("historique_modifications")
}

model ParametreEcole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  cle         String   @unique // "note_min", "note_max", "seuil_reussite", etc.
  valeur      String   // Valeur stockée en string, à convertir selon le type
  type        String   // "number", "string", "boolean"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("parametres_ecole")
}
