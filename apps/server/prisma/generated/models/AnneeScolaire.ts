
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AnneeScolaire` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AnneeScolaire
 * 
 */
export type AnneeScolaireModel = runtime.Types.Result.DefaultSelection<Prisma.$AnneeScolairePayload>

export type AggregateAnneeScolaire = {
  _count: AnneeScolaireCountAggregateOutputType | null
  _min: AnneeScolaireMinAggregateOutputType | null
  _max: AnneeScolaireMaxAggregateOutputType | null
}

export type AnneeScolaireMinAggregateOutputType = {
  id: string | null
  nom: string | null
  debut: Date | null
  fin: Date | null
  actuelle: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AnneeScolaireMaxAggregateOutputType = {
  id: string | null
  nom: string | null
  debut: Date | null
  fin: Date | null
  actuelle: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AnneeScolaireCountAggregateOutputType = {
  id: number
  nom: number
  debut: number
  fin: number
  actuelle: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AnneeScolaireMinAggregateInputType = {
  id?: true
  nom?: true
  debut?: true
  fin?: true
  actuelle?: true
  createdAt?: true
  updatedAt?: true
}

export type AnneeScolaireMaxAggregateInputType = {
  id?: true
  nom?: true
  debut?: true
  fin?: true
  actuelle?: true
  createdAt?: true
  updatedAt?: true
}

export type AnneeScolaireCountAggregateInputType = {
  id?: true
  nom?: true
  debut?: true
  fin?: true
  actuelle?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AnneeScolaireAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnneeScolaire to aggregate.
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnneeScolaires to fetch.
   */
  orderBy?: Prisma.AnneeScolaireOrderByWithRelationInput | Prisma.AnneeScolaireOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnneeScolaireWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnneeScolaires from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnneeScolaires.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AnneeScolaires
  **/
  _count?: true | AnneeScolaireCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnneeScolaireMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnneeScolaireMaxAggregateInputType
}

export type GetAnneeScolaireAggregateType<T extends AnneeScolaireAggregateArgs> = {
      [P in keyof T & keyof AggregateAnneeScolaire]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnneeScolaire[P]>
    : Prisma.GetScalarType<T[P], AggregateAnneeScolaire[P]>
}




export type AnneeScolaireGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnneeScolaireWhereInput
  orderBy?: Prisma.AnneeScolaireOrderByWithAggregationInput | Prisma.AnneeScolaireOrderByWithAggregationInput[]
  by: Prisma.AnneeScolaireScalarFieldEnum[] | Prisma.AnneeScolaireScalarFieldEnum
  having?: Prisma.AnneeScolaireScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnneeScolaireCountAggregateInputType | true
  _min?: AnneeScolaireMinAggregateInputType
  _max?: AnneeScolaireMaxAggregateInputType
}

export type AnneeScolaireGroupByOutputType = {
  id: string
  nom: string
  debut: Date
  fin: Date
  actuelle: boolean
  createdAt: Date
  updatedAt: Date
  _count: AnneeScolaireCountAggregateOutputType | null
  _min: AnneeScolaireMinAggregateOutputType | null
  _max: AnneeScolaireMaxAggregateOutputType | null
}

type GetAnneeScolaireGroupByPayload<T extends AnneeScolaireGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnneeScolaireGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnneeScolaireGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnneeScolaireGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnneeScolaireGroupByOutputType[P]>
      }
    >
  > 



export type AnneeScolaireWhereInput = {
  AND?: Prisma.AnneeScolaireWhereInput | Prisma.AnneeScolaireWhereInput[]
  OR?: Prisma.AnneeScolaireWhereInput[]
  NOT?: Prisma.AnneeScolaireWhereInput | Prisma.AnneeScolaireWhereInput[]
  id?: Prisma.StringFilter<"AnneeScolaire"> | string
  nom?: Prisma.StringFilter<"AnneeScolaire"> | string
  debut?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  fin?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  actuelle?: Prisma.BoolFilter<"AnneeScolaire"> | boolean
  createdAt?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
}

export type AnneeScolaireOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  debut?: Prisma.SortOrder
  fin?: Prisma.SortOrder
  actuelle?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnneeScolaireWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  nom?: string
  AND?: Prisma.AnneeScolaireWhereInput | Prisma.AnneeScolaireWhereInput[]
  OR?: Prisma.AnneeScolaireWhereInput[]
  NOT?: Prisma.AnneeScolaireWhereInput | Prisma.AnneeScolaireWhereInput[]
  debut?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  fin?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  actuelle?: Prisma.BoolFilter<"AnneeScolaire"> | boolean
  createdAt?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AnneeScolaire"> | Date | string
}, "id" | "nom">

export type AnneeScolaireOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  debut?: Prisma.SortOrder
  fin?: Prisma.SortOrder
  actuelle?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AnneeScolaireCountOrderByAggregateInput
  _max?: Prisma.AnneeScolaireMaxOrderByAggregateInput
  _min?: Prisma.AnneeScolaireMinOrderByAggregateInput
}

export type AnneeScolaireScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnneeScolaireScalarWhereWithAggregatesInput | Prisma.AnneeScolaireScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnneeScolaireScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnneeScolaireScalarWhereWithAggregatesInput | Prisma.AnneeScolaireScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AnneeScolaire"> | string
  nom?: Prisma.StringWithAggregatesFilter<"AnneeScolaire"> | string
  debut?: Prisma.DateTimeWithAggregatesFilter<"AnneeScolaire"> | Date | string
  fin?: Prisma.DateTimeWithAggregatesFilter<"AnneeScolaire"> | Date | string
  actuelle?: Prisma.BoolWithAggregatesFilter<"AnneeScolaire"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AnneeScolaire"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AnneeScolaire"> | Date | string
}

export type AnneeScolaireCreateInput = {
  id?: string
  nom: string
  debut: Date | string
  fin: Date | string
  actuelle?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnneeScolaireUncheckedCreateInput = {
  id?: string
  nom: string
  debut: Date | string
  fin: Date | string
  actuelle?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnneeScolaireUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  debut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actuelle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnneeScolaireUncheckedUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  debut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actuelle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnneeScolaireCreateManyInput = {
  id?: string
  nom: string
  debut: Date | string
  fin: Date | string
  actuelle?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AnneeScolaireUpdateManyMutationInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  debut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actuelle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnneeScolaireUncheckedUpdateManyInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  debut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actuelle?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AnneeScolaireCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  debut?: Prisma.SortOrder
  fin?: Prisma.SortOrder
  actuelle?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnneeScolaireMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  debut?: Prisma.SortOrder
  fin?: Prisma.SortOrder
  actuelle?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AnneeScolaireMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  debut?: Prisma.SortOrder
  fin?: Prisma.SortOrder
  actuelle?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type AnneeScolaireSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nom?: boolean
  debut?: boolean
  fin?: boolean
  actuelle?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["anneeScolaire"]>



export type AnneeScolaireSelectScalar = {
  id?: boolean
  nom?: boolean
  debut?: boolean
  fin?: boolean
  actuelle?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AnneeScolaireOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nom" | "debut" | "fin" | "actuelle" | "createdAt" | "updatedAt", ExtArgs["result"]["anneeScolaire"]>

export type $AnneeScolairePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AnneeScolaire"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    nom: string
    debut: Date
    fin: Date
    actuelle: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["anneeScolaire"]>
  composites: {}
}

export type AnneeScolaireGetPayload<S extends boolean | null | undefined | AnneeScolaireDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload, S>

export type AnneeScolaireCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnneeScolaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnneeScolaireCountAggregateInputType | true
  }

export interface AnneeScolaireDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnneeScolaire'], meta: { name: 'AnneeScolaire' } }
  /**
   * Find zero or one AnneeScolaire that matches the filter.
   * @param {AnneeScolaireFindUniqueArgs} args - Arguments to find a AnneeScolaire
   * @example
   * // Get one AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnneeScolaireFindUniqueArgs>(args: Prisma.SelectSubset<T, AnneeScolaireFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AnneeScolaire that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnneeScolaireFindUniqueOrThrowArgs} args - Arguments to find a AnneeScolaire
   * @example
   * // Get one AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnneeScolaireFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnneeScolaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnneeScolaire that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireFindFirstArgs} args - Arguments to find a AnneeScolaire
   * @example
   * // Get one AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnneeScolaireFindFirstArgs>(args?: Prisma.SelectSubset<T, AnneeScolaireFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnneeScolaire that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireFindFirstOrThrowArgs} args - Arguments to find a AnneeScolaire
   * @example
   * // Get one AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnneeScolaireFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnneeScolaireFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AnneeScolaires that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AnneeScolaires
   * const anneeScolaires = await prisma.anneeScolaire.findMany()
   * 
   * // Get first 10 AnneeScolaires
   * const anneeScolaires = await prisma.anneeScolaire.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const anneeScolaireWithIdOnly = await prisma.anneeScolaire.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnneeScolaireFindManyArgs>(args?: Prisma.SelectSubset<T, AnneeScolaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AnneeScolaire.
   * @param {AnneeScolaireCreateArgs} args - Arguments to create a AnneeScolaire.
   * @example
   * // Create one AnneeScolaire
   * const AnneeScolaire = await prisma.anneeScolaire.create({
   *   data: {
   *     // ... data to create a AnneeScolaire
   *   }
   * })
   * 
   */
  create<T extends AnneeScolaireCreateArgs>(args: Prisma.SelectSubset<T, AnneeScolaireCreateArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AnneeScolaires.
   * @param {AnneeScolaireCreateManyArgs} args - Arguments to create many AnneeScolaires.
   * @example
   * // Create many AnneeScolaires
   * const anneeScolaire = await prisma.anneeScolaire.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnneeScolaireCreateManyArgs>(args?: Prisma.SelectSubset<T, AnneeScolaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a AnneeScolaire.
   * @param {AnneeScolaireDeleteArgs} args - Arguments to delete one AnneeScolaire.
   * @example
   * // Delete one AnneeScolaire
   * const AnneeScolaire = await prisma.anneeScolaire.delete({
   *   where: {
   *     // ... filter to delete one AnneeScolaire
   *   }
   * })
   * 
   */
  delete<T extends AnneeScolaireDeleteArgs>(args: Prisma.SelectSubset<T, AnneeScolaireDeleteArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AnneeScolaire.
   * @param {AnneeScolaireUpdateArgs} args - Arguments to update one AnneeScolaire.
   * @example
   * // Update one AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnneeScolaireUpdateArgs>(args: Prisma.SelectSubset<T, AnneeScolaireUpdateArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AnneeScolaires.
   * @param {AnneeScolaireDeleteManyArgs} args - Arguments to filter AnneeScolaires to delete.
   * @example
   * // Delete a few AnneeScolaires
   * const { count } = await prisma.anneeScolaire.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnneeScolaireDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnneeScolaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AnneeScolaires.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AnneeScolaires
   * const anneeScolaire = await prisma.anneeScolaire.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnneeScolaireUpdateManyArgs>(args: Prisma.SelectSubset<T, AnneeScolaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one AnneeScolaire.
   * @param {AnneeScolaireUpsertArgs} args - Arguments to update or create a AnneeScolaire.
   * @example
   * // Update or create a AnneeScolaire
   * const anneeScolaire = await prisma.anneeScolaire.upsert({
   *   create: {
   *     // ... data to create a AnneeScolaire
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AnneeScolaire we want to update
   *   }
   * })
   */
  upsert<T extends AnneeScolaireUpsertArgs>(args: Prisma.SelectSubset<T, AnneeScolaireUpsertArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AnneeScolaires that matches the filter.
   * @param {AnneeScolaireFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const anneeScolaire = await prisma.anneeScolaire.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.AnneeScolaireFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a AnneeScolaire.
   * @param {AnneeScolaireAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const anneeScolaire = await prisma.anneeScolaire.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.AnneeScolaireAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of AnneeScolaires.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireCountArgs} args - Arguments to filter AnneeScolaires to count.
   * @example
   * // Count the number of AnneeScolaires
   * const count = await prisma.anneeScolaire.count({
   *   where: {
   *     // ... the filter for the AnneeScolaires we want to count
   *   }
   * })
  **/
  count<T extends AnneeScolaireCountArgs>(
    args?: Prisma.Subset<T, AnneeScolaireCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnneeScolaireCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AnneeScolaire.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnneeScolaireAggregateArgs>(args: Prisma.Subset<T, AnneeScolaireAggregateArgs>): Prisma.PrismaPromise<GetAnneeScolaireAggregateType<T>>

  /**
   * Group by AnneeScolaire.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnneeScolaireGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnneeScolaireGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnneeScolaireGroupByArgs['orderBy'] }
      : { orderBy?: AnneeScolaireGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnneeScolaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnneeScolaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AnneeScolaire model
 */
readonly fields: AnneeScolaireFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AnneeScolaire.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnneeScolaireClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AnneeScolaire model
 */
export interface AnneeScolaireFieldRefs {
  readonly id: Prisma.FieldRef<"AnneeScolaire", 'String'>
  readonly nom: Prisma.FieldRef<"AnneeScolaire", 'String'>
  readonly debut: Prisma.FieldRef<"AnneeScolaire", 'DateTime'>
  readonly fin: Prisma.FieldRef<"AnneeScolaire", 'DateTime'>
  readonly actuelle: Prisma.FieldRef<"AnneeScolaire", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"AnneeScolaire", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AnneeScolaire", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AnneeScolaire findUnique
 */
export type AnneeScolaireFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter, which AnneeScolaire to fetch.
   */
  where: Prisma.AnneeScolaireWhereUniqueInput
}

/**
 * AnneeScolaire findUniqueOrThrow
 */
export type AnneeScolaireFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter, which AnneeScolaire to fetch.
   */
  where: Prisma.AnneeScolaireWhereUniqueInput
}

/**
 * AnneeScolaire findFirst
 */
export type AnneeScolaireFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter, which AnneeScolaire to fetch.
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnneeScolaires to fetch.
   */
  orderBy?: Prisma.AnneeScolaireOrderByWithRelationInput | Prisma.AnneeScolaireOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnneeScolaires.
   */
  cursor?: Prisma.AnneeScolaireWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnneeScolaires from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnneeScolaires.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnneeScolaires.
   */
  distinct?: Prisma.AnneeScolaireScalarFieldEnum | Prisma.AnneeScolaireScalarFieldEnum[]
}

/**
 * AnneeScolaire findFirstOrThrow
 */
export type AnneeScolaireFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter, which AnneeScolaire to fetch.
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnneeScolaires to fetch.
   */
  orderBy?: Prisma.AnneeScolaireOrderByWithRelationInput | Prisma.AnneeScolaireOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnneeScolaires.
   */
  cursor?: Prisma.AnneeScolaireWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnneeScolaires from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnneeScolaires.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnneeScolaires.
   */
  distinct?: Prisma.AnneeScolaireScalarFieldEnum | Prisma.AnneeScolaireScalarFieldEnum[]
}

/**
 * AnneeScolaire findMany
 */
export type AnneeScolaireFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter, which AnneeScolaires to fetch.
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnneeScolaires to fetch.
   */
  orderBy?: Prisma.AnneeScolaireOrderByWithRelationInput | Prisma.AnneeScolaireOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AnneeScolaires.
   */
  cursor?: Prisma.AnneeScolaireWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnneeScolaires from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnneeScolaires.
   */
  skip?: number
  distinct?: Prisma.AnneeScolaireScalarFieldEnum | Prisma.AnneeScolaireScalarFieldEnum[]
}

/**
 * AnneeScolaire create
 */
export type AnneeScolaireCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * The data needed to create a AnneeScolaire.
   */
  data: Prisma.XOR<Prisma.AnneeScolaireCreateInput, Prisma.AnneeScolaireUncheckedCreateInput>
}

/**
 * AnneeScolaire createMany
 */
export type AnneeScolaireCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AnneeScolaires.
   */
  data: Prisma.AnneeScolaireCreateManyInput | Prisma.AnneeScolaireCreateManyInput[]
}

/**
 * AnneeScolaire update
 */
export type AnneeScolaireUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * The data needed to update a AnneeScolaire.
   */
  data: Prisma.XOR<Prisma.AnneeScolaireUpdateInput, Prisma.AnneeScolaireUncheckedUpdateInput>
  /**
   * Choose, which AnneeScolaire to update.
   */
  where: Prisma.AnneeScolaireWhereUniqueInput
}

/**
 * AnneeScolaire updateMany
 */
export type AnneeScolaireUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AnneeScolaires.
   */
  data: Prisma.XOR<Prisma.AnneeScolaireUpdateManyMutationInput, Prisma.AnneeScolaireUncheckedUpdateManyInput>
  /**
   * Filter which AnneeScolaires to update
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * Limit how many AnneeScolaires to update.
   */
  limit?: number
}

/**
 * AnneeScolaire upsert
 */
export type AnneeScolaireUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * The filter to search for the AnneeScolaire to update in case it exists.
   */
  where: Prisma.AnneeScolaireWhereUniqueInput
  /**
   * In case the AnneeScolaire found by the `where` argument doesn't exist, create a new AnneeScolaire with this data.
   */
  create: Prisma.XOR<Prisma.AnneeScolaireCreateInput, Prisma.AnneeScolaireUncheckedCreateInput>
  /**
   * In case the AnneeScolaire was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnneeScolaireUpdateInput, Prisma.AnneeScolaireUncheckedUpdateInput>
}

/**
 * AnneeScolaire delete
 */
export type AnneeScolaireDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
  /**
   * Filter which AnneeScolaire to delete.
   */
  where: Prisma.AnneeScolaireWhereUniqueInput
}

/**
 * AnneeScolaire deleteMany
 */
export type AnneeScolaireDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnneeScolaires to delete
   */
  where?: Prisma.AnneeScolaireWhereInput
  /**
   * Limit how many AnneeScolaires to delete.
   */
  limit?: number
}

/**
 * AnneeScolaire findRaw
 */
export type AnneeScolaireFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * AnneeScolaire aggregateRaw
 */
export type AnneeScolaireAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * AnneeScolaire without action
 */
export type AnneeScolaireDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnneeScolaire
   */
  select?: Prisma.AnneeScolaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnneeScolaire
   */
  omit?: Prisma.AnneeScolaireOmit<ExtArgs> | null
}
