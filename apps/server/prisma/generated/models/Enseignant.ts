
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Enseignant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Enseignant
 * 
 */
export type EnseignantModel = runtime.Types.Result.DefaultSelection<Prisma.$EnseignantPayload>

export type AggregateEnseignant = {
  _count: EnseignantCountAggregateOutputType | null
  _min: EnseignantMinAggregateOutputType | null
  _max: EnseignantMaxAggregateOutputType | null
}

export type EnseignantMinAggregateOutputType = {
  id: string | null
  nom: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  assignedClassroomId: string | null
}

export type EnseignantMaxAggregateOutputType = {
  id: string | null
  nom: string | null
  email: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  assignedClassroomId: string | null
}

export type EnseignantCountAggregateOutputType = {
  id: number
  nom: number
  email: number
  createdAt: number
  updatedAt: number
  userId: number
  assignedClassroomId: number
  _all: number
}


export type EnseignantMinAggregateInputType = {
  id?: true
  nom?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  assignedClassroomId?: true
}

export type EnseignantMaxAggregateInputType = {
  id?: true
  nom?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  assignedClassroomId?: true
}

export type EnseignantCountAggregateInputType = {
  id?: true
  nom?: true
  email?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  assignedClassroomId?: true
  _all?: true
}

export type EnseignantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Enseignant to aggregate.
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Enseignants to fetch.
   */
  orderBy?: Prisma.EnseignantOrderByWithRelationInput | Prisma.EnseignantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EnseignantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Enseignants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Enseignants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Enseignants
  **/
  _count?: true | EnseignantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EnseignantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EnseignantMaxAggregateInputType
}

export type GetEnseignantAggregateType<T extends EnseignantAggregateArgs> = {
      [P in keyof T & keyof AggregateEnseignant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEnseignant[P]>
    : Prisma.GetScalarType<T[P], AggregateEnseignant[P]>
}




export type EnseignantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantWhereInput
  orderBy?: Prisma.EnseignantOrderByWithAggregationInput | Prisma.EnseignantOrderByWithAggregationInput[]
  by: Prisma.EnseignantScalarFieldEnum[] | Prisma.EnseignantScalarFieldEnum
  having?: Prisma.EnseignantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EnseignantCountAggregateInputType | true
  _min?: EnseignantMinAggregateInputType
  _max?: EnseignantMaxAggregateInputType
}

export type EnseignantGroupByOutputType = {
  id: string
  nom: string
  email: string
  createdAt: Date
  updatedAt: Date
  userId: string | null
  assignedClassroomId: string | null
  _count: EnseignantCountAggregateOutputType | null
  _min: EnseignantMinAggregateOutputType | null
  _max: EnseignantMaxAggregateOutputType | null
}

type GetEnseignantGroupByPayload<T extends EnseignantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EnseignantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EnseignantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EnseignantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EnseignantGroupByOutputType[P]>
      }
    >
  > 



export type EnseignantWhereInput = {
  AND?: Prisma.EnseignantWhereInput | Prisma.EnseignantWhereInput[]
  OR?: Prisma.EnseignantWhereInput[]
  NOT?: Prisma.EnseignantWhereInput | Prisma.EnseignantWhereInput[]
  id?: Prisma.StringFilter<"Enseignant"> | string
  nom?: Prisma.StringFilter<"Enseignant"> | string
  email?: Prisma.StringFilter<"Enseignant"> | string
  createdAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  userId?: Prisma.StringNullableFilter<"Enseignant"> | string | null
  assignedClassroomId?: Prisma.StringNullableFilter<"Enseignant"> | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereListRelationFilter
  enseignantClasses?: Prisma.EnseignantClasseListRelationFilter
  presences?: Prisma.PresenceListRelationFilter
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  assignedClassroom?: Prisma.XOR<Prisma.ClasseNullableScalarRelationFilter, Prisma.ClasseWhereInput> | null
}

export type EnseignantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedClassroomId?: Prisma.SortOrder
  enseignantMatieres?: Prisma.EnseignantMatiereOrderByRelationAggregateInput
  enseignantClasses?: Prisma.EnseignantClasseOrderByRelationAggregateInput
  presences?: Prisma.PresenceOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  assignedClassroom?: Prisma.ClasseOrderByWithRelationInput
}

export type EnseignantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  assignedClassroomId?: string
  AND?: Prisma.EnseignantWhereInput | Prisma.EnseignantWhereInput[]
  OR?: Prisma.EnseignantWhereInput[]
  NOT?: Prisma.EnseignantWhereInput | Prisma.EnseignantWhereInput[]
  nom?: Prisma.StringFilter<"Enseignant"> | string
  createdAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  userId?: Prisma.StringNullableFilter<"Enseignant"> | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereListRelationFilter
  enseignantClasses?: Prisma.EnseignantClasseListRelationFilter
  presences?: Prisma.PresenceListRelationFilter
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
  assignedClassroom?: Prisma.XOR<Prisma.ClasseNullableScalarRelationFilter, Prisma.ClasseWhereInput> | null
}, "id" | "email" | "assignedClassroomId">

export type EnseignantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedClassroomId?: Prisma.SortOrder
  _count?: Prisma.EnseignantCountOrderByAggregateInput
  _max?: Prisma.EnseignantMaxOrderByAggregateInput
  _min?: Prisma.EnseignantMinOrderByAggregateInput
}

export type EnseignantScalarWhereWithAggregatesInput = {
  AND?: Prisma.EnseignantScalarWhereWithAggregatesInput | Prisma.EnseignantScalarWhereWithAggregatesInput[]
  OR?: Prisma.EnseignantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EnseignantScalarWhereWithAggregatesInput | Prisma.EnseignantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Enseignant"> | string
  nom?: Prisma.StringWithAggregatesFilter<"Enseignant"> | string
  email?: Prisma.StringWithAggregatesFilter<"Enseignant"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Enseignant"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Enseignant"> | Date | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"Enseignant"> | string | null
  assignedClassroomId?: Prisma.StringNullableWithAggregatesFilter<"Enseignant"> | string | null
}

export type EnseignantCreateInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceCreateNestedManyWithoutEnseignantInput
  user?: Prisma.UserCreateNestedOneWithoutEnseignantsInput
  assignedClassroom?: Prisma.ClasseCreateNestedOneWithoutTitulaireEnseignantInput
}

export type EnseignantUncheckedCreateInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  assignedClassroomId?: string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUpdateManyWithoutEnseignantNestedInput
  user?: Prisma.UserUpdateOneWithoutEnseignantsNestedInput
  assignedClassroom?: Prisma.ClasseUpdateOneWithoutTitulaireEnseignantNestedInput
}

export type EnseignantUncheckedUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantCreateManyInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  assignedClassroomId?: string | null
}

export type EnseignantUpdateManyMutationInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EnseignantUncheckedUpdateManyInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EnseignantListRelationFilter = {
  every?: Prisma.EnseignantWhereInput
  some?: Prisma.EnseignantWhereInput
  none?: Prisma.EnseignantWhereInput
}

export type EnseignantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnseignantNullableScalarRelationFilter = {
  is?: Prisma.EnseignantWhereInput | null
  isNot?: Prisma.EnseignantWhereInput | null
}

export type EnseignantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedClassroomId?: Prisma.SortOrder
}

export type EnseignantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedClassroomId?: Prisma.SortOrder
}

export type EnseignantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedClassroomId?: Prisma.SortOrder
}

export type EnseignantScalarRelationFilter = {
  is?: Prisma.EnseignantWhereInput
  isNot?: Prisma.EnseignantWhereInput
}

export type EnseignantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput> | Prisma.EnseignantCreateWithoutUserInput[] | Prisma.EnseignantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutUserInput | Prisma.EnseignantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EnseignantCreateManyUserInputEnvelope
  connect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
}

export type EnseignantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput> | Prisma.EnseignantCreateWithoutUserInput[] | Prisma.EnseignantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutUserInput | Prisma.EnseignantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EnseignantCreateManyUserInputEnvelope
  connect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
}

export type EnseignantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput> | Prisma.EnseignantCreateWithoutUserInput[] | Prisma.EnseignantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutUserInput | Prisma.EnseignantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EnseignantUpsertWithWhereUniqueWithoutUserInput | Prisma.EnseignantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EnseignantCreateManyUserInputEnvelope
  set?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  disconnect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  delete?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  connect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  update?: Prisma.EnseignantUpdateWithWhereUniqueWithoutUserInput | Prisma.EnseignantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EnseignantUpdateManyWithWhereWithoutUserInput | Prisma.EnseignantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EnseignantScalarWhereInput | Prisma.EnseignantScalarWhereInput[]
}

export type EnseignantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput> | Prisma.EnseignantCreateWithoutUserInput[] | Prisma.EnseignantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutUserInput | Prisma.EnseignantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EnseignantUpsertWithWhereUniqueWithoutUserInput | Prisma.EnseignantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EnseignantCreateManyUserInputEnvelope
  set?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  disconnect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  delete?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  connect?: Prisma.EnseignantWhereUniqueInput | Prisma.EnseignantWhereUniqueInput[]
  update?: Prisma.EnseignantUpdateWithWhereUniqueWithoutUserInput | Prisma.EnseignantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EnseignantUpdateManyWithWhereWithoutUserInput | Prisma.EnseignantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EnseignantScalarWhereInput | Prisma.EnseignantScalarWhereInput[]
}

export type EnseignantCreateNestedOneWithoutAssignedClassroomInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutAssignedClassroomInput
  connect?: Prisma.EnseignantWhereUniqueInput
}

export type EnseignantUncheckedCreateNestedOneWithoutAssignedClassroomInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutAssignedClassroomInput
  connect?: Prisma.EnseignantWhereUniqueInput
}

export type EnseignantUpdateOneWithoutAssignedClassroomNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutAssignedClassroomInput
  upsert?: Prisma.EnseignantUpsertWithoutAssignedClassroomInput
  disconnect?: Prisma.EnseignantWhereInput | boolean
  delete?: Prisma.EnseignantWhereInput | boolean
  connect?: Prisma.EnseignantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EnseignantUpdateToOneWithWhereWithoutAssignedClassroomInput, Prisma.EnseignantUpdateWithoutAssignedClassroomInput>, Prisma.EnseignantUncheckedUpdateWithoutAssignedClassroomInput>
}

export type EnseignantUncheckedUpdateOneWithoutAssignedClassroomNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutAssignedClassroomInput
  upsert?: Prisma.EnseignantUpsertWithoutAssignedClassroomInput
  disconnect?: Prisma.EnseignantWhereInput | boolean
  delete?: Prisma.EnseignantWhereInput | boolean
  connect?: Prisma.EnseignantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EnseignantUpdateToOneWithWhereWithoutAssignedClassroomInput, Prisma.EnseignantUpdateWithoutAssignedClassroomInput>, Prisma.EnseignantUncheckedUpdateWithoutAssignedClassroomInput>
}

export type EnseignantCreateNestedOneWithoutEnseignantClassesInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantClassesInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutEnseignantClassesInput
  connect?: Prisma.EnseignantWhereUniqueInput
}

export type EnseignantUpdateOneRequiredWithoutEnseignantClassesNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantClassesInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutEnseignantClassesInput
  upsert?: Prisma.EnseignantUpsertWithoutEnseignantClassesInput
  connect?: Prisma.EnseignantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EnseignantUpdateToOneWithWhereWithoutEnseignantClassesInput, Prisma.EnseignantUpdateWithoutEnseignantClassesInput>, Prisma.EnseignantUncheckedUpdateWithoutEnseignantClassesInput>
}

export type EnseignantCreateNestedOneWithoutEnseignantMatieresInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantMatieresInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutEnseignantMatieresInput
  connect?: Prisma.EnseignantWhereUniqueInput
}

export type EnseignantUpdateOneRequiredWithoutEnseignantMatieresNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantMatieresInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutEnseignantMatieresInput
  upsert?: Prisma.EnseignantUpsertWithoutEnseignantMatieresInput
  connect?: Prisma.EnseignantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EnseignantUpdateToOneWithWhereWithoutEnseignantMatieresInput, Prisma.EnseignantUpdateWithoutEnseignantMatieresInput>, Prisma.EnseignantUncheckedUpdateWithoutEnseignantMatieresInput>
}

export type EnseignantCreateNestedOneWithoutPresencesInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutPresencesInput, Prisma.EnseignantUncheckedCreateWithoutPresencesInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutPresencesInput
  connect?: Prisma.EnseignantWhereUniqueInput
}

export type EnseignantUpdateOneRequiredWithoutPresencesNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantCreateWithoutPresencesInput, Prisma.EnseignantUncheckedCreateWithoutPresencesInput>
  connectOrCreate?: Prisma.EnseignantCreateOrConnectWithoutPresencesInput
  upsert?: Prisma.EnseignantUpsertWithoutPresencesInput
  connect?: Prisma.EnseignantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EnseignantUpdateToOneWithWhereWithoutPresencesInput, Prisma.EnseignantUpdateWithoutPresencesInput>, Prisma.EnseignantUncheckedUpdateWithoutPresencesInput>
}

export type EnseignantCreateWithoutUserInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceCreateNestedManyWithoutEnseignantInput
  assignedClassroom?: Prisma.ClasseCreateNestedOneWithoutTitulaireEnseignantInput
}

export type EnseignantUncheckedCreateWithoutUserInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  assignedClassroomId?: string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantCreateOrConnectWithoutUserInput = {
  where: Prisma.EnseignantWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput>
}

export type EnseignantCreateManyUserInputEnvelope = {
  data: Prisma.EnseignantCreateManyUserInput | Prisma.EnseignantCreateManyUserInput[]
}

export type EnseignantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.EnseignantWhereUniqueInput
  update: Prisma.XOR<Prisma.EnseignantUpdateWithoutUserInput, Prisma.EnseignantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutUserInput, Prisma.EnseignantUncheckedCreateWithoutUserInput>
}

export type EnseignantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.EnseignantWhereUniqueInput
  data: Prisma.XOR<Prisma.EnseignantUpdateWithoutUserInput, Prisma.EnseignantUncheckedUpdateWithoutUserInput>
}

export type EnseignantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.EnseignantScalarWhereInput
  data: Prisma.XOR<Prisma.EnseignantUpdateManyMutationInput, Prisma.EnseignantUncheckedUpdateManyWithoutUserInput>
}

export type EnseignantScalarWhereInput = {
  AND?: Prisma.EnseignantScalarWhereInput | Prisma.EnseignantScalarWhereInput[]
  OR?: Prisma.EnseignantScalarWhereInput[]
  NOT?: Prisma.EnseignantScalarWhereInput | Prisma.EnseignantScalarWhereInput[]
  id?: Prisma.StringFilter<"Enseignant"> | string
  nom?: Prisma.StringFilter<"Enseignant"> | string
  email?: Prisma.StringFilter<"Enseignant"> | string
  createdAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Enseignant"> | Date | string
  userId?: Prisma.StringNullableFilter<"Enseignant"> | string | null
  assignedClassroomId?: Prisma.StringNullableFilter<"Enseignant"> | string | null
}

export type EnseignantCreateWithoutAssignedClassroomInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceCreateNestedManyWithoutEnseignantInput
  user?: Prisma.UserCreateNestedOneWithoutEnseignantsInput
}

export type EnseignantUncheckedCreateWithoutAssignedClassroomInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantCreateOrConnectWithoutAssignedClassroomInput = {
  where: Prisma.EnseignantWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
}

export type EnseignantUpsertWithoutAssignedClassroomInput = {
  update: Prisma.XOR<Prisma.EnseignantUpdateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedUpdateWithoutAssignedClassroomInput>
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedCreateWithoutAssignedClassroomInput>
  where?: Prisma.EnseignantWhereInput
}

export type EnseignantUpdateToOneWithWhereWithoutAssignedClassroomInput = {
  where?: Prisma.EnseignantWhereInput
  data: Prisma.XOR<Prisma.EnseignantUpdateWithoutAssignedClassroomInput, Prisma.EnseignantUncheckedUpdateWithoutAssignedClassroomInput>
}

export type EnseignantUpdateWithoutAssignedClassroomInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUpdateManyWithoutEnseignantNestedInput
  user?: Prisma.UserUpdateOneWithoutEnseignantsNestedInput
}

export type EnseignantUncheckedUpdateWithoutAssignedClassroomInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantCreateWithoutEnseignantClassesInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceCreateNestedManyWithoutEnseignantInput
  user?: Prisma.UserCreateNestedOneWithoutEnseignantsInput
  assignedClassroom?: Prisma.ClasseCreateNestedOneWithoutTitulaireEnseignantInput
}

export type EnseignantUncheckedCreateWithoutEnseignantClassesInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  assignedClassroomId?: string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantCreateOrConnectWithoutEnseignantClassesInput = {
  where: Prisma.EnseignantWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantClassesInput>
}

export type EnseignantUpsertWithoutEnseignantClassesInput = {
  update: Prisma.XOR<Prisma.EnseignantUpdateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedUpdateWithoutEnseignantClassesInput>
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantClassesInput>
  where?: Prisma.EnseignantWhereInput
}

export type EnseignantUpdateToOneWithWhereWithoutEnseignantClassesInput = {
  where?: Prisma.EnseignantWhereInput
  data: Prisma.XOR<Prisma.EnseignantUpdateWithoutEnseignantClassesInput, Prisma.EnseignantUncheckedUpdateWithoutEnseignantClassesInput>
}

export type EnseignantUpdateWithoutEnseignantClassesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUpdateManyWithoutEnseignantNestedInput
  user?: Prisma.UserUpdateOneWithoutEnseignantsNestedInput
  assignedClassroom?: Prisma.ClasseUpdateOneWithoutTitulaireEnseignantNestedInput
}

export type EnseignantUncheckedUpdateWithoutEnseignantClassesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantCreateWithoutEnseignantMatieresInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantClasses?: Prisma.EnseignantClasseCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceCreateNestedManyWithoutEnseignantInput
  user?: Prisma.UserCreateNestedOneWithoutEnseignantsInput
  assignedClassroom?: Prisma.ClasseCreateNestedOneWithoutTitulaireEnseignantInput
}

export type EnseignantUncheckedCreateWithoutEnseignantMatieresInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  assignedClassroomId?: string | null
  enseignantClasses?: Prisma.EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput
  presences?: Prisma.PresenceUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantCreateOrConnectWithoutEnseignantMatieresInput = {
  where: Prisma.EnseignantWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantMatieresInput>
}

export type EnseignantUpsertWithoutEnseignantMatieresInput = {
  update: Prisma.XOR<Prisma.EnseignantUpdateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedUpdateWithoutEnseignantMatieresInput>
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedCreateWithoutEnseignantMatieresInput>
  where?: Prisma.EnseignantWhereInput
}

export type EnseignantUpdateToOneWithWhereWithoutEnseignantMatieresInput = {
  where?: Prisma.EnseignantWhereInput
  data: Prisma.XOR<Prisma.EnseignantUpdateWithoutEnseignantMatieresInput, Prisma.EnseignantUncheckedUpdateWithoutEnseignantMatieresInput>
}

export type EnseignantUpdateWithoutEnseignantMatieresInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantClasses?: Prisma.EnseignantClasseUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUpdateManyWithoutEnseignantNestedInput
  user?: Prisma.UserUpdateOneWithoutEnseignantsNestedInput
  assignedClassroom?: Prisma.ClasseUpdateOneWithoutTitulaireEnseignantNestedInput
}

export type EnseignantUncheckedUpdateWithoutEnseignantMatieresInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantClasses?: Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantCreateWithoutPresencesInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseCreateNestedManyWithoutEnseignantInput
  user?: Prisma.UserCreateNestedOneWithoutEnseignantsInput
  assignedClassroom?: Prisma.ClasseCreateNestedOneWithoutTitulaireEnseignantInput
}

export type EnseignantUncheckedCreateWithoutPresencesInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId?: string | null
  assignedClassroomId?: string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput
}

export type EnseignantCreateOrConnectWithoutPresencesInput = {
  where: Prisma.EnseignantWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutPresencesInput, Prisma.EnseignantUncheckedCreateWithoutPresencesInput>
}

export type EnseignantUpsertWithoutPresencesInput = {
  update: Prisma.XOR<Prisma.EnseignantUpdateWithoutPresencesInput, Prisma.EnseignantUncheckedUpdateWithoutPresencesInput>
  create: Prisma.XOR<Prisma.EnseignantCreateWithoutPresencesInput, Prisma.EnseignantUncheckedCreateWithoutPresencesInput>
  where?: Prisma.EnseignantWhereInput
}

export type EnseignantUpdateToOneWithWhereWithoutPresencesInput = {
  where?: Prisma.EnseignantWhereInput
  data: Prisma.XOR<Prisma.EnseignantUpdateWithoutPresencesInput, Prisma.EnseignantUncheckedUpdateWithoutPresencesInput>
}

export type EnseignantUpdateWithoutPresencesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUpdateManyWithoutEnseignantNestedInput
  user?: Prisma.UserUpdateOneWithoutEnseignantsNestedInput
  assignedClassroom?: Prisma.ClasseUpdateOneWithoutTitulaireEnseignantNestedInput
}

export type EnseignantUncheckedUpdateWithoutPresencesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantCreateManyUserInput = {
  id?: string
  nom: string
  email: string
  createdAt?: Date | string
  updatedAt?: Date | string
  assignedClassroomId?: string | null
}

export type EnseignantUpdateWithoutUserInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUpdateManyWithoutEnseignantNestedInput
  assignedClassroom?: Prisma.ClasseUpdateOneWithoutTitulaireEnseignantNestedInput
}

export type EnseignantUncheckedUpdateWithoutUserInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput
  enseignantClasses?: Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput
  presences?: Prisma.PresenceUncheckedUpdateManyWithoutEnseignantNestedInput
}

export type EnseignantUncheckedUpdateManyWithoutUserInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedClassroomId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type EnseignantCountOutputType
 */

export type EnseignantCountOutputType = {
  enseignantMatieres: number
  enseignantClasses: number
  presences: number
}

export type EnseignantCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignantMatieres?: boolean | EnseignantCountOutputTypeCountEnseignantMatieresArgs
  enseignantClasses?: boolean | EnseignantCountOutputTypeCountEnseignantClassesArgs
  presences?: boolean | EnseignantCountOutputTypeCountPresencesArgs
}

/**
 * EnseignantCountOutputType without action
 */
export type EnseignantCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantCountOutputType
   */
  select?: Prisma.EnseignantCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EnseignantCountOutputType without action
 */
export type EnseignantCountOutputTypeCountEnseignantMatieresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantMatiereWhereInput
}

/**
 * EnseignantCountOutputType without action
 */
export type EnseignantCountOutputTypeCountEnseignantClassesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantClasseWhereInput
}

/**
 * EnseignantCountOutputType without action
 */
export type EnseignantCountOutputTypeCountPresencesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PresenceWhereInput
}


export type EnseignantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nom?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  assignedClassroomId?: boolean
  enseignantMatieres?: boolean | Prisma.Enseignant$enseignantMatieresArgs<ExtArgs>
  enseignantClasses?: boolean | Prisma.Enseignant$enseignantClassesArgs<ExtArgs>
  presences?: boolean | Prisma.Enseignant$presencesArgs<ExtArgs>
  user?: boolean | Prisma.Enseignant$userArgs<ExtArgs>
  assignedClassroom?: boolean | Prisma.Enseignant$assignedClassroomArgs<ExtArgs>
  _count?: boolean | Prisma.EnseignantCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["enseignant"]>



export type EnseignantSelectScalar = {
  id?: boolean
  nom?: boolean
  email?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  assignedClassroomId?: boolean
}

export type EnseignantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nom" | "email" | "createdAt" | "updatedAt" | "userId" | "assignedClassroomId", ExtArgs["result"]["enseignant"]>
export type EnseignantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignantMatieres?: boolean | Prisma.Enseignant$enseignantMatieresArgs<ExtArgs>
  enseignantClasses?: boolean | Prisma.Enseignant$enseignantClassesArgs<ExtArgs>
  presences?: boolean | Prisma.Enseignant$presencesArgs<ExtArgs>
  user?: boolean | Prisma.Enseignant$userArgs<ExtArgs>
  assignedClassroom?: boolean | Prisma.Enseignant$assignedClassroomArgs<ExtArgs>
  _count?: boolean | Prisma.EnseignantCountOutputTypeDefaultArgs<ExtArgs>
}

export type $EnseignantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Enseignant"
  objects: {
    enseignantMatieres: Prisma.$EnseignantMatierePayload<ExtArgs>[]
    enseignantClasses: Prisma.$EnseignantClassePayload<ExtArgs>[]
    presences: Prisma.$PresencePayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs> | null
    assignedClassroom: Prisma.$ClassePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    nom: string
    email: string
    createdAt: Date
    updatedAt: Date
    userId: string | null
    assignedClassroomId: string | null
  }, ExtArgs["result"]["enseignant"]>
  composites: {}
}

export type EnseignantGetPayload<S extends boolean | null | undefined | EnseignantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnseignantPayload, S>

export type EnseignantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EnseignantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EnseignantCountAggregateInputType | true
  }

export interface EnseignantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enseignant'], meta: { name: 'Enseignant' } }
  /**
   * Find zero or one Enseignant that matches the filter.
   * @param {EnseignantFindUniqueArgs} args - Arguments to find a Enseignant
   * @example
   * // Get one Enseignant
   * const enseignant = await prisma.enseignant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EnseignantFindUniqueArgs>(args: Prisma.SelectSubset<T, EnseignantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Enseignant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EnseignantFindUniqueOrThrowArgs} args - Arguments to find a Enseignant
   * @example
   * // Get one Enseignant
   * const enseignant = await prisma.enseignant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EnseignantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EnseignantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Enseignant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantFindFirstArgs} args - Arguments to find a Enseignant
   * @example
   * // Get one Enseignant
   * const enseignant = await prisma.enseignant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EnseignantFindFirstArgs>(args?: Prisma.SelectSubset<T, EnseignantFindFirstArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Enseignant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantFindFirstOrThrowArgs} args - Arguments to find a Enseignant
   * @example
   * // Get one Enseignant
   * const enseignant = await prisma.enseignant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EnseignantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EnseignantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Enseignants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Enseignants
   * const enseignants = await prisma.enseignant.findMany()
   * 
   * // Get first 10 Enseignants
   * const enseignants = await prisma.enseignant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const enseignantWithIdOnly = await prisma.enseignant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EnseignantFindManyArgs>(args?: Prisma.SelectSubset<T, EnseignantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Enseignant.
   * @param {EnseignantCreateArgs} args - Arguments to create a Enseignant.
   * @example
   * // Create one Enseignant
   * const Enseignant = await prisma.enseignant.create({
   *   data: {
   *     // ... data to create a Enseignant
   *   }
   * })
   * 
   */
  create<T extends EnseignantCreateArgs>(args: Prisma.SelectSubset<T, EnseignantCreateArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Enseignants.
   * @param {EnseignantCreateManyArgs} args - Arguments to create many Enseignants.
   * @example
   * // Create many Enseignants
   * const enseignant = await prisma.enseignant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EnseignantCreateManyArgs>(args?: Prisma.SelectSubset<T, EnseignantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Enseignant.
   * @param {EnseignantDeleteArgs} args - Arguments to delete one Enseignant.
   * @example
   * // Delete one Enseignant
   * const Enseignant = await prisma.enseignant.delete({
   *   where: {
   *     // ... filter to delete one Enseignant
   *   }
   * })
   * 
   */
  delete<T extends EnseignantDeleteArgs>(args: Prisma.SelectSubset<T, EnseignantDeleteArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Enseignant.
   * @param {EnseignantUpdateArgs} args - Arguments to update one Enseignant.
   * @example
   * // Update one Enseignant
   * const enseignant = await prisma.enseignant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EnseignantUpdateArgs>(args: Prisma.SelectSubset<T, EnseignantUpdateArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Enseignants.
   * @param {EnseignantDeleteManyArgs} args - Arguments to filter Enseignants to delete.
   * @example
   * // Delete a few Enseignants
   * const { count } = await prisma.enseignant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EnseignantDeleteManyArgs>(args?: Prisma.SelectSubset<T, EnseignantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Enseignants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Enseignants
   * const enseignant = await prisma.enseignant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EnseignantUpdateManyArgs>(args: Prisma.SelectSubset<T, EnseignantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Enseignant.
   * @param {EnseignantUpsertArgs} args - Arguments to update or create a Enseignant.
   * @example
   * // Update or create a Enseignant
   * const enseignant = await prisma.enseignant.upsert({
   *   create: {
   *     // ... data to create a Enseignant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Enseignant we want to update
   *   }
   * })
   */
  upsert<T extends EnseignantUpsertArgs>(args: Prisma.SelectSubset<T, EnseignantUpsertArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Enseignants that matches the filter.
   * @param {EnseignantFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const enseignant = await prisma.enseignant.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.EnseignantFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Enseignant.
   * @param {EnseignantAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const enseignant = await prisma.enseignant.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.EnseignantAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Enseignants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantCountArgs} args - Arguments to filter Enseignants to count.
   * @example
   * // Count the number of Enseignants
   * const count = await prisma.enseignant.count({
   *   where: {
   *     // ... the filter for the Enseignants we want to count
   *   }
   * })
  **/
  count<T extends EnseignantCountArgs>(
    args?: Prisma.Subset<T, EnseignantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EnseignantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Enseignant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EnseignantAggregateArgs>(args: Prisma.Subset<T, EnseignantAggregateArgs>): Prisma.PrismaPromise<GetEnseignantAggregateType<T>>

  /**
   * Group by Enseignant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EnseignantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EnseignantGroupByArgs['orderBy'] }
      : { orderBy?: EnseignantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EnseignantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnseignantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Enseignant model
 */
readonly fields: EnseignantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Enseignant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EnseignantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  enseignantMatieres<T extends Prisma.Enseignant$enseignantMatieresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Enseignant$enseignantMatieresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  enseignantClasses<T extends Prisma.Enseignant$enseignantClassesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Enseignant$enseignantClassesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  presences<T extends Prisma.Enseignant$presencesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Enseignant$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.Enseignant$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Enseignant$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  assignedClassroom<T extends Prisma.Enseignant$assignedClassroomArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Enseignant$assignedClassroomArgs<ExtArgs>>): Prisma.Prisma__ClasseClient<runtime.Types.Result.GetResult<Prisma.$ClassePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Enseignant model
 */
export interface EnseignantFieldRefs {
  readonly id: Prisma.FieldRef<"Enseignant", 'String'>
  readonly nom: Prisma.FieldRef<"Enseignant", 'String'>
  readonly email: Prisma.FieldRef<"Enseignant", 'String'>
  readonly createdAt: Prisma.FieldRef<"Enseignant", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Enseignant", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Enseignant", 'String'>
  readonly assignedClassroomId: Prisma.FieldRef<"Enseignant", 'String'>
}
    

// Custom InputTypes
/**
 * Enseignant findUnique
 */
export type EnseignantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter, which Enseignant to fetch.
   */
  where: Prisma.EnseignantWhereUniqueInput
}

/**
 * Enseignant findUniqueOrThrow
 */
export type EnseignantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter, which Enseignant to fetch.
   */
  where: Prisma.EnseignantWhereUniqueInput
}

/**
 * Enseignant findFirst
 */
export type EnseignantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter, which Enseignant to fetch.
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Enseignants to fetch.
   */
  orderBy?: Prisma.EnseignantOrderByWithRelationInput | Prisma.EnseignantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Enseignants.
   */
  cursor?: Prisma.EnseignantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Enseignants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Enseignants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Enseignants.
   */
  distinct?: Prisma.EnseignantScalarFieldEnum | Prisma.EnseignantScalarFieldEnum[]
}

/**
 * Enseignant findFirstOrThrow
 */
export type EnseignantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter, which Enseignant to fetch.
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Enseignants to fetch.
   */
  orderBy?: Prisma.EnseignantOrderByWithRelationInput | Prisma.EnseignantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Enseignants.
   */
  cursor?: Prisma.EnseignantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Enseignants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Enseignants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Enseignants.
   */
  distinct?: Prisma.EnseignantScalarFieldEnum | Prisma.EnseignantScalarFieldEnum[]
}

/**
 * Enseignant findMany
 */
export type EnseignantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter, which Enseignants to fetch.
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Enseignants to fetch.
   */
  orderBy?: Prisma.EnseignantOrderByWithRelationInput | Prisma.EnseignantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Enseignants.
   */
  cursor?: Prisma.EnseignantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Enseignants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Enseignants.
   */
  skip?: number
  distinct?: Prisma.EnseignantScalarFieldEnum | Prisma.EnseignantScalarFieldEnum[]
}

/**
 * Enseignant create
 */
export type EnseignantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * The data needed to create a Enseignant.
   */
  data: Prisma.XOR<Prisma.EnseignantCreateInput, Prisma.EnseignantUncheckedCreateInput>
}

/**
 * Enseignant createMany
 */
export type EnseignantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Enseignants.
   */
  data: Prisma.EnseignantCreateManyInput | Prisma.EnseignantCreateManyInput[]
}

/**
 * Enseignant update
 */
export type EnseignantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * The data needed to update a Enseignant.
   */
  data: Prisma.XOR<Prisma.EnseignantUpdateInput, Prisma.EnseignantUncheckedUpdateInput>
  /**
   * Choose, which Enseignant to update.
   */
  where: Prisma.EnseignantWhereUniqueInput
}

/**
 * Enseignant updateMany
 */
export type EnseignantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Enseignants.
   */
  data: Prisma.XOR<Prisma.EnseignantUpdateManyMutationInput, Prisma.EnseignantUncheckedUpdateManyInput>
  /**
   * Filter which Enseignants to update
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * Limit how many Enseignants to update.
   */
  limit?: number
}

/**
 * Enseignant upsert
 */
export type EnseignantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * The filter to search for the Enseignant to update in case it exists.
   */
  where: Prisma.EnseignantWhereUniqueInput
  /**
   * In case the Enseignant found by the `where` argument doesn't exist, create a new Enseignant with this data.
   */
  create: Prisma.XOR<Prisma.EnseignantCreateInput, Prisma.EnseignantUncheckedCreateInput>
  /**
   * In case the Enseignant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EnseignantUpdateInput, Prisma.EnseignantUncheckedUpdateInput>
}

/**
 * Enseignant delete
 */
export type EnseignantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
  /**
   * Filter which Enseignant to delete.
   */
  where: Prisma.EnseignantWhereUniqueInput
}

/**
 * Enseignant deleteMany
 */
export type EnseignantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Enseignants to delete
   */
  where?: Prisma.EnseignantWhereInput
  /**
   * Limit how many Enseignants to delete.
   */
  limit?: number
}

/**
 * Enseignant findRaw
 */
export type EnseignantFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Enseignant aggregateRaw
 */
export type EnseignantAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Enseignant.enseignantMatieres
 */
export type Enseignant$enseignantMatieresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  where?: Prisma.EnseignantMatiereWhereInput
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EnseignantMatiereScalarFieldEnum | Prisma.EnseignantMatiereScalarFieldEnum[]
}

/**
 * Enseignant.enseignantClasses
 */
export type Enseignant$enseignantClassesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  where?: Prisma.EnseignantClasseWhereInput
  orderBy?: Prisma.EnseignantClasseOrderByWithRelationInput | Prisma.EnseignantClasseOrderByWithRelationInput[]
  cursor?: Prisma.EnseignantClasseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EnseignantClasseScalarFieldEnum | Prisma.EnseignantClasseScalarFieldEnum[]
}

/**
 * Enseignant.presences
 */
export type Enseignant$presencesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  where?: Prisma.PresenceWhereInput
  orderBy?: Prisma.PresenceOrderByWithRelationInput | Prisma.PresenceOrderByWithRelationInput[]
  cursor?: Prisma.PresenceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PresenceScalarFieldEnum | Prisma.PresenceScalarFieldEnum[]
}

/**
 * Enseignant.user
 */
export type Enseignant$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Enseignant.assignedClassroom
 */
export type Enseignant$assignedClassroomArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Classe
   */
  select?: Prisma.ClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Classe
   */
  omit?: Prisma.ClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClasseInclude<ExtArgs> | null
  where?: Prisma.ClasseWhereInput
}

/**
 * Enseignant without action
 */
export type EnseignantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enseignant
   */
  select?: Prisma.EnseignantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enseignant
   */
  omit?: Prisma.EnseignantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantInclude<ExtArgs> | null
}
