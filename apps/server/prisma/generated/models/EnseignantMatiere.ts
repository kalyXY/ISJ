
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EnseignantMatiere` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EnseignantMatiere
 * 
 */
export type EnseignantMatiereModel = runtime.Types.Result.DefaultSelection<Prisma.$EnseignantMatierePayload>

export type AggregateEnseignantMatiere = {
  _count: EnseignantMatiereCountAggregateOutputType | null
  _min: EnseignantMatiereMinAggregateOutputType | null
  _max: EnseignantMatiereMaxAggregateOutputType | null
}

export type EnseignantMatiereMinAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  matiereId: string | null
}

export type EnseignantMatiereMaxAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  matiereId: string | null
}

export type EnseignantMatiereCountAggregateOutputType = {
  id: number
  enseignantId: number
  matiereId: number
  _all: number
}


export type EnseignantMatiereMinAggregateInputType = {
  id?: true
  enseignantId?: true
  matiereId?: true
}

export type EnseignantMatiereMaxAggregateInputType = {
  id?: true
  enseignantId?: true
  matiereId?: true
}

export type EnseignantMatiereCountAggregateInputType = {
  id?: true
  enseignantId?: true
  matiereId?: true
  _all?: true
}

export type EnseignantMatiereAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnseignantMatiere to aggregate.
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantMatieres to fetch.
   */
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantMatieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantMatieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EnseignantMatieres
  **/
  _count?: true | EnseignantMatiereCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EnseignantMatiereMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EnseignantMatiereMaxAggregateInputType
}

export type GetEnseignantMatiereAggregateType<T extends EnseignantMatiereAggregateArgs> = {
      [P in keyof T & keyof AggregateEnseignantMatiere]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEnseignantMatiere[P]>
    : Prisma.GetScalarType<T[P], AggregateEnseignantMatiere[P]>
}




export type EnseignantMatiereGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantMatiereWhereInput
  orderBy?: Prisma.EnseignantMatiereOrderByWithAggregationInput | Prisma.EnseignantMatiereOrderByWithAggregationInput[]
  by: Prisma.EnseignantMatiereScalarFieldEnum[] | Prisma.EnseignantMatiereScalarFieldEnum
  having?: Prisma.EnseignantMatiereScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EnseignantMatiereCountAggregateInputType | true
  _min?: EnseignantMatiereMinAggregateInputType
  _max?: EnseignantMatiereMaxAggregateInputType
}

export type EnseignantMatiereGroupByOutputType = {
  id: string
  enseignantId: string
  matiereId: string
  _count: EnseignantMatiereCountAggregateOutputType | null
  _min: EnseignantMatiereMinAggregateOutputType | null
  _max: EnseignantMatiereMaxAggregateOutputType | null
}

type GetEnseignantMatiereGroupByPayload<T extends EnseignantMatiereGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EnseignantMatiereGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EnseignantMatiereGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EnseignantMatiereGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EnseignantMatiereGroupByOutputType[P]>
      }
    >
  > 



export type EnseignantMatiereWhereInput = {
  AND?: Prisma.EnseignantMatiereWhereInput | Prisma.EnseignantMatiereWhereInput[]
  OR?: Prisma.EnseignantMatiereWhereInput[]
  NOT?: Prisma.EnseignantMatiereWhereInput | Prisma.EnseignantMatiereWhereInput[]
  id?: Prisma.StringFilter<"EnseignantMatiere"> | string
  enseignantId?: Prisma.StringFilter<"EnseignantMatiere"> | string
  matiereId?: Prisma.StringFilter<"EnseignantMatiere"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  matiere?: Prisma.XOR<Prisma.MatiereScalarRelationFilter, Prisma.MatiereWhereInput>
}

export type EnseignantMatiereOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  enseignant?: Prisma.EnseignantOrderByWithRelationInput
  matiere?: Prisma.MatiereOrderByWithRelationInput
}

export type EnseignantMatiereWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EnseignantMatiereWhereInput | Prisma.EnseignantMatiereWhereInput[]
  OR?: Prisma.EnseignantMatiereWhereInput[]
  NOT?: Prisma.EnseignantMatiereWhereInput | Prisma.EnseignantMatiereWhereInput[]
  enseignantId?: Prisma.StringFilter<"EnseignantMatiere"> | string
  matiereId?: Prisma.StringFilter<"EnseignantMatiere"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  matiere?: Prisma.XOR<Prisma.MatiereScalarRelationFilter, Prisma.MatiereWhereInput>
}, "id">

export type EnseignantMatiereOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  _count?: Prisma.EnseignantMatiereCountOrderByAggregateInput
  _max?: Prisma.EnseignantMatiereMaxOrderByAggregateInput
  _min?: Prisma.EnseignantMatiereMinOrderByAggregateInput
}

export type EnseignantMatiereScalarWhereWithAggregatesInput = {
  AND?: Prisma.EnseignantMatiereScalarWhereWithAggregatesInput | Prisma.EnseignantMatiereScalarWhereWithAggregatesInput[]
  OR?: Prisma.EnseignantMatiereScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EnseignantMatiereScalarWhereWithAggregatesInput | Prisma.EnseignantMatiereScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EnseignantMatiere"> | string
  enseignantId?: Prisma.StringWithAggregatesFilter<"EnseignantMatiere"> | string
  matiereId?: Prisma.StringWithAggregatesFilter<"EnseignantMatiere"> | string
}

export type EnseignantMatiereCreateInput = {
  id?: string
  enseignant: Prisma.EnseignantCreateNestedOneWithoutEnseignantMatieresInput
  matiere: Prisma.MatiereCreateNestedOneWithoutEnseignantsMatieresInput
}

export type EnseignantMatiereUncheckedCreateInput = {
  id?: string
  enseignantId: string
  matiereId: string
}

export type EnseignantMatiereUpdateInput = {
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutEnseignantMatieresNestedInput
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutEnseignantsMatieresNestedInput
}

export type EnseignantMatiereUncheckedUpdateInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantMatiereCreateManyInput = {
  id?: string
  enseignantId: string
  matiereId: string
}

export type EnseignantMatiereUpdateManyMutationInput = {

}

export type EnseignantMatiereUncheckedUpdateManyInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantMatiereListRelationFilter = {
  every?: Prisma.EnseignantMatiereWhereInput
  some?: Prisma.EnseignantMatiereWhereInput
  none?: Prisma.EnseignantMatiereWhereInput
}

export type EnseignantMatiereOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnseignantMatiereCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
}

export type EnseignantMatiereMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
}

export type EnseignantMatiereMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
}

export type EnseignantMatiereCreateNestedManyWithoutMatiereInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput> | Prisma.EnseignantMatiereCreateWithoutMatiereInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput | Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyMatiereInputEnvelope
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
}

export type EnseignantMatiereUncheckedCreateNestedManyWithoutMatiereInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput> | Prisma.EnseignantMatiereCreateWithoutMatiereInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput | Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyMatiereInputEnvelope
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
}

export type EnseignantMatiereUpdateManyWithoutMatiereNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput> | Prisma.EnseignantMatiereCreateWithoutMatiereInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput | Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput[]
  upsert?: Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutMatiereInput | Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutMatiereInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyMatiereInputEnvelope
  set?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  disconnect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  delete?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  update?: Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutMatiereInput | Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutMatiereInput[]
  updateMany?: Prisma.EnseignantMatiereUpdateManyWithWhereWithoutMatiereInput | Prisma.EnseignantMatiereUpdateManyWithWhereWithoutMatiereInput[]
  deleteMany?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
}

export type EnseignantMatiereUncheckedUpdateManyWithoutMatiereNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput> | Prisma.EnseignantMatiereCreateWithoutMatiereInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput | Prisma.EnseignantMatiereCreateOrConnectWithoutMatiereInput[]
  upsert?: Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutMatiereInput | Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutMatiereInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyMatiereInputEnvelope
  set?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  disconnect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  delete?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  update?: Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutMatiereInput | Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutMatiereInput[]
  updateMany?: Prisma.EnseignantMatiereUpdateManyWithWhereWithoutMatiereInput | Prisma.EnseignantMatiereUpdateManyWithWhereWithoutMatiereInput[]
  deleteMany?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
}

export type EnseignantMatiereCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantMatiereCreateWithoutEnseignantInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyEnseignantInputEnvelope
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
}

export type EnseignantMatiereUncheckedCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantMatiereCreateWithoutEnseignantInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyEnseignantInputEnvelope
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
}

export type EnseignantMatiereUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantMatiereCreateWithoutEnseignantInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyEnseignantInputEnvelope
  set?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  disconnect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  delete?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  update?: Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.EnseignantMatiereUpdateManyWithWhereWithoutEnseignantInput | Prisma.EnseignantMatiereUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
}

export type EnseignantMatiereUncheckedUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantMatiereCreateWithoutEnseignantInput[] | Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantMatiereCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantMatiereUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantMatiereCreateManyEnseignantInputEnvelope
  set?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  disconnect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  delete?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  connect?: Prisma.EnseignantMatiereWhereUniqueInput | Prisma.EnseignantMatiereWhereUniqueInput[]
  update?: Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantMatiereUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.EnseignantMatiereUpdateManyWithWhereWithoutEnseignantInput | Prisma.EnseignantMatiereUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
}

export type EnseignantMatiereCreateWithoutMatiereInput = {
  id?: string
  enseignant: Prisma.EnseignantCreateNestedOneWithoutEnseignantMatieresInput
}

export type EnseignantMatiereUncheckedCreateWithoutMatiereInput = {
  id?: string
  enseignantId: string
}

export type EnseignantMatiereCreateOrConnectWithoutMatiereInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput>
}

export type EnseignantMatiereCreateManyMatiereInputEnvelope = {
  data: Prisma.EnseignantMatiereCreateManyMatiereInput | Prisma.EnseignantMatiereCreateManyMatiereInput[]
}

export type EnseignantMatiereUpsertWithWhereUniqueWithoutMatiereInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  update: Prisma.XOR<Prisma.EnseignantMatiereUpdateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedUpdateWithoutMatiereInput>
  create: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedCreateWithoutMatiereInput>
}

export type EnseignantMatiereUpdateWithWhereUniqueWithoutMatiereInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateWithoutMatiereInput, Prisma.EnseignantMatiereUncheckedUpdateWithoutMatiereInput>
}

export type EnseignantMatiereUpdateManyWithWhereWithoutMatiereInput = {
  where: Prisma.EnseignantMatiereScalarWhereInput
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateManyMutationInput, Prisma.EnseignantMatiereUncheckedUpdateManyWithoutMatiereInput>
}

export type EnseignantMatiereScalarWhereInput = {
  AND?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
  OR?: Prisma.EnseignantMatiereScalarWhereInput[]
  NOT?: Prisma.EnseignantMatiereScalarWhereInput | Prisma.EnseignantMatiereScalarWhereInput[]
  id?: Prisma.StringFilter<"EnseignantMatiere"> | string
  enseignantId?: Prisma.StringFilter<"EnseignantMatiere"> | string
  matiereId?: Prisma.StringFilter<"EnseignantMatiere"> | string
}

export type EnseignantMatiereCreateWithoutEnseignantInput = {
  id?: string
  matiere: Prisma.MatiereCreateNestedOneWithoutEnseignantsMatieresInput
}

export type EnseignantMatiereUncheckedCreateWithoutEnseignantInput = {
  id?: string
  matiereId: string
}

export type EnseignantMatiereCreateOrConnectWithoutEnseignantInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput>
}

export type EnseignantMatiereCreateManyEnseignantInputEnvelope = {
  data: Prisma.EnseignantMatiereCreateManyEnseignantInput | Prisma.EnseignantMatiereCreateManyEnseignantInput[]
}

export type EnseignantMatiereUpsertWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  update: Prisma.XOR<Prisma.EnseignantMatiereUpdateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedUpdateWithoutEnseignantInput>
  create: Prisma.XOR<Prisma.EnseignantMatiereCreateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedCreateWithoutEnseignantInput>
}

export type EnseignantMatiereUpdateWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.EnseignantMatiereWhereUniqueInput
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateWithoutEnseignantInput, Prisma.EnseignantMatiereUncheckedUpdateWithoutEnseignantInput>
}

export type EnseignantMatiereUpdateManyWithWhereWithoutEnseignantInput = {
  where: Prisma.EnseignantMatiereScalarWhereInput
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateManyMutationInput, Prisma.EnseignantMatiereUncheckedUpdateManyWithoutEnseignantInput>
}

export type EnseignantMatiereCreateManyMatiereInput = {
  id?: string
  enseignantId: string
}

export type EnseignantMatiereUpdateWithoutMatiereInput = {
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutEnseignantMatieresNestedInput
}

export type EnseignantMatiereUncheckedUpdateWithoutMatiereInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantMatiereUncheckedUpdateManyWithoutMatiereInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantMatiereCreateManyEnseignantInput = {
  id?: string
  matiereId: string
}

export type EnseignantMatiereUpdateWithoutEnseignantInput = {
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutEnseignantsMatieresNestedInput
}

export type EnseignantMatiereUncheckedUpdateWithoutEnseignantInput = {
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantMatiereUncheckedUpdateManyWithoutEnseignantInput = {
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type EnseignantMatiereSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enseignantId?: boolean
  matiereId?: boolean
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  matiere?: boolean | Prisma.MatiereDefaultArgs<ExtArgs>
}, ExtArgs["result"]["enseignantMatiere"]>



export type EnseignantMatiereSelectScalar = {
  id?: boolean
  enseignantId?: boolean
  matiereId?: boolean
}

export type EnseignantMatiereOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "enseignantId" | "matiereId", ExtArgs["result"]["enseignantMatiere"]>
export type EnseignantMatiereInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  matiere?: boolean | Prisma.MatiereDefaultArgs<ExtArgs>
}

export type $EnseignantMatierePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EnseignantMatiere"
  objects: {
    enseignant: Prisma.$EnseignantPayload<ExtArgs>
    matiere: Prisma.$MatierePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    enseignantId: string
    matiereId: string
  }, ExtArgs["result"]["enseignantMatiere"]>
  composites: {}
}

export type EnseignantMatiereGetPayload<S extends boolean | null | undefined | EnseignantMatiereDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload, S>

export type EnseignantMatiereCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EnseignantMatiereFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EnseignantMatiereCountAggregateInputType | true
  }

export interface EnseignantMatiereDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnseignantMatiere'], meta: { name: 'EnseignantMatiere' } }
  /**
   * Find zero or one EnseignantMatiere that matches the filter.
   * @param {EnseignantMatiereFindUniqueArgs} args - Arguments to find a EnseignantMatiere
   * @example
   * // Get one EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EnseignantMatiereFindUniqueArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EnseignantMatiere that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EnseignantMatiereFindUniqueOrThrowArgs} args - Arguments to find a EnseignantMatiere
   * @example
   * // Get one EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EnseignantMatiereFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnseignantMatiere that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereFindFirstArgs} args - Arguments to find a EnseignantMatiere
   * @example
   * // Get one EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EnseignantMatiereFindFirstArgs>(args?: Prisma.SelectSubset<T, EnseignantMatiereFindFirstArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnseignantMatiere that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereFindFirstOrThrowArgs} args - Arguments to find a EnseignantMatiere
   * @example
   * // Get one EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EnseignantMatiereFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EnseignantMatiereFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EnseignantMatieres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EnseignantMatieres
   * const enseignantMatieres = await prisma.enseignantMatiere.findMany()
   * 
   * // Get first 10 EnseignantMatieres
   * const enseignantMatieres = await prisma.enseignantMatiere.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const enseignantMatiereWithIdOnly = await prisma.enseignantMatiere.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EnseignantMatiereFindManyArgs>(args?: Prisma.SelectSubset<T, EnseignantMatiereFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EnseignantMatiere.
   * @param {EnseignantMatiereCreateArgs} args - Arguments to create a EnseignantMatiere.
   * @example
   * // Create one EnseignantMatiere
   * const EnseignantMatiere = await prisma.enseignantMatiere.create({
   *   data: {
   *     // ... data to create a EnseignantMatiere
   *   }
   * })
   * 
   */
  create<T extends EnseignantMatiereCreateArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereCreateArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EnseignantMatieres.
   * @param {EnseignantMatiereCreateManyArgs} args - Arguments to create many EnseignantMatieres.
   * @example
   * // Create many EnseignantMatieres
   * const enseignantMatiere = await prisma.enseignantMatiere.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EnseignantMatiereCreateManyArgs>(args?: Prisma.SelectSubset<T, EnseignantMatiereCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EnseignantMatiere.
   * @param {EnseignantMatiereDeleteArgs} args - Arguments to delete one EnseignantMatiere.
   * @example
   * // Delete one EnseignantMatiere
   * const EnseignantMatiere = await prisma.enseignantMatiere.delete({
   *   where: {
   *     // ... filter to delete one EnseignantMatiere
   *   }
   * })
   * 
   */
  delete<T extends EnseignantMatiereDeleteArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereDeleteArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EnseignantMatiere.
   * @param {EnseignantMatiereUpdateArgs} args - Arguments to update one EnseignantMatiere.
   * @example
   * // Update one EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EnseignantMatiereUpdateArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereUpdateArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EnseignantMatieres.
   * @param {EnseignantMatiereDeleteManyArgs} args - Arguments to filter EnseignantMatieres to delete.
   * @example
   * // Delete a few EnseignantMatieres
   * const { count } = await prisma.enseignantMatiere.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EnseignantMatiereDeleteManyArgs>(args?: Prisma.SelectSubset<T, EnseignantMatiereDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EnseignantMatieres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EnseignantMatieres
   * const enseignantMatiere = await prisma.enseignantMatiere.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EnseignantMatiereUpdateManyArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EnseignantMatiere.
   * @param {EnseignantMatiereUpsertArgs} args - Arguments to update or create a EnseignantMatiere.
   * @example
   * // Update or create a EnseignantMatiere
   * const enseignantMatiere = await prisma.enseignantMatiere.upsert({
   *   create: {
   *     // ... data to create a EnseignantMatiere
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EnseignantMatiere we want to update
   *   }
   * })
   */
  upsert<T extends EnseignantMatiereUpsertArgs>(args: Prisma.SelectSubset<T, EnseignantMatiereUpsertArgs<ExtArgs>>): Prisma.Prisma__EnseignantMatiereClient<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EnseignantMatieres that matches the filter.
   * @param {EnseignantMatiereFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const enseignantMatiere = await prisma.enseignantMatiere.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.EnseignantMatiereFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a EnseignantMatiere.
   * @param {EnseignantMatiereAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const enseignantMatiere = await prisma.enseignantMatiere.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.EnseignantMatiereAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of EnseignantMatieres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereCountArgs} args - Arguments to filter EnseignantMatieres to count.
   * @example
   * // Count the number of EnseignantMatieres
   * const count = await prisma.enseignantMatiere.count({
   *   where: {
   *     // ... the filter for the EnseignantMatieres we want to count
   *   }
   * })
  **/
  count<T extends EnseignantMatiereCountArgs>(
    args?: Prisma.Subset<T, EnseignantMatiereCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EnseignantMatiereCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EnseignantMatiere.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EnseignantMatiereAggregateArgs>(args: Prisma.Subset<T, EnseignantMatiereAggregateArgs>): Prisma.PrismaPromise<GetEnseignantMatiereAggregateType<T>>

  /**
   * Group by EnseignantMatiere.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantMatiereGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EnseignantMatiereGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EnseignantMatiereGroupByArgs['orderBy'] }
      : { orderBy?: EnseignantMatiereGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EnseignantMatiereGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnseignantMatiereGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EnseignantMatiere model
 */
readonly fields: EnseignantMatiereFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EnseignantMatiere.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EnseignantMatiereClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  enseignant<T extends Prisma.EnseignantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EnseignantDefaultArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  matiere<T extends Prisma.MatiereDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MatiereDefaultArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EnseignantMatiere model
 */
export interface EnseignantMatiereFieldRefs {
  readonly id: Prisma.FieldRef<"EnseignantMatiere", 'String'>
  readonly enseignantId: Prisma.FieldRef<"EnseignantMatiere", 'String'>
  readonly matiereId: Prisma.FieldRef<"EnseignantMatiere", 'String'>
}
    

// Custom InputTypes
/**
 * EnseignantMatiere findUnique
 */
export type EnseignantMatiereFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantMatiere to fetch.
   */
  where: Prisma.EnseignantMatiereWhereUniqueInput
}

/**
 * EnseignantMatiere findUniqueOrThrow
 */
export type EnseignantMatiereFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantMatiere to fetch.
   */
  where: Prisma.EnseignantMatiereWhereUniqueInput
}

/**
 * EnseignantMatiere findFirst
 */
export type EnseignantMatiereFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantMatiere to fetch.
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantMatieres to fetch.
   */
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnseignantMatieres.
   */
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantMatieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantMatieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnseignantMatieres.
   */
  distinct?: Prisma.EnseignantMatiereScalarFieldEnum | Prisma.EnseignantMatiereScalarFieldEnum[]
}

/**
 * EnseignantMatiere findFirstOrThrow
 */
export type EnseignantMatiereFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantMatiere to fetch.
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantMatieres to fetch.
   */
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnseignantMatieres.
   */
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantMatieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantMatieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnseignantMatieres.
   */
  distinct?: Prisma.EnseignantMatiereScalarFieldEnum | Prisma.EnseignantMatiereScalarFieldEnum[]
}

/**
 * EnseignantMatiere findMany
 */
export type EnseignantMatiereFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantMatieres to fetch.
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantMatieres to fetch.
   */
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EnseignantMatieres.
   */
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantMatieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantMatieres.
   */
  skip?: number
  distinct?: Prisma.EnseignantMatiereScalarFieldEnum | Prisma.EnseignantMatiereScalarFieldEnum[]
}

/**
 * EnseignantMatiere create
 */
export type EnseignantMatiereCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * The data needed to create a EnseignantMatiere.
   */
  data: Prisma.XOR<Prisma.EnseignantMatiereCreateInput, Prisma.EnseignantMatiereUncheckedCreateInput>
}

/**
 * EnseignantMatiere createMany
 */
export type EnseignantMatiereCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EnseignantMatieres.
   */
  data: Prisma.EnseignantMatiereCreateManyInput | Prisma.EnseignantMatiereCreateManyInput[]
}

/**
 * EnseignantMatiere update
 */
export type EnseignantMatiereUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * The data needed to update a EnseignantMatiere.
   */
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateInput, Prisma.EnseignantMatiereUncheckedUpdateInput>
  /**
   * Choose, which EnseignantMatiere to update.
   */
  where: Prisma.EnseignantMatiereWhereUniqueInput
}

/**
 * EnseignantMatiere updateMany
 */
export type EnseignantMatiereUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EnseignantMatieres.
   */
  data: Prisma.XOR<Prisma.EnseignantMatiereUpdateManyMutationInput, Prisma.EnseignantMatiereUncheckedUpdateManyInput>
  /**
   * Filter which EnseignantMatieres to update
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * Limit how many EnseignantMatieres to update.
   */
  limit?: number
}

/**
 * EnseignantMatiere upsert
 */
export type EnseignantMatiereUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * The filter to search for the EnseignantMatiere to update in case it exists.
   */
  where: Prisma.EnseignantMatiereWhereUniqueInput
  /**
   * In case the EnseignantMatiere found by the `where` argument doesn't exist, create a new EnseignantMatiere with this data.
   */
  create: Prisma.XOR<Prisma.EnseignantMatiereCreateInput, Prisma.EnseignantMatiereUncheckedCreateInput>
  /**
   * In case the EnseignantMatiere was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EnseignantMatiereUpdateInput, Prisma.EnseignantMatiereUncheckedUpdateInput>
}

/**
 * EnseignantMatiere delete
 */
export type EnseignantMatiereDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  /**
   * Filter which EnseignantMatiere to delete.
   */
  where: Prisma.EnseignantMatiereWhereUniqueInput
}

/**
 * EnseignantMatiere deleteMany
 */
export type EnseignantMatiereDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnseignantMatieres to delete
   */
  where?: Prisma.EnseignantMatiereWhereInput
  /**
   * Limit how many EnseignantMatieres to delete.
   */
  limit?: number
}

/**
 * EnseignantMatiere findRaw
 */
export type EnseignantMatiereFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * EnseignantMatiere aggregateRaw
 */
export type EnseignantMatiereAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * EnseignantMatiere without action
 */
export type EnseignantMatiereDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
}
