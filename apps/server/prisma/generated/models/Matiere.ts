
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Matiere` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Matiere
 * 
 */
export type MatiereModel = runtime.Types.Result.DefaultSelection<Prisma.$MatierePayload>

export type AggregateMatiere = {
  _count: MatiereCountAggregateOutputType | null
  _min: MatiereMinAggregateOutputType | null
  _max: MatiereMaxAggregateOutputType | null
}

export type MatiereMinAggregateOutputType = {
  id: string | null
  nom: string | null
  classeId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MatiereMaxAggregateOutputType = {
  id: string | null
  nom: string | null
  classeId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MatiereCountAggregateOutputType = {
  id: number
  nom: number
  classeId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MatiereMinAggregateInputType = {
  id?: true
  nom?: true
  classeId?: true
  createdAt?: true
  updatedAt?: true
}

export type MatiereMaxAggregateInputType = {
  id?: true
  nom?: true
  classeId?: true
  createdAt?: true
  updatedAt?: true
}

export type MatiereCountAggregateInputType = {
  id?: true
  nom?: true
  classeId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MatiereAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Matiere to aggregate.
   */
  where?: Prisma.MatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matieres to fetch.
   */
  orderBy?: Prisma.MatiereOrderByWithRelationInput | Prisma.MatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Matieres
  **/
  _count?: true | MatiereCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MatiereMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MatiereMaxAggregateInputType
}

export type GetMatiereAggregateType<T extends MatiereAggregateArgs> = {
      [P in keyof T & keyof AggregateMatiere]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMatiere[P]>
    : Prisma.GetScalarType<T[P], AggregateMatiere[P]>
}




export type MatiereGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MatiereWhereInput
  orderBy?: Prisma.MatiereOrderByWithAggregationInput | Prisma.MatiereOrderByWithAggregationInput[]
  by: Prisma.MatiereScalarFieldEnum[] | Prisma.MatiereScalarFieldEnum
  having?: Prisma.MatiereScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MatiereCountAggregateInputType | true
  _min?: MatiereMinAggregateInputType
  _max?: MatiereMaxAggregateInputType
}

export type MatiereGroupByOutputType = {
  id: string
  nom: string
  classeId: string
  createdAt: Date
  updatedAt: Date
  _count: MatiereCountAggregateOutputType | null
  _min: MatiereMinAggregateOutputType | null
  _max: MatiereMaxAggregateOutputType | null
}

type GetMatiereGroupByPayload<T extends MatiereGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MatiereGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MatiereGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MatiereGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MatiereGroupByOutputType[P]>
      }
    >
  > 



export type MatiereWhereInput = {
  AND?: Prisma.MatiereWhereInput | Prisma.MatiereWhereInput[]
  OR?: Prisma.MatiereWhereInput[]
  NOT?: Prisma.MatiereWhereInput | Prisma.MatiereWhereInput[]
  id?: Prisma.StringFilter<"Matiere"> | string
  nom?: Prisma.StringFilter<"Matiere"> | string
  classeId?: Prisma.StringFilter<"Matiere"> | string
  createdAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
  classe?: Prisma.XOR<Prisma.ClasseScalarRelationFilter, Prisma.ClasseWhereInput>
  enseignantMatieres?: Prisma.EnseignantMatiereListRelationFilter
}

export type MatiereOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  classe?: Prisma.ClasseOrderByWithRelationInput
  enseignantMatieres?: Prisma.EnseignantMatiereOrderByRelationAggregateInput
}

export type MatiereWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MatiereWhereInput | Prisma.MatiereWhereInput[]
  OR?: Prisma.MatiereWhereInput[]
  NOT?: Prisma.MatiereWhereInput | Prisma.MatiereWhereInput[]
  nom?: Prisma.StringFilter<"Matiere"> | string
  classeId?: Prisma.StringFilter<"Matiere"> | string
  createdAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
  classe?: Prisma.XOR<Prisma.ClasseScalarRelationFilter, Prisma.ClasseWhereInput>
  enseignantMatieres?: Prisma.EnseignantMatiereListRelationFilter
}, "id">

export type MatiereOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MatiereCountOrderByAggregateInput
  _max?: Prisma.MatiereMaxOrderByAggregateInput
  _min?: Prisma.MatiereMinOrderByAggregateInput
}

export type MatiereScalarWhereWithAggregatesInput = {
  AND?: Prisma.MatiereScalarWhereWithAggregatesInput | Prisma.MatiereScalarWhereWithAggregatesInput[]
  OR?: Prisma.MatiereScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MatiereScalarWhereWithAggregatesInput | Prisma.MatiereScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Matiere"> | string
  nom?: Prisma.StringWithAggregatesFilter<"Matiere"> | string
  classeId?: Prisma.StringWithAggregatesFilter<"Matiere"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Matiere"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Matiere"> | Date | string
}

export type MatiereCreateInput = {
  id?: string
  nom: string
  createdAt?: Date | string
  updatedAt?: Date | string
  classe: Prisma.ClasseCreateNestedOneWithoutMatieresInput
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutMatiereInput
}

export type MatiereUncheckedCreateInput = {
  id?: string
  nom: string
  classeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutMatiereInput
}

export type MatiereUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  classe?: Prisma.ClasseUpdateOneRequiredWithoutMatieresNestedInput
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutMatiereNestedInput
}

export type MatiereUncheckedUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutMatiereNestedInput
}

export type MatiereCreateManyInput = {
  id?: string
  nom: string
  classeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MatiereUpdateManyMutationInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MatiereUncheckedUpdateManyInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MatiereListRelationFilter = {
  every?: Prisma.MatiereWhereInput
  some?: Prisma.MatiereWhereInput
  none?: Prisma.MatiereWhereInput
}

export type MatiereOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MatiereCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MatiereMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MatiereMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MatiereScalarRelationFilter = {
  is?: Prisma.MatiereWhereInput
  isNot?: Prisma.MatiereWhereInput
}

export type MatiereCreateNestedManyWithoutClasseInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput> | Prisma.MatiereCreateWithoutClasseInput[] | Prisma.MatiereUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutClasseInput | Prisma.MatiereCreateOrConnectWithoutClasseInput[]
  createMany?: Prisma.MatiereCreateManyClasseInputEnvelope
  connect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
}

export type MatiereUncheckedCreateNestedManyWithoutClasseInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput> | Prisma.MatiereCreateWithoutClasseInput[] | Prisma.MatiereUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutClasseInput | Prisma.MatiereCreateOrConnectWithoutClasseInput[]
  createMany?: Prisma.MatiereCreateManyClasseInputEnvelope
  connect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
}

export type MatiereUpdateManyWithoutClasseNestedInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput> | Prisma.MatiereCreateWithoutClasseInput[] | Prisma.MatiereUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutClasseInput | Prisma.MatiereCreateOrConnectWithoutClasseInput[]
  upsert?: Prisma.MatiereUpsertWithWhereUniqueWithoutClasseInput | Prisma.MatiereUpsertWithWhereUniqueWithoutClasseInput[]
  createMany?: Prisma.MatiereCreateManyClasseInputEnvelope
  set?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  disconnect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  delete?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  connect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  update?: Prisma.MatiereUpdateWithWhereUniqueWithoutClasseInput | Prisma.MatiereUpdateWithWhereUniqueWithoutClasseInput[]
  updateMany?: Prisma.MatiereUpdateManyWithWhereWithoutClasseInput | Prisma.MatiereUpdateManyWithWhereWithoutClasseInput[]
  deleteMany?: Prisma.MatiereScalarWhereInput | Prisma.MatiereScalarWhereInput[]
}

export type MatiereUncheckedUpdateManyWithoutClasseNestedInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput> | Prisma.MatiereCreateWithoutClasseInput[] | Prisma.MatiereUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutClasseInput | Prisma.MatiereCreateOrConnectWithoutClasseInput[]
  upsert?: Prisma.MatiereUpsertWithWhereUniqueWithoutClasseInput | Prisma.MatiereUpsertWithWhereUniqueWithoutClasseInput[]
  createMany?: Prisma.MatiereCreateManyClasseInputEnvelope
  set?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  disconnect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  delete?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  connect?: Prisma.MatiereWhereUniqueInput | Prisma.MatiereWhereUniqueInput[]
  update?: Prisma.MatiereUpdateWithWhereUniqueWithoutClasseInput | Prisma.MatiereUpdateWithWhereUniqueWithoutClasseInput[]
  updateMany?: Prisma.MatiereUpdateManyWithWhereWithoutClasseInput | Prisma.MatiereUpdateManyWithWhereWithoutClasseInput[]
  deleteMany?: Prisma.MatiereScalarWhereInput | Prisma.MatiereScalarWhereInput[]
}

export type MatiereCreateNestedOneWithoutEnseignantMatieresInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedCreateWithoutEnseignantMatieresInput>
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutEnseignantMatieresInput
  connect?: Prisma.MatiereWhereUniqueInput
}

export type MatiereUpdateOneRequiredWithoutEnseignantMatieresNestedInput = {
  create?: Prisma.XOR<Prisma.MatiereCreateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedCreateWithoutEnseignantMatieresInput>
  connectOrCreate?: Prisma.MatiereCreateOrConnectWithoutEnseignantMatieresInput
  upsert?: Prisma.MatiereUpsertWithoutEnseignantMatieresInput
  connect?: Prisma.MatiereWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MatiereUpdateToOneWithWhereWithoutEnseignantMatieresInput, Prisma.MatiereUpdateWithoutEnseignantMatieresInput>, Prisma.MatiereUncheckedUpdateWithoutEnseignantMatieresInput>
}

export type MatiereCreateWithoutClasseInput = {
  id?: string
  nom: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereCreateNestedManyWithoutMatiereInput
}

export type MatiereUncheckedCreateWithoutClasseInput = {
  id?: string
  nom: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedCreateNestedManyWithoutMatiereInput
}

export type MatiereCreateOrConnectWithoutClasseInput = {
  where: Prisma.MatiereWhereUniqueInput
  create: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput>
}

export type MatiereCreateManyClasseInputEnvelope = {
  data: Prisma.MatiereCreateManyClasseInput | Prisma.MatiereCreateManyClasseInput[]
}

export type MatiereUpsertWithWhereUniqueWithoutClasseInput = {
  where: Prisma.MatiereWhereUniqueInput
  update: Prisma.XOR<Prisma.MatiereUpdateWithoutClasseInput, Prisma.MatiereUncheckedUpdateWithoutClasseInput>
  create: Prisma.XOR<Prisma.MatiereCreateWithoutClasseInput, Prisma.MatiereUncheckedCreateWithoutClasseInput>
}

export type MatiereUpdateWithWhereUniqueWithoutClasseInput = {
  where: Prisma.MatiereWhereUniqueInput
  data: Prisma.XOR<Prisma.MatiereUpdateWithoutClasseInput, Prisma.MatiereUncheckedUpdateWithoutClasseInput>
}

export type MatiereUpdateManyWithWhereWithoutClasseInput = {
  where: Prisma.MatiereScalarWhereInput
  data: Prisma.XOR<Prisma.MatiereUpdateManyMutationInput, Prisma.MatiereUncheckedUpdateManyWithoutClasseInput>
}

export type MatiereScalarWhereInput = {
  AND?: Prisma.MatiereScalarWhereInput | Prisma.MatiereScalarWhereInput[]
  OR?: Prisma.MatiereScalarWhereInput[]
  NOT?: Prisma.MatiereScalarWhereInput | Prisma.MatiereScalarWhereInput[]
  id?: Prisma.StringFilter<"Matiere"> | string
  nom?: Prisma.StringFilter<"Matiere"> | string
  classeId?: Prisma.StringFilter<"Matiere"> | string
  createdAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Matiere"> | Date | string
}

export type MatiereCreateWithoutEnseignantMatieresInput = {
  id?: string
  nom: string
  createdAt?: Date | string
  updatedAt?: Date | string
  classe: Prisma.ClasseCreateNestedOneWithoutMatieresInput
}

export type MatiereUncheckedCreateWithoutEnseignantMatieresInput = {
  id?: string
  nom: string
  classeId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MatiereCreateOrConnectWithoutEnseignantMatieresInput = {
  where: Prisma.MatiereWhereUniqueInput
  create: Prisma.XOR<Prisma.MatiereCreateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedCreateWithoutEnseignantMatieresInput>
}

export type MatiereUpsertWithoutEnseignantMatieresInput = {
  update: Prisma.XOR<Prisma.MatiereUpdateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedUpdateWithoutEnseignantMatieresInput>
  create: Prisma.XOR<Prisma.MatiereCreateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedCreateWithoutEnseignantMatieresInput>
  where?: Prisma.MatiereWhereInput
}

export type MatiereUpdateToOneWithWhereWithoutEnseignantMatieresInput = {
  where?: Prisma.MatiereWhereInput
  data: Prisma.XOR<Prisma.MatiereUpdateWithoutEnseignantMatieresInput, Prisma.MatiereUncheckedUpdateWithoutEnseignantMatieresInput>
}

export type MatiereUpdateWithoutEnseignantMatieresInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  classe?: Prisma.ClasseUpdateOneRequiredWithoutMatieresNestedInput
}

export type MatiereUncheckedUpdateWithoutEnseignantMatieresInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MatiereCreateManyClasseInput = {
  id?: string
  nom: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MatiereUpdateWithoutClasseInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUpdateManyWithoutMatiereNestedInput
}

export type MatiereUncheckedUpdateWithoutClasseInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enseignantMatieres?: Prisma.EnseignantMatiereUncheckedUpdateManyWithoutMatiereNestedInput
}

export type MatiereUncheckedUpdateManyWithoutClasseInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MatiereCountOutputType
 */

export type MatiereCountOutputType = {
  enseignantMatieres: number
}

export type MatiereCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignantMatieres?: boolean | MatiereCountOutputTypeCountEnseignantMatieresArgs
}

/**
 * MatiereCountOutputType without action
 */
export type MatiereCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MatiereCountOutputType
   */
  select?: Prisma.MatiereCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MatiereCountOutputType without action
 */
export type MatiereCountOutputTypeCountEnseignantMatieresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantMatiereWhereInput
}


export type MatiereSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nom?: boolean
  classeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  classe?: boolean | Prisma.ClasseDefaultArgs<ExtArgs>
  enseignantMatieres?: boolean | Prisma.Matiere$enseignantMatieresArgs<ExtArgs>
  _count?: boolean | Prisma.MatiereCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["matiere"]>



export type MatiereSelectScalar = {
  id?: boolean
  nom?: boolean
  classeId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MatiereOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nom" | "classeId" | "createdAt" | "updatedAt", ExtArgs["result"]["matiere"]>
export type MatiereInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  classe?: boolean | Prisma.ClasseDefaultArgs<ExtArgs>
  enseignantMatieres?: boolean | Prisma.Matiere$enseignantMatieresArgs<ExtArgs>
  _count?: boolean | Prisma.MatiereCountOutputTypeDefaultArgs<ExtArgs>
}

export type $MatierePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Matiere"
  objects: {
    classe: Prisma.$ClassePayload<ExtArgs>
    enseignantMatieres: Prisma.$EnseignantMatierePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    nom: string
    classeId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["matiere"]>
  composites: {}
}

export type MatiereGetPayload<S extends boolean | null | undefined | MatiereDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MatierePayload, S>

export type MatiereCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MatiereFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MatiereCountAggregateInputType | true
  }

export interface MatiereDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Matiere'], meta: { name: 'Matiere' } }
  /**
   * Find zero or one Matiere that matches the filter.
   * @param {MatiereFindUniqueArgs} args - Arguments to find a Matiere
   * @example
   * // Get one Matiere
   * const matiere = await prisma.matiere.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MatiereFindUniqueArgs>(args: Prisma.SelectSubset<T, MatiereFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Matiere that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MatiereFindUniqueOrThrowArgs} args - Arguments to find a Matiere
   * @example
   * // Get one Matiere
   * const matiere = await prisma.matiere.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MatiereFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MatiereFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Matiere that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereFindFirstArgs} args - Arguments to find a Matiere
   * @example
   * // Get one Matiere
   * const matiere = await prisma.matiere.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MatiereFindFirstArgs>(args?: Prisma.SelectSubset<T, MatiereFindFirstArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Matiere that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereFindFirstOrThrowArgs} args - Arguments to find a Matiere
   * @example
   * // Get one Matiere
   * const matiere = await prisma.matiere.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MatiereFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MatiereFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Matieres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Matieres
   * const matieres = await prisma.matiere.findMany()
   * 
   * // Get first 10 Matieres
   * const matieres = await prisma.matiere.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const matiereWithIdOnly = await prisma.matiere.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MatiereFindManyArgs>(args?: Prisma.SelectSubset<T, MatiereFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Matiere.
   * @param {MatiereCreateArgs} args - Arguments to create a Matiere.
   * @example
   * // Create one Matiere
   * const Matiere = await prisma.matiere.create({
   *   data: {
   *     // ... data to create a Matiere
   *   }
   * })
   * 
   */
  create<T extends MatiereCreateArgs>(args: Prisma.SelectSubset<T, MatiereCreateArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Matieres.
   * @param {MatiereCreateManyArgs} args - Arguments to create many Matieres.
   * @example
   * // Create many Matieres
   * const matiere = await prisma.matiere.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MatiereCreateManyArgs>(args?: Prisma.SelectSubset<T, MatiereCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Matiere.
   * @param {MatiereDeleteArgs} args - Arguments to delete one Matiere.
   * @example
   * // Delete one Matiere
   * const Matiere = await prisma.matiere.delete({
   *   where: {
   *     // ... filter to delete one Matiere
   *   }
   * })
   * 
   */
  delete<T extends MatiereDeleteArgs>(args: Prisma.SelectSubset<T, MatiereDeleteArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Matiere.
   * @param {MatiereUpdateArgs} args - Arguments to update one Matiere.
   * @example
   * // Update one Matiere
   * const matiere = await prisma.matiere.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MatiereUpdateArgs>(args: Prisma.SelectSubset<T, MatiereUpdateArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Matieres.
   * @param {MatiereDeleteManyArgs} args - Arguments to filter Matieres to delete.
   * @example
   * // Delete a few Matieres
   * const { count } = await prisma.matiere.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MatiereDeleteManyArgs>(args?: Prisma.SelectSubset<T, MatiereDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Matieres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Matieres
   * const matiere = await prisma.matiere.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MatiereUpdateManyArgs>(args: Prisma.SelectSubset<T, MatiereUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Matiere.
   * @param {MatiereUpsertArgs} args - Arguments to update or create a Matiere.
   * @example
   * // Update or create a Matiere
   * const matiere = await prisma.matiere.upsert({
   *   create: {
   *     // ... data to create a Matiere
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Matiere we want to update
   *   }
   * })
   */
  upsert<T extends MatiereUpsertArgs>(args: Prisma.SelectSubset<T, MatiereUpsertArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Matieres that matches the filter.
   * @param {MatiereFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const matiere = await prisma.matiere.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.MatiereFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Matiere.
   * @param {MatiereAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const matiere = await prisma.matiere.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.MatiereAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Matieres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereCountArgs} args - Arguments to filter Matieres to count.
   * @example
   * // Count the number of Matieres
   * const count = await prisma.matiere.count({
   *   where: {
   *     // ... the filter for the Matieres we want to count
   *   }
   * })
  **/
  count<T extends MatiereCountArgs>(
    args?: Prisma.Subset<T, MatiereCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MatiereCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Matiere.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MatiereAggregateArgs>(args: Prisma.Subset<T, MatiereAggregateArgs>): Prisma.PrismaPromise<GetMatiereAggregateType<T>>

  /**
   * Group by Matiere.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatiereGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MatiereGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MatiereGroupByArgs['orderBy'] }
      : { orderBy?: MatiereGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MatiereGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatiereGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Matiere model
 */
readonly fields: MatiereFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Matiere.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MatiereClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  classe<T extends Prisma.ClasseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClasseDefaultArgs<ExtArgs>>): Prisma.Prisma__ClasseClient<runtime.Types.Result.GetResult<Prisma.$ClassePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  enseignantMatieres<T extends Prisma.Matiere$enseignantMatieresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Matiere$enseignantMatieresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantMatierePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Matiere model
 */
export interface MatiereFieldRefs {
  readonly id: Prisma.FieldRef<"Matiere", 'String'>
  readonly nom: Prisma.FieldRef<"Matiere", 'String'>
  readonly classeId: Prisma.FieldRef<"Matiere", 'String'>
  readonly createdAt: Prisma.FieldRef<"Matiere", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Matiere", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Matiere findUnique
 */
export type MatiereFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter, which Matiere to fetch.
   */
  where: Prisma.MatiereWhereUniqueInput
}

/**
 * Matiere findUniqueOrThrow
 */
export type MatiereFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter, which Matiere to fetch.
   */
  where: Prisma.MatiereWhereUniqueInput
}

/**
 * Matiere findFirst
 */
export type MatiereFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter, which Matiere to fetch.
   */
  where?: Prisma.MatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matieres to fetch.
   */
  orderBy?: Prisma.MatiereOrderByWithRelationInput | Prisma.MatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Matieres.
   */
  cursor?: Prisma.MatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Matieres.
   */
  distinct?: Prisma.MatiereScalarFieldEnum | Prisma.MatiereScalarFieldEnum[]
}

/**
 * Matiere findFirstOrThrow
 */
export type MatiereFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter, which Matiere to fetch.
   */
  where?: Prisma.MatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matieres to fetch.
   */
  orderBy?: Prisma.MatiereOrderByWithRelationInput | Prisma.MatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Matieres.
   */
  cursor?: Prisma.MatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matieres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Matieres.
   */
  distinct?: Prisma.MatiereScalarFieldEnum | Prisma.MatiereScalarFieldEnum[]
}

/**
 * Matiere findMany
 */
export type MatiereFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter, which Matieres to fetch.
   */
  where?: Prisma.MatiereWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matieres to fetch.
   */
  orderBy?: Prisma.MatiereOrderByWithRelationInput | Prisma.MatiereOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Matieres.
   */
  cursor?: Prisma.MatiereWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matieres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matieres.
   */
  skip?: number
  distinct?: Prisma.MatiereScalarFieldEnum | Prisma.MatiereScalarFieldEnum[]
}

/**
 * Matiere create
 */
export type MatiereCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * The data needed to create a Matiere.
   */
  data: Prisma.XOR<Prisma.MatiereCreateInput, Prisma.MatiereUncheckedCreateInput>
}

/**
 * Matiere createMany
 */
export type MatiereCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Matieres.
   */
  data: Prisma.MatiereCreateManyInput | Prisma.MatiereCreateManyInput[]
}

/**
 * Matiere update
 */
export type MatiereUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * The data needed to update a Matiere.
   */
  data: Prisma.XOR<Prisma.MatiereUpdateInput, Prisma.MatiereUncheckedUpdateInput>
  /**
   * Choose, which Matiere to update.
   */
  where: Prisma.MatiereWhereUniqueInput
}

/**
 * Matiere updateMany
 */
export type MatiereUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Matieres.
   */
  data: Prisma.XOR<Prisma.MatiereUpdateManyMutationInput, Prisma.MatiereUncheckedUpdateManyInput>
  /**
   * Filter which Matieres to update
   */
  where?: Prisma.MatiereWhereInput
  /**
   * Limit how many Matieres to update.
   */
  limit?: number
}

/**
 * Matiere upsert
 */
export type MatiereUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * The filter to search for the Matiere to update in case it exists.
   */
  where: Prisma.MatiereWhereUniqueInput
  /**
   * In case the Matiere found by the `where` argument doesn't exist, create a new Matiere with this data.
   */
  create: Prisma.XOR<Prisma.MatiereCreateInput, Prisma.MatiereUncheckedCreateInput>
  /**
   * In case the Matiere was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MatiereUpdateInput, Prisma.MatiereUncheckedUpdateInput>
}

/**
 * Matiere delete
 */
export type MatiereDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
  /**
   * Filter which Matiere to delete.
   */
  where: Prisma.MatiereWhereUniqueInput
}

/**
 * Matiere deleteMany
 */
export type MatiereDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Matieres to delete
   */
  where?: Prisma.MatiereWhereInput
  /**
   * Limit how many Matieres to delete.
   */
  limit?: number
}

/**
 * Matiere findRaw
 */
export type MatiereFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Matiere aggregateRaw
 */
export type MatiereAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Matiere.enseignantMatieres
 */
export type Matiere$enseignantMatieresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantMatiere
   */
  select?: Prisma.EnseignantMatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantMatiere
   */
  omit?: Prisma.EnseignantMatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantMatiereInclude<ExtArgs> | null
  where?: Prisma.EnseignantMatiereWhereInput
  orderBy?: Prisma.EnseignantMatiereOrderByWithRelationInput | Prisma.EnseignantMatiereOrderByWithRelationInput[]
  cursor?: Prisma.EnseignantMatiereWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EnseignantMatiereScalarFieldEnum | Prisma.EnseignantMatiereScalarFieldEnum[]
}

/**
 * Matiere without action
 */
export type MatiereDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Matiere
   */
  select?: Prisma.MatiereSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Matiere
   */
  omit?: Prisma.MatiereOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatiereInclude<ExtArgs> | null
}
