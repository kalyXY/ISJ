
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ParametreEcole` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ParametreEcole
 * 
 */
export type ParametreEcoleModel = runtime.Types.Result.DefaultSelection<Prisma.$ParametreEcolePayload>

export type AggregateParametreEcole = {
  _count: ParametreEcoleCountAggregateOutputType | null
  _min: ParametreEcoleMinAggregateOutputType | null
  _max: ParametreEcoleMaxAggregateOutputType | null
}

export type ParametreEcoleMinAggregateOutputType = {
  id: string | null
  cle: string | null
  valeur: string | null
  type: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ParametreEcoleMaxAggregateOutputType = {
  id: string | null
  cle: string | null
  valeur: string | null
  type: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ParametreEcoleCountAggregateOutputType = {
  id: number
  cle: number
  valeur: number
  type: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ParametreEcoleMinAggregateInputType = {
  id?: true
  cle?: true
  valeur?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ParametreEcoleMaxAggregateInputType = {
  id?: true
  cle?: true
  valeur?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ParametreEcoleCountAggregateInputType = {
  id?: true
  cle?: true
  valeur?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ParametreEcoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParametreEcole to aggregate.
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParametreEcoles to fetch.
   */
  orderBy?: Prisma.ParametreEcoleOrderByWithRelationInput | Prisma.ParametreEcoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ParametreEcoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParametreEcoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParametreEcoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ParametreEcoles
  **/
  _count?: true | ParametreEcoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ParametreEcoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ParametreEcoleMaxAggregateInputType
}

export type GetParametreEcoleAggregateType<T extends ParametreEcoleAggregateArgs> = {
      [P in keyof T & keyof AggregateParametreEcole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateParametreEcole[P]>
    : Prisma.GetScalarType<T[P], AggregateParametreEcole[P]>
}




export type ParametreEcoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ParametreEcoleWhereInput
  orderBy?: Prisma.ParametreEcoleOrderByWithAggregationInput | Prisma.ParametreEcoleOrderByWithAggregationInput[]
  by: Prisma.ParametreEcoleScalarFieldEnum[] | Prisma.ParametreEcoleScalarFieldEnum
  having?: Prisma.ParametreEcoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ParametreEcoleCountAggregateInputType | true
  _min?: ParametreEcoleMinAggregateInputType
  _max?: ParametreEcoleMaxAggregateInputType
}

export type ParametreEcoleGroupByOutputType = {
  id: string
  cle: string
  valeur: string
  type: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: ParametreEcoleCountAggregateOutputType | null
  _min: ParametreEcoleMinAggregateOutputType | null
  _max: ParametreEcoleMaxAggregateOutputType | null
}

type GetParametreEcoleGroupByPayload<T extends ParametreEcoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ParametreEcoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ParametreEcoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ParametreEcoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ParametreEcoleGroupByOutputType[P]>
      }
    >
  > 



export type ParametreEcoleWhereInput = {
  AND?: Prisma.ParametreEcoleWhereInput | Prisma.ParametreEcoleWhereInput[]
  OR?: Prisma.ParametreEcoleWhereInput[]
  NOT?: Prisma.ParametreEcoleWhereInput | Prisma.ParametreEcoleWhereInput[]
  id?: Prisma.StringFilter<"ParametreEcole"> | string
  cle?: Prisma.StringFilter<"ParametreEcole"> | string
  valeur?: Prisma.StringFilter<"ParametreEcole"> | string
  type?: Prisma.StringFilter<"ParametreEcole"> | string
  description?: Prisma.StringNullableFilter<"ParametreEcole"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ParametreEcole"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ParametreEcole"> | Date | string
}

export type ParametreEcoleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cle?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ParametreEcoleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  cle?: string
  AND?: Prisma.ParametreEcoleWhereInput | Prisma.ParametreEcoleWhereInput[]
  OR?: Prisma.ParametreEcoleWhereInput[]
  NOT?: Prisma.ParametreEcoleWhereInput | Prisma.ParametreEcoleWhereInput[]
  valeur?: Prisma.StringFilter<"ParametreEcole"> | string
  type?: Prisma.StringFilter<"ParametreEcole"> | string
  description?: Prisma.StringNullableFilter<"ParametreEcole"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ParametreEcole"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ParametreEcole"> | Date | string
}, "id" | "cle">

export type ParametreEcoleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cle?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ParametreEcoleCountOrderByAggregateInput
  _max?: Prisma.ParametreEcoleMaxOrderByAggregateInput
  _min?: Prisma.ParametreEcoleMinOrderByAggregateInput
}

export type ParametreEcoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ParametreEcoleScalarWhereWithAggregatesInput | Prisma.ParametreEcoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ParametreEcoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ParametreEcoleScalarWhereWithAggregatesInput | Prisma.ParametreEcoleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ParametreEcole"> | string
  cle?: Prisma.StringWithAggregatesFilter<"ParametreEcole"> | string
  valeur?: Prisma.StringWithAggregatesFilter<"ParametreEcole"> | string
  type?: Prisma.StringWithAggregatesFilter<"ParametreEcole"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"ParametreEcole"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ParametreEcole"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ParametreEcole"> | Date | string
}

export type ParametreEcoleCreateInput = {
  id?: string
  cle: string
  valeur: string
  type: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ParametreEcoleUncheckedCreateInput = {
  id?: string
  cle: string
  valeur: string
  type: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ParametreEcoleUpdateInput = {
  cle?: Prisma.StringFieldUpdateOperationsInput | string
  valeur?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParametreEcoleUncheckedUpdateInput = {
  cle?: Prisma.StringFieldUpdateOperationsInput | string
  valeur?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParametreEcoleCreateManyInput = {
  id?: string
  cle: string
  valeur: string
  type: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ParametreEcoleUpdateManyMutationInput = {
  cle?: Prisma.StringFieldUpdateOperationsInput | string
  valeur?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParametreEcoleUncheckedUpdateManyInput = {
  cle?: Prisma.StringFieldUpdateOperationsInput | string
  valeur?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ParametreEcoleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cle?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ParametreEcoleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cle?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ParametreEcoleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cle?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type ParametreEcoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cle?: boolean
  valeur?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["parametreEcole"]>



export type ParametreEcoleSelectScalar = {
  id?: boolean
  cle?: boolean
  valeur?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ParametreEcoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cle" | "valeur" | "type" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["parametreEcole"]>

export type $ParametreEcolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ParametreEcole"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    cle: string
    valeur: string
    type: string
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["parametreEcole"]>
  composites: {}
}

export type ParametreEcoleGetPayload<S extends boolean | null | undefined | ParametreEcoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload, S>

export type ParametreEcoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ParametreEcoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ParametreEcoleCountAggregateInputType | true
  }

export interface ParametreEcoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParametreEcole'], meta: { name: 'ParametreEcole' } }
  /**
   * Find zero or one ParametreEcole that matches the filter.
   * @param {ParametreEcoleFindUniqueArgs} args - Arguments to find a ParametreEcole
   * @example
   * // Get one ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ParametreEcoleFindUniqueArgs>(args: Prisma.SelectSubset<T, ParametreEcoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ParametreEcole that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ParametreEcoleFindUniqueOrThrowArgs} args - Arguments to find a ParametreEcole
   * @example
   * // Get one ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ParametreEcoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ParametreEcoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParametreEcole that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleFindFirstArgs} args - Arguments to find a ParametreEcole
   * @example
   * // Get one ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ParametreEcoleFindFirstArgs>(args?: Prisma.SelectSubset<T, ParametreEcoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ParametreEcole that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleFindFirstOrThrowArgs} args - Arguments to find a ParametreEcole
   * @example
   * // Get one ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ParametreEcoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ParametreEcoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ParametreEcoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ParametreEcoles
   * const parametreEcoles = await prisma.parametreEcole.findMany()
   * 
   * // Get first 10 ParametreEcoles
   * const parametreEcoles = await prisma.parametreEcole.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const parametreEcoleWithIdOnly = await prisma.parametreEcole.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ParametreEcoleFindManyArgs>(args?: Prisma.SelectSubset<T, ParametreEcoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ParametreEcole.
   * @param {ParametreEcoleCreateArgs} args - Arguments to create a ParametreEcole.
   * @example
   * // Create one ParametreEcole
   * const ParametreEcole = await prisma.parametreEcole.create({
   *   data: {
   *     // ... data to create a ParametreEcole
   *   }
   * })
   * 
   */
  create<T extends ParametreEcoleCreateArgs>(args: Prisma.SelectSubset<T, ParametreEcoleCreateArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ParametreEcoles.
   * @param {ParametreEcoleCreateManyArgs} args - Arguments to create many ParametreEcoles.
   * @example
   * // Create many ParametreEcoles
   * const parametreEcole = await prisma.parametreEcole.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ParametreEcoleCreateManyArgs>(args?: Prisma.SelectSubset<T, ParametreEcoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ParametreEcole.
   * @param {ParametreEcoleDeleteArgs} args - Arguments to delete one ParametreEcole.
   * @example
   * // Delete one ParametreEcole
   * const ParametreEcole = await prisma.parametreEcole.delete({
   *   where: {
   *     // ... filter to delete one ParametreEcole
   *   }
   * })
   * 
   */
  delete<T extends ParametreEcoleDeleteArgs>(args: Prisma.SelectSubset<T, ParametreEcoleDeleteArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ParametreEcole.
   * @param {ParametreEcoleUpdateArgs} args - Arguments to update one ParametreEcole.
   * @example
   * // Update one ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ParametreEcoleUpdateArgs>(args: Prisma.SelectSubset<T, ParametreEcoleUpdateArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ParametreEcoles.
   * @param {ParametreEcoleDeleteManyArgs} args - Arguments to filter ParametreEcoles to delete.
   * @example
   * // Delete a few ParametreEcoles
   * const { count } = await prisma.parametreEcole.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ParametreEcoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ParametreEcoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ParametreEcoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ParametreEcoles
   * const parametreEcole = await prisma.parametreEcole.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ParametreEcoleUpdateManyArgs>(args: Prisma.SelectSubset<T, ParametreEcoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ParametreEcole.
   * @param {ParametreEcoleUpsertArgs} args - Arguments to update or create a ParametreEcole.
   * @example
   * // Update or create a ParametreEcole
   * const parametreEcole = await prisma.parametreEcole.upsert({
   *   create: {
   *     // ... data to create a ParametreEcole
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ParametreEcole we want to update
   *   }
   * })
   */
  upsert<T extends ParametreEcoleUpsertArgs>(args: Prisma.SelectSubset<T, ParametreEcoleUpsertArgs<ExtArgs>>): Prisma.Prisma__ParametreEcoleClient<runtime.Types.Result.GetResult<Prisma.$ParametreEcolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ParametreEcoles that matches the filter.
   * @param {ParametreEcoleFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const parametreEcole = await prisma.parametreEcole.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.ParametreEcoleFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a ParametreEcole.
   * @param {ParametreEcoleAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const parametreEcole = await prisma.parametreEcole.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.ParametreEcoleAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of ParametreEcoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleCountArgs} args - Arguments to filter ParametreEcoles to count.
   * @example
   * // Count the number of ParametreEcoles
   * const count = await prisma.parametreEcole.count({
   *   where: {
   *     // ... the filter for the ParametreEcoles we want to count
   *   }
   * })
  **/
  count<T extends ParametreEcoleCountArgs>(
    args?: Prisma.Subset<T, ParametreEcoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ParametreEcoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ParametreEcole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ParametreEcoleAggregateArgs>(args: Prisma.Subset<T, ParametreEcoleAggregateArgs>): Prisma.PrismaPromise<GetParametreEcoleAggregateType<T>>

  /**
   * Group by ParametreEcole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ParametreEcoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ParametreEcoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ParametreEcoleGroupByArgs['orderBy'] }
      : { orderBy?: ParametreEcoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ParametreEcoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParametreEcoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ParametreEcole model
 */
readonly fields: ParametreEcoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ParametreEcole.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ParametreEcoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ParametreEcole model
 */
export interface ParametreEcoleFieldRefs {
  readonly id: Prisma.FieldRef<"ParametreEcole", 'String'>
  readonly cle: Prisma.FieldRef<"ParametreEcole", 'String'>
  readonly valeur: Prisma.FieldRef<"ParametreEcole", 'String'>
  readonly type: Prisma.FieldRef<"ParametreEcole", 'String'>
  readonly description: Prisma.FieldRef<"ParametreEcole", 'String'>
  readonly createdAt: Prisma.FieldRef<"ParametreEcole", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ParametreEcole", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ParametreEcole findUnique
 */
export type ParametreEcoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter, which ParametreEcole to fetch.
   */
  where: Prisma.ParametreEcoleWhereUniqueInput
}

/**
 * ParametreEcole findUniqueOrThrow
 */
export type ParametreEcoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter, which ParametreEcole to fetch.
   */
  where: Prisma.ParametreEcoleWhereUniqueInput
}

/**
 * ParametreEcole findFirst
 */
export type ParametreEcoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter, which ParametreEcole to fetch.
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParametreEcoles to fetch.
   */
  orderBy?: Prisma.ParametreEcoleOrderByWithRelationInput | Prisma.ParametreEcoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParametreEcoles.
   */
  cursor?: Prisma.ParametreEcoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParametreEcoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParametreEcoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParametreEcoles.
   */
  distinct?: Prisma.ParametreEcoleScalarFieldEnum | Prisma.ParametreEcoleScalarFieldEnum[]
}

/**
 * ParametreEcole findFirstOrThrow
 */
export type ParametreEcoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter, which ParametreEcole to fetch.
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParametreEcoles to fetch.
   */
  orderBy?: Prisma.ParametreEcoleOrderByWithRelationInput | Prisma.ParametreEcoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ParametreEcoles.
   */
  cursor?: Prisma.ParametreEcoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParametreEcoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParametreEcoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ParametreEcoles.
   */
  distinct?: Prisma.ParametreEcoleScalarFieldEnum | Prisma.ParametreEcoleScalarFieldEnum[]
}

/**
 * ParametreEcole findMany
 */
export type ParametreEcoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter, which ParametreEcoles to fetch.
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ParametreEcoles to fetch.
   */
  orderBy?: Prisma.ParametreEcoleOrderByWithRelationInput | Prisma.ParametreEcoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ParametreEcoles.
   */
  cursor?: Prisma.ParametreEcoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ParametreEcoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ParametreEcoles.
   */
  skip?: number
  distinct?: Prisma.ParametreEcoleScalarFieldEnum | Prisma.ParametreEcoleScalarFieldEnum[]
}

/**
 * ParametreEcole create
 */
export type ParametreEcoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * The data needed to create a ParametreEcole.
   */
  data: Prisma.XOR<Prisma.ParametreEcoleCreateInput, Prisma.ParametreEcoleUncheckedCreateInput>
}

/**
 * ParametreEcole createMany
 */
export type ParametreEcoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ParametreEcoles.
   */
  data: Prisma.ParametreEcoleCreateManyInput | Prisma.ParametreEcoleCreateManyInput[]
}

/**
 * ParametreEcole update
 */
export type ParametreEcoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * The data needed to update a ParametreEcole.
   */
  data: Prisma.XOR<Prisma.ParametreEcoleUpdateInput, Prisma.ParametreEcoleUncheckedUpdateInput>
  /**
   * Choose, which ParametreEcole to update.
   */
  where: Prisma.ParametreEcoleWhereUniqueInput
}

/**
 * ParametreEcole updateMany
 */
export type ParametreEcoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ParametreEcoles.
   */
  data: Prisma.XOR<Prisma.ParametreEcoleUpdateManyMutationInput, Prisma.ParametreEcoleUncheckedUpdateManyInput>
  /**
   * Filter which ParametreEcoles to update
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * Limit how many ParametreEcoles to update.
   */
  limit?: number
}

/**
 * ParametreEcole upsert
 */
export type ParametreEcoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * The filter to search for the ParametreEcole to update in case it exists.
   */
  where: Prisma.ParametreEcoleWhereUniqueInput
  /**
   * In case the ParametreEcole found by the `where` argument doesn't exist, create a new ParametreEcole with this data.
   */
  create: Prisma.XOR<Prisma.ParametreEcoleCreateInput, Prisma.ParametreEcoleUncheckedCreateInput>
  /**
   * In case the ParametreEcole was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ParametreEcoleUpdateInput, Prisma.ParametreEcoleUncheckedUpdateInput>
}

/**
 * ParametreEcole delete
 */
export type ParametreEcoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
  /**
   * Filter which ParametreEcole to delete.
   */
  where: Prisma.ParametreEcoleWhereUniqueInput
}

/**
 * ParametreEcole deleteMany
 */
export type ParametreEcoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ParametreEcoles to delete
   */
  where?: Prisma.ParametreEcoleWhereInput
  /**
   * Limit how many ParametreEcoles to delete.
   */
  limit?: number
}

/**
 * ParametreEcole findRaw
 */
export type ParametreEcoleFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ParametreEcole aggregateRaw
 */
export type ParametreEcoleAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * ParametreEcole without action
 */
export type ParametreEcoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ParametreEcole
   */
  select?: Prisma.ParametreEcoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ParametreEcole
   */
  omit?: Prisma.ParametreEcoleOmit<ExtArgs> | null
}
