
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Presence` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Presence
 * 
 */
export type PresenceModel = runtime.Types.Result.DefaultSelection<Prisma.$PresencePayload>

export type AggregatePresence = {
  _count: PresenceCountAggregateOutputType | null
  _min: PresenceMinAggregateOutputType | null
  _max: PresenceMaxAggregateOutputType | null
}

export type PresenceMinAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  date: Date | null
  status: string | null
}

export type PresenceMaxAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  date: Date | null
  status: string | null
}

export type PresenceCountAggregateOutputType = {
  id: number
  enseignantId: number
  date: number
  status: number
  _all: number
}


export type PresenceMinAggregateInputType = {
  id?: true
  enseignantId?: true
  date?: true
  status?: true
}

export type PresenceMaxAggregateInputType = {
  id?: true
  enseignantId?: true
  date?: true
  status?: true
}

export type PresenceCountAggregateInputType = {
  id?: true
  enseignantId?: true
  date?: true
  status?: true
  _all?: true
}

export type PresenceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Presence to aggregate.
   */
  where?: Prisma.PresenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Presences to fetch.
   */
  orderBy?: Prisma.PresenceOrderByWithRelationInput | Prisma.PresenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PresenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Presences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Presences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Presences
  **/
  _count?: true | PresenceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PresenceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PresenceMaxAggregateInputType
}

export type GetPresenceAggregateType<T extends PresenceAggregateArgs> = {
      [P in keyof T & keyof AggregatePresence]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePresence[P]>
    : Prisma.GetScalarType<T[P], AggregatePresence[P]>
}




export type PresenceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PresenceWhereInput
  orderBy?: Prisma.PresenceOrderByWithAggregationInput | Prisma.PresenceOrderByWithAggregationInput[]
  by: Prisma.PresenceScalarFieldEnum[] | Prisma.PresenceScalarFieldEnum
  having?: Prisma.PresenceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PresenceCountAggregateInputType | true
  _min?: PresenceMinAggregateInputType
  _max?: PresenceMaxAggregateInputType
}

export type PresenceGroupByOutputType = {
  id: string
  enseignantId: string
  date: Date
  status: string
  _count: PresenceCountAggregateOutputType | null
  _min: PresenceMinAggregateOutputType | null
  _max: PresenceMaxAggregateOutputType | null
}

type GetPresenceGroupByPayload<T extends PresenceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PresenceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PresenceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PresenceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PresenceGroupByOutputType[P]>
      }
    >
  > 



export type PresenceWhereInput = {
  AND?: Prisma.PresenceWhereInput | Prisma.PresenceWhereInput[]
  OR?: Prisma.PresenceWhereInput[]
  NOT?: Prisma.PresenceWhereInput | Prisma.PresenceWhereInput[]
  id?: Prisma.StringFilter<"Presence"> | string
  enseignantId?: Prisma.StringFilter<"Presence"> | string
  date?: Prisma.DateTimeFilter<"Presence"> | Date | string
  status?: Prisma.StringFilter<"Presence"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
}

export type PresenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enseignant?: Prisma.EnseignantOrderByWithRelationInput
}

export type PresenceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PresenceWhereInput | Prisma.PresenceWhereInput[]
  OR?: Prisma.PresenceWhereInput[]
  NOT?: Prisma.PresenceWhereInput | Prisma.PresenceWhereInput[]
  enseignantId?: Prisma.StringFilter<"Presence"> | string
  date?: Prisma.DateTimeFilter<"Presence"> | Date | string
  status?: Prisma.StringFilter<"Presence"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
}, "id">

export type PresenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.PresenceCountOrderByAggregateInput
  _max?: Prisma.PresenceMaxOrderByAggregateInput
  _min?: Prisma.PresenceMinOrderByAggregateInput
}

export type PresenceScalarWhereWithAggregatesInput = {
  AND?: Prisma.PresenceScalarWhereWithAggregatesInput | Prisma.PresenceScalarWhereWithAggregatesInput[]
  OR?: Prisma.PresenceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PresenceScalarWhereWithAggregatesInput | Prisma.PresenceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Presence"> | string
  enseignantId?: Prisma.StringWithAggregatesFilter<"Presence"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"Presence"> | Date | string
  status?: Prisma.StringWithAggregatesFilter<"Presence"> | string
}

export type PresenceCreateInput = {
  id?: string
  date: Date | string
  status: string
  enseignant: Prisma.EnseignantCreateNestedOneWithoutPresencesInput
}

export type PresenceUncheckedCreateInput = {
  id?: string
  enseignantId: string
  date: Date | string
  status: string
}

export type PresenceUpdateInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutPresencesNestedInput
}

export type PresenceUncheckedUpdateInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PresenceCreateManyInput = {
  id?: string
  enseignantId: string
  date: Date | string
  status: string
}

export type PresenceUpdateManyMutationInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PresenceUncheckedUpdateManyInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PresenceListRelationFilter = {
  every?: Prisma.PresenceWhereInput
  some?: Prisma.PresenceWhereInput
  none?: Prisma.PresenceWhereInput
}

export type PresenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PresenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type PresenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type PresenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type PresenceCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput> | Prisma.PresenceCreateWithoutEnseignantInput[] | Prisma.PresenceUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.PresenceCreateOrConnectWithoutEnseignantInput | Prisma.PresenceCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.PresenceCreateManyEnseignantInputEnvelope
  connect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
}

export type PresenceUncheckedCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput> | Prisma.PresenceCreateWithoutEnseignantInput[] | Prisma.PresenceUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.PresenceCreateOrConnectWithoutEnseignantInput | Prisma.PresenceCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.PresenceCreateManyEnseignantInputEnvelope
  connect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
}

export type PresenceUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput> | Prisma.PresenceCreateWithoutEnseignantInput[] | Prisma.PresenceUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.PresenceCreateOrConnectWithoutEnseignantInput | Prisma.PresenceCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.PresenceUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.PresenceUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.PresenceCreateManyEnseignantInputEnvelope
  set?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  disconnect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  delete?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  connect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  update?: Prisma.PresenceUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.PresenceUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.PresenceUpdateManyWithWhereWithoutEnseignantInput | Prisma.PresenceUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.PresenceScalarWhereInput | Prisma.PresenceScalarWhereInput[]
}

export type PresenceUncheckedUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput> | Prisma.PresenceCreateWithoutEnseignantInput[] | Prisma.PresenceUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.PresenceCreateOrConnectWithoutEnseignantInput | Prisma.PresenceCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.PresenceUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.PresenceUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.PresenceCreateManyEnseignantInputEnvelope
  set?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  disconnect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  delete?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  connect?: Prisma.PresenceWhereUniqueInput | Prisma.PresenceWhereUniqueInput[]
  update?: Prisma.PresenceUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.PresenceUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.PresenceUpdateManyWithWhereWithoutEnseignantInput | Prisma.PresenceUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.PresenceScalarWhereInput | Prisma.PresenceScalarWhereInput[]
}

export type PresenceCreateWithoutEnseignantInput = {
  id?: string
  date: Date | string
  status: string
}

export type PresenceUncheckedCreateWithoutEnseignantInput = {
  id?: string
  date: Date | string
  status: string
}

export type PresenceCreateOrConnectWithoutEnseignantInput = {
  where: Prisma.PresenceWhereUniqueInput
  create: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput>
}

export type PresenceCreateManyEnseignantInputEnvelope = {
  data: Prisma.PresenceCreateManyEnseignantInput | Prisma.PresenceCreateManyEnseignantInput[]
}

export type PresenceUpsertWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.PresenceWhereUniqueInput
  update: Prisma.XOR<Prisma.PresenceUpdateWithoutEnseignantInput, Prisma.PresenceUncheckedUpdateWithoutEnseignantInput>
  create: Prisma.XOR<Prisma.PresenceCreateWithoutEnseignantInput, Prisma.PresenceUncheckedCreateWithoutEnseignantInput>
}

export type PresenceUpdateWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.PresenceWhereUniqueInput
  data: Prisma.XOR<Prisma.PresenceUpdateWithoutEnseignantInput, Prisma.PresenceUncheckedUpdateWithoutEnseignantInput>
}

export type PresenceUpdateManyWithWhereWithoutEnseignantInput = {
  where: Prisma.PresenceScalarWhereInput
  data: Prisma.XOR<Prisma.PresenceUpdateManyMutationInput, Prisma.PresenceUncheckedUpdateManyWithoutEnseignantInput>
}

export type PresenceScalarWhereInput = {
  AND?: Prisma.PresenceScalarWhereInput | Prisma.PresenceScalarWhereInput[]
  OR?: Prisma.PresenceScalarWhereInput[]
  NOT?: Prisma.PresenceScalarWhereInput | Prisma.PresenceScalarWhereInput[]
  id?: Prisma.StringFilter<"Presence"> | string
  enseignantId?: Prisma.StringFilter<"Presence"> | string
  date?: Prisma.DateTimeFilter<"Presence"> | Date | string
  status?: Prisma.StringFilter<"Presence"> | string
}

export type PresenceCreateManyEnseignantInput = {
  id?: string
  date: Date | string
  status: string
}

export type PresenceUpdateWithoutEnseignantInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PresenceUncheckedUpdateWithoutEnseignantInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PresenceUncheckedUpdateManyWithoutEnseignantInput = {
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}



export type PresenceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enseignantId?: boolean
  date?: boolean
  status?: boolean
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["presence"]>



export type PresenceSelectScalar = {
  id?: boolean
  enseignantId?: boolean
  date?: boolean
  status?: boolean
}

export type PresenceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "enseignantId" | "date" | "status", ExtArgs["result"]["presence"]>
export type PresenceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
}

export type $PresencePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Presence"
  objects: {
    enseignant: Prisma.$EnseignantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    enseignantId: string
    date: Date
    status: string
  }, ExtArgs["result"]["presence"]>
  composites: {}
}

export type PresenceGetPayload<S extends boolean | null | undefined | PresenceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PresencePayload, S>

export type PresenceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PresenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PresenceCountAggregateInputType | true
  }

export interface PresenceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presence'], meta: { name: 'Presence' } }
  /**
   * Find zero or one Presence that matches the filter.
   * @param {PresenceFindUniqueArgs} args - Arguments to find a Presence
   * @example
   * // Get one Presence
   * const presence = await prisma.presence.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PresenceFindUniqueArgs>(args: Prisma.SelectSubset<T, PresenceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Presence that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PresenceFindUniqueOrThrowArgs} args - Arguments to find a Presence
   * @example
   * // Get one Presence
   * const presence = await prisma.presence.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PresenceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PresenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Presence that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceFindFirstArgs} args - Arguments to find a Presence
   * @example
   * // Get one Presence
   * const presence = await prisma.presence.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PresenceFindFirstArgs>(args?: Prisma.SelectSubset<T, PresenceFindFirstArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Presence that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceFindFirstOrThrowArgs} args - Arguments to find a Presence
   * @example
   * // Get one Presence
   * const presence = await prisma.presence.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PresenceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PresenceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Presences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Presences
   * const presences = await prisma.presence.findMany()
   * 
   * // Get first 10 Presences
   * const presences = await prisma.presence.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const presenceWithIdOnly = await prisma.presence.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PresenceFindManyArgs>(args?: Prisma.SelectSubset<T, PresenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Presence.
   * @param {PresenceCreateArgs} args - Arguments to create a Presence.
   * @example
   * // Create one Presence
   * const Presence = await prisma.presence.create({
   *   data: {
   *     // ... data to create a Presence
   *   }
   * })
   * 
   */
  create<T extends PresenceCreateArgs>(args: Prisma.SelectSubset<T, PresenceCreateArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Presences.
   * @param {PresenceCreateManyArgs} args - Arguments to create many Presences.
   * @example
   * // Create many Presences
   * const presence = await prisma.presence.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PresenceCreateManyArgs>(args?: Prisma.SelectSubset<T, PresenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Presence.
   * @param {PresenceDeleteArgs} args - Arguments to delete one Presence.
   * @example
   * // Delete one Presence
   * const Presence = await prisma.presence.delete({
   *   where: {
   *     // ... filter to delete one Presence
   *   }
   * })
   * 
   */
  delete<T extends PresenceDeleteArgs>(args: Prisma.SelectSubset<T, PresenceDeleteArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Presence.
   * @param {PresenceUpdateArgs} args - Arguments to update one Presence.
   * @example
   * // Update one Presence
   * const presence = await prisma.presence.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PresenceUpdateArgs>(args: Prisma.SelectSubset<T, PresenceUpdateArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Presences.
   * @param {PresenceDeleteManyArgs} args - Arguments to filter Presences to delete.
   * @example
   * // Delete a few Presences
   * const { count } = await prisma.presence.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PresenceDeleteManyArgs>(args?: Prisma.SelectSubset<T, PresenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Presences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Presences
   * const presence = await prisma.presence.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PresenceUpdateManyArgs>(args: Prisma.SelectSubset<T, PresenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Presence.
   * @param {PresenceUpsertArgs} args - Arguments to update or create a Presence.
   * @example
   * // Update or create a Presence
   * const presence = await prisma.presence.upsert({
   *   create: {
   *     // ... data to create a Presence
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Presence we want to update
   *   }
   * })
   */
  upsert<T extends PresenceUpsertArgs>(args: Prisma.SelectSubset<T, PresenceUpsertArgs<ExtArgs>>): Prisma.Prisma__PresenceClient<runtime.Types.Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Presences that matches the filter.
   * @param {PresenceFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const presence = await prisma.presence.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.PresenceFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Presence.
   * @param {PresenceAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const presence = await prisma.presence.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.PresenceAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Presences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceCountArgs} args - Arguments to filter Presences to count.
   * @example
   * // Count the number of Presences
   * const count = await prisma.presence.count({
   *   where: {
   *     // ... the filter for the Presences we want to count
   *   }
   * })
  **/
  count<T extends PresenceCountArgs>(
    args?: Prisma.Subset<T, PresenceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PresenceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Presence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PresenceAggregateArgs>(args: Prisma.Subset<T, PresenceAggregateArgs>): Prisma.PrismaPromise<GetPresenceAggregateType<T>>

  /**
   * Group by Presence.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PresenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PresenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PresenceGroupByArgs['orderBy'] }
      : { orderBy?: PresenceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Presence model
 */
readonly fields: PresenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Presence.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PresenceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  enseignant<T extends Prisma.EnseignantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EnseignantDefaultArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Presence model
 */
export interface PresenceFieldRefs {
  readonly id: Prisma.FieldRef<"Presence", 'String'>
  readonly enseignantId: Prisma.FieldRef<"Presence", 'String'>
  readonly date: Prisma.FieldRef<"Presence", 'DateTime'>
  readonly status: Prisma.FieldRef<"Presence", 'String'>
}
    

// Custom InputTypes
/**
 * Presence findUnique
 */
export type PresenceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter, which Presence to fetch.
   */
  where: Prisma.PresenceWhereUniqueInput
}

/**
 * Presence findUniqueOrThrow
 */
export type PresenceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter, which Presence to fetch.
   */
  where: Prisma.PresenceWhereUniqueInput
}

/**
 * Presence findFirst
 */
export type PresenceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter, which Presence to fetch.
   */
  where?: Prisma.PresenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Presences to fetch.
   */
  orderBy?: Prisma.PresenceOrderByWithRelationInput | Prisma.PresenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Presences.
   */
  cursor?: Prisma.PresenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Presences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Presences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Presences.
   */
  distinct?: Prisma.PresenceScalarFieldEnum | Prisma.PresenceScalarFieldEnum[]
}

/**
 * Presence findFirstOrThrow
 */
export type PresenceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter, which Presence to fetch.
   */
  where?: Prisma.PresenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Presences to fetch.
   */
  orderBy?: Prisma.PresenceOrderByWithRelationInput | Prisma.PresenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Presences.
   */
  cursor?: Prisma.PresenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Presences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Presences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Presences.
   */
  distinct?: Prisma.PresenceScalarFieldEnum | Prisma.PresenceScalarFieldEnum[]
}

/**
 * Presence findMany
 */
export type PresenceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter, which Presences to fetch.
   */
  where?: Prisma.PresenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Presences to fetch.
   */
  orderBy?: Prisma.PresenceOrderByWithRelationInput | Prisma.PresenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Presences.
   */
  cursor?: Prisma.PresenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Presences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Presences.
   */
  skip?: number
  distinct?: Prisma.PresenceScalarFieldEnum | Prisma.PresenceScalarFieldEnum[]
}

/**
 * Presence create
 */
export type PresenceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * The data needed to create a Presence.
   */
  data: Prisma.XOR<Prisma.PresenceCreateInput, Prisma.PresenceUncheckedCreateInput>
}

/**
 * Presence createMany
 */
export type PresenceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Presences.
   */
  data: Prisma.PresenceCreateManyInput | Prisma.PresenceCreateManyInput[]
}

/**
 * Presence update
 */
export type PresenceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * The data needed to update a Presence.
   */
  data: Prisma.XOR<Prisma.PresenceUpdateInput, Prisma.PresenceUncheckedUpdateInput>
  /**
   * Choose, which Presence to update.
   */
  where: Prisma.PresenceWhereUniqueInput
}

/**
 * Presence updateMany
 */
export type PresenceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Presences.
   */
  data: Prisma.XOR<Prisma.PresenceUpdateManyMutationInput, Prisma.PresenceUncheckedUpdateManyInput>
  /**
   * Filter which Presences to update
   */
  where?: Prisma.PresenceWhereInput
  /**
   * Limit how many Presences to update.
   */
  limit?: number
}

/**
 * Presence upsert
 */
export type PresenceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * The filter to search for the Presence to update in case it exists.
   */
  where: Prisma.PresenceWhereUniqueInput
  /**
   * In case the Presence found by the `where` argument doesn't exist, create a new Presence with this data.
   */
  create: Prisma.XOR<Prisma.PresenceCreateInput, Prisma.PresenceUncheckedCreateInput>
  /**
   * In case the Presence was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PresenceUpdateInput, Prisma.PresenceUncheckedUpdateInput>
}

/**
 * Presence delete
 */
export type PresenceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
  /**
   * Filter which Presence to delete.
   */
  where: Prisma.PresenceWhereUniqueInput
}

/**
 * Presence deleteMany
 */
export type PresenceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Presences to delete
   */
  where?: Prisma.PresenceWhereInput
  /**
   * Limit how many Presences to delete.
   */
  limit?: number
}

/**
 * Presence findRaw
 */
export type PresenceFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Presence aggregateRaw
 */
export type PresenceAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Presence without action
 */
export type PresenceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Presence
   */
  select?: Prisma.PresenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Presence
   */
  omit?: Prisma.PresenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PresenceInclude<ExtArgs> | null
}
