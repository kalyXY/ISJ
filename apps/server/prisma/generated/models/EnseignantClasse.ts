
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EnseignantClasse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EnseignantClasse
 * 
 */
export type EnseignantClasseModel = runtime.Types.Result.DefaultSelection<Prisma.$EnseignantClassePayload>

export type AggregateEnseignantClasse = {
  _count: EnseignantClasseCountAggregateOutputType | null
  _min: EnseignantClasseMinAggregateOutputType | null
  _max: EnseignantClasseMaxAggregateOutputType | null
}

export type EnseignantClasseMinAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  classeId: string | null
}

export type EnseignantClasseMaxAggregateOutputType = {
  id: string | null
  enseignantId: string | null
  classeId: string | null
}

export type EnseignantClasseCountAggregateOutputType = {
  id: number
  enseignantId: number
  classeId: number
  _all: number
}


export type EnseignantClasseMinAggregateInputType = {
  id?: true
  enseignantId?: true
  classeId?: true
}

export type EnseignantClasseMaxAggregateInputType = {
  id?: true
  enseignantId?: true
  classeId?: true
}

export type EnseignantClasseCountAggregateInputType = {
  id?: true
  enseignantId?: true
  classeId?: true
  _all?: true
}

export type EnseignantClasseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnseignantClasse to aggregate.
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantClasses to fetch.
   */
  orderBy?: Prisma.EnseignantClasseOrderByWithRelationInput | Prisma.EnseignantClasseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EnseignantClasseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantClasses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantClasses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EnseignantClasses
  **/
  _count?: true | EnseignantClasseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EnseignantClasseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EnseignantClasseMaxAggregateInputType
}

export type GetEnseignantClasseAggregateType<T extends EnseignantClasseAggregateArgs> = {
      [P in keyof T & keyof AggregateEnseignantClasse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEnseignantClasse[P]>
    : Prisma.GetScalarType<T[P], AggregateEnseignantClasse[P]>
}




export type EnseignantClasseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnseignantClasseWhereInput
  orderBy?: Prisma.EnseignantClasseOrderByWithAggregationInput | Prisma.EnseignantClasseOrderByWithAggregationInput[]
  by: Prisma.EnseignantClasseScalarFieldEnum[] | Prisma.EnseignantClasseScalarFieldEnum
  having?: Prisma.EnseignantClasseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EnseignantClasseCountAggregateInputType | true
  _min?: EnseignantClasseMinAggregateInputType
  _max?: EnseignantClasseMaxAggregateInputType
}

export type EnseignantClasseGroupByOutputType = {
  id: string
  enseignantId: string
  classeId: string
  _count: EnseignantClasseCountAggregateOutputType | null
  _min: EnseignantClasseMinAggregateOutputType | null
  _max: EnseignantClasseMaxAggregateOutputType | null
}

type GetEnseignantClasseGroupByPayload<T extends EnseignantClasseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EnseignantClasseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EnseignantClasseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EnseignantClasseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EnseignantClasseGroupByOutputType[P]>
      }
    >
  > 



export type EnseignantClasseWhereInput = {
  AND?: Prisma.EnseignantClasseWhereInput | Prisma.EnseignantClasseWhereInput[]
  OR?: Prisma.EnseignantClasseWhereInput[]
  NOT?: Prisma.EnseignantClasseWhereInput | Prisma.EnseignantClasseWhereInput[]
  id?: Prisma.StringFilter<"EnseignantClasse"> | string
  enseignantId?: Prisma.StringFilter<"EnseignantClasse"> | string
  classeId?: Prisma.StringFilter<"EnseignantClasse"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  classe?: Prisma.XOR<Prisma.ClasseScalarRelationFilter, Prisma.ClasseWhereInput>
}

export type EnseignantClasseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  enseignant?: Prisma.EnseignantOrderByWithRelationInput
  classe?: Prisma.ClasseOrderByWithRelationInput
}

export type EnseignantClasseWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EnseignantClasseWhereInput | Prisma.EnseignantClasseWhereInput[]
  OR?: Prisma.EnseignantClasseWhereInput[]
  NOT?: Prisma.EnseignantClasseWhereInput | Prisma.EnseignantClasseWhereInput[]
  enseignantId?: Prisma.StringFilter<"EnseignantClasse"> | string
  classeId?: Prisma.StringFilter<"EnseignantClasse"> | string
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  classe?: Prisma.XOR<Prisma.ClasseScalarRelationFilter, Prisma.ClasseWhereInput>
}, "id">

export type EnseignantClasseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
  _count?: Prisma.EnseignantClasseCountOrderByAggregateInput
  _max?: Prisma.EnseignantClasseMaxOrderByAggregateInput
  _min?: Prisma.EnseignantClasseMinOrderByAggregateInput
}

export type EnseignantClasseScalarWhereWithAggregatesInput = {
  AND?: Prisma.EnseignantClasseScalarWhereWithAggregatesInput | Prisma.EnseignantClasseScalarWhereWithAggregatesInput[]
  OR?: Prisma.EnseignantClasseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EnseignantClasseScalarWhereWithAggregatesInput | Prisma.EnseignantClasseScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EnseignantClasse"> | string
  enseignantId?: Prisma.StringWithAggregatesFilter<"EnseignantClasse"> | string
  classeId?: Prisma.StringWithAggregatesFilter<"EnseignantClasse"> | string
}

export type EnseignantClasseCreateInput = {
  id?: string
  enseignant: Prisma.EnseignantCreateNestedOneWithoutEnseignantClassesInput
  classe: Prisma.ClasseCreateNestedOneWithoutEnseignantClassesInput
}

export type EnseignantClasseUncheckedCreateInput = {
  id?: string
  enseignantId: string
  classeId: string
}

export type EnseignantClasseUpdateInput = {
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutEnseignantClassesNestedInput
  classe?: Prisma.ClasseUpdateOneRequiredWithoutEnseignantClassesNestedInput
}

export type EnseignantClasseUncheckedUpdateInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantClasseCreateManyInput = {
  id?: string
  enseignantId: string
  classeId: string
}

export type EnseignantClasseUpdateManyMutationInput = {

}

export type EnseignantClasseUncheckedUpdateManyInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantClasseListRelationFilter = {
  every?: Prisma.EnseignantClasseWhereInput
  some?: Prisma.EnseignantClasseWhereInput
  none?: Prisma.EnseignantClasseWhereInput
}

export type EnseignantClasseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnseignantClasseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
}

export type EnseignantClasseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
}

export type EnseignantClasseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  classeId?: Prisma.SortOrder
}

export type EnseignantClasseCreateNestedManyWithoutClasseInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput> | Prisma.EnseignantClasseCreateWithoutClasseInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput | Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput[]
  createMany?: Prisma.EnseignantClasseCreateManyClasseInputEnvelope
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
}

export type EnseignantClasseUncheckedCreateNestedManyWithoutClasseInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput> | Prisma.EnseignantClasseCreateWithoutClasseInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput | Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput[]
  createMany?: Prisma.EnseignantClasseCreateManyClasseInputEnvelope
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
}

export type EnseignantClasseUpdateManyWithoutClasseNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput> | Prisma.EnseignantClasseCreateWithoutClasseInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput | Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput[]
  upsert?: Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutClasseInput | Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutClasseInput[]
  createMany?: Prisma.EnseignantClasseCreateManyClasseInputEnvelope
  set?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  disconnect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  delete?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  update?: Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutClasseInput | Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutClasseInput[]
  updateMany?: Prisma.EnseignantClasseUpdateManyWithWhereWithoutClasseInput | Prisma.EnseignantClasseUpdateManyWithWhereWithoutClasseInput[]
  deleteMany?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
}

export type EnseignantClasseUncheckedUpdateManyWithoutClasseNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput> | Prisma.EnseignantClasseCreateWithoutClasseInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput | Prisma.EnseignantClasseCreateOrConnectWithoutClasseInput[]
  upsert?: Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutClasseInput | Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutClasseInput[]
  createMany?: Prisma.EnseignantClasseCreateManyClasseInputEnvelope
  set?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  disconnect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  delete?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  update?: Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutClasseInput | Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutClasseInput[]
  updateMany?: Prisma.EnseignantClasseUpdateManyWithWhereWithoutClasseInput | Prisma.EnseignantClasseUpdateManyWithWhereWithoutClasseInput[]
  deleteMany?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
}

export type EnseignantClasseCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantClasseCreateWithoutEnseignantInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantClasseCreateManyEnseignantInputEnvelope
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
}

export type EnseignantClasseUncheckedCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantClasseCreateWithoutEnseignantInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantClasseCreateManyEnseignantInputEnvelope
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
}

export type EnseignantClasseUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantClasseCreateWithoutEnseignantInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantClasseCreateManyEnseignantInputEnvelope
  set?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  disconnect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  delete?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  update?: Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.EnseignantClasseUpdateManyWithWhereWithoutEnseignantInput | Prisma.EnseignantClasseUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
}

export type EnseignantClasseUncheckedUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput> | Prisma.EnseignantClasseCreateWithoutEnseignantInput[] | Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput | Prisma.EnseignantClasseCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantClasseUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.EnseignantClasseCreateManyEnseignantInputEnvelope
  set?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  disconnect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  delete?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  connect?: Prisma.EnseignantClasseWhereUniqueInput | Prisma.EnseignantClasseWhereUniqueInput[]
  update?: Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.EnseignantClasseUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.EnseignantClasseUpdateManyWithWhereWithoutEnseignantInput | Prisma.EnseignantClasseUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
}

export type EnseignantClasseCreateWithoutClasseInput = {
  id?: string
  enseignant: Prisma.EnseignantCreateNestedOneWithoutEnseignantClassesInput
}

export type EnseignantClasseUncheckedCreateWithoutClasseInput = {
  id?: string
  enseignantId: string
}

export type EnseignantClasseCreateOrConnectWithoutClasseInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput>
}

export type EnseignantClasseCreateManyClasseInputEnvelope = {
  data: Prisma.EnseignantClasseCreateManyClasseInput | Prisma.EnseignantClasseCreateManyClasseInput[]
}

export type EnseignantClasseUpsertWithWhereUniqueWithoutClasseInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  update: Prisma.XOR<Prisma.EnseignantClasseUpdateWithoutClasseInput, Prisma.EnseignantClasseUncheckedUpdateWithoutClasseInput>
  create: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutClasseInput, Prisma.EnseignantClasseUncheckedCreateWithoutClasseInput>
}

export type EnseignantClasseUpdateWithWhereUniqueWithoutClasseInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateWithoutClasseInput, Prisma.EnseignantClasseUncheckedUpdateWithoutClasseInput>
}

export type EnseignantClasseUpdateManyWithWhereWithoutClasseInput = {
  where: Prisma.EnseignantClasseScalarWhereInput
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateManyMutationInput, Prisma.EnseignantClasseUncheckedUpdateManyWithoutClasseInput>
}

export type EnseignantClasseScalarWhereInput = {
  AND?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
  OR?: Prisma.EnseignantClasseScalarWhereInput[]
  NOT?: Prisma.EnseignantClasseScalarWhereInput | Prisma.EnseignantClasseScalarWhereInput[]
  id?: Prisma.StringFilter<"EnseignantClasse"> | string
  enseignantId?: Prisma.StringFilter<"EnseignantClasse"> | string
  classeId?: Prisma.StringFilter<"EnseignantClasse"> | string
}

export type EnseignantClasseCreateWithoutEnseignantInput = {
  id?: string
  classe: Prisma.ClasseCreateNestedOneWithoutEnseignantClassesInput
}

export type EnseignantClasseUncheckedCreateWithoutEnseignantInput = {
  id?: string
  classeId: string
}

export type EnseignantClasseCreateOrConnectWithoutEnseignantInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  create: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput>
}

export type EnseignantClasseCreateManyEnseignantInputEnvelope = {
  data: Prisma.EnseignantClasseCreateManyEnseignantInput | Prisma.EnseignantClasseCreateManyEnseignantInput[]
}

export type EnseignantClasseUpsertWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  update: Prisma.XOR<Prisma.EnseignantClasseUpdateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedUpdateWithoutEnseignantInput>
  create: Prisma.XOR<Prisma.EnseignantClasseCreateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedCreateWithoutEnseignantInput>
}

export type EnseignantClasseUpdateWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.EnseignantClasseWhereUniqueInput
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateWithoutEnseignantInput, Prisma.EnseignantClasseUncheckedUpdateWithoutEnseignantInput>
}

export type EnseignantClasseUpdateManyWithWhereWithoutEnseignantInput = {
  where: Prisma.EnseignantClasseScalarWhereInput
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateManyMutationInput, Prisma.EnseignantClasseUncheckedUpdateManyWithoutEnseignantInput>
}

export type EnseignantClasseCreateManyClasseInput = {
  id?: string
  enseignantId: string
}

export type EnseignantClasseUpdateWithoutClasseInput = {
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutEnseignantClassesNestedInput
}

export type EnseignantClasseUncheckedUpdateWithoutClasseInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantClasseUncheckedUpdateManyWithoutClasseInput = {
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantClasseCreateManyEnseignantInput = {
  id?: string
  classeId: string
}

export type EnseignantClasseUpdateWithoutEnseignantInput = {
  classe?: Prisma.ClasseUpdateOneRequiredWithoutEnseignantClassesNestedInput
}

export type EnseignantClasseUncheckedUpdateWithoutEnseignantInput = {
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EnseignantClasseUncheckedUpdateManyWithoutEnseignantInput = {
  classeId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type EnseignantClasseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  enseignantId?: boolean
  classeId?: boolean
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  classe?: boolean | Prisma.ClasseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["enseignantClasse"]>



export type EnseignantClasseSelectScalar = {
  id?: boolean
  enseignantId?: boolean
  classeId?: boolean
}

export type EnseignantClasseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "enseignantId" | "classeId", ExtArgs["result"]["enseignantClasse"]>
export type EnseignantClasseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  classe?: boolean | Prisma.ClasseDefaultArgs<ExtArgs>
}

export type $EnseignantClassePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EnseignantClasse"
  objects: {
    enseignant: Prisma.$EnseignantPayload<ExtArgs>
    classe: Prisma.$ClassePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    enseignantId: string
    classeId: string
  }, ExtArgs["result"]["enseignantClasse"]>
  composites: {}
}

export type EnseignantClasseGetPayload<S extends boolean | null | undefined | EnseignantClasseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload, S>

export type EnseignantClasseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EnseignantClasseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EnseignantClasseCountAggregateInputType | true
  }

export interface EnseignantClasseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnseignantClasse'], meta: { name: 'EnseignantClasse' } }
  /**
   * Find zero or one EnseignantClasse that matches the filter.
   * @param {EnseignantClasseFindUniqueArgs} args - Arguments to find a EnseignantClasse
   * @example
   * // Get one EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EnseignantClasseFindUniqueArgs>(args: Prisma.SelectSubset<T, EnseignantClasseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EnseignantClasse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EnseignantClasseFindUniqueOrThrowArgs} args - Arguments to find a EnseignantClasse
   * @example
   * // Get one EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EnseignantClasseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EnseignantClasseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnseignantClasse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseFindFirstArgs} args - Arguments to find a EnseignantClasse
   * @example
   * // Get one EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EnseignantClasseFindFirstArgs>(args?: Prisma.SelectSubset<T, EnseignantClasseFindFirstArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnseignantClasse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseFindFirstOrThrowArgs} args - Arguments to find a EnseignantClasse
   * @example
   * // Get one EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EnseignantClasseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EnseignantClasseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EnseignantClasses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EnseignantClasses
   * const enseignantClasses = await prisma.enseignantClasse.findMany()
   * 
   * // Get first 10 EnseignantClasses
   * const enseignantClasses = await prisma.enseignantClasse.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const enseignantClasseWithIdOnly = await prisma.enseignantClasse.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EnseignantClasseFindManyArgs>(args?: Prisma.SelectSubset<T, EnseignantClasseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EnseignantClasse.
   * @param {EnseignantClasseCreateArgs} args - Arguments to create a EnseignantClasse.
   * @example
   * // Create one EnseignantClasse
   * const EnseignantClasse = await prisma.enseignantClasse.create({
   *   data: {
   *     // ... data to create a EnseignantClasse
   *   }
   * })
   * 
   */
  create<T extends EnseignantClasseCreateArgs>(args: Prisma.SelectSubset<T, EnseignantClasseCreateArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EnseignantClasses.
   * @param {EnseignantClasseCreateManyArgs} args - Arguments to create many EnseignantClasses.
   * @example
   * // Create many EnseignantClasses
   * const enseignantClasse = await prisma.enseignantClasse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EnseignantClasseCreateManyArgs>(args?: Prisma.SelectSubset<T, EnseignantClasseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EnseignantClasse.
   * @param {EnseignantClasseDeleteArgs} args - Arguments to delete one EnseignantClasse.
   * @example
   * // Delete one EnseignantClasse
   * const EnseignantClasse = await prisma.enseignantClasse.delete({
   *   where: {
   *     // ... filter to delete one EnseignantClasse
   *   }
   * })
   * 
   */
  delete<T extends EnseignantClasseDeleteArgs>(args: Prisma.SelectSubset<T, EnseignantClasseDeleteArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EnseignantClasse.
   * @param {EnseignantClasseUpdateArgs} args - Arguments to update one EnseignantClasse.
   * @example
   * // Update one EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EnseignantClasseUpdateArgs>(args: Prisma.SelectSubset<T, EnseignantClasseUpdateArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EnseignantClasses.
   * @param {EnseignantClasseDeleteManyArgs} args - Arguments to filter EnseignantClasses to delete.
   * @example
   * // Delete a few EnseignantClasses
   * const { count } = await prisma.enseignantClasse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EnseignantClasseDeleteManyArgs>(args?: Prisma.SelectSubset<T, EnseignantClasseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EnseignantClasses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EnseignantClasses
   * const enseignantClasse = await prisma.enseignantClasse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EnseignantClasseUpdateManyArgs>(args: Prisma.SelectSubset<T, EnseignantClasseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EnseignantClasse.
   * @param {EnseignantClasseUpsertArgs} args - Arguments to update or create a EnseignantClasse.
   * @example
   * // Update or create a EnseignantClasse
   * const enseignantClasse = await prisma.enseignantClasse.upsert({
   *   create: {
   *     // ... data to create a EnseignantClasse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EnseignantClasse we want to update
   *   }
   * })
   */
  upsert<T extends EnseignantClasseUpsertArgs>(args: Prisma.SelectSubset<T, EnseignantClasseUpsertArgs<ExtArgs>>): Prisma.Prisma__EnseignantClasseClient<runtime.Types.Result.GetResult<Prisma.$EnseignantClassePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EnseignantClasses that matches the filter.
   * @param {EnseignantClasseFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const enseignantClasse = await prisma.enseignantClasse.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.EnseignantClasseFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a EnseignantClasse.
   * @param {EnseignantClasseAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const enseignantClasse = await prisma.enseignantClasse.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.EnseignantClasseAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of EnseignantClasses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseCountArgs} args - Arguments to filter EnseignantClasses to count.
   * @example
   * // Count the number of EnseignantClasses
   * const count = await prisma.enseignantClasse.count({
   *   where: {
   *     // ... the filter for the EnseignantClasses we want to count
   *   }
   * })
  **/
  count<T extends EnseignantClasseCountArgs>(
    args?: Prisma.Subset<T, EnseignantClasseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EnseignantClasseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EnseignantClasse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EnseignantClasseAggregateArgs>(args: Prisma.Subset<T, EnseignantClasseAggregateArgs>): Prisma.PrismaPromise<GetEnseignantClasseAggregateType<T>>

  /**
   * Group by EnseignantClasse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnseignantClasseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EnseignantClasseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EnseignantClasseGroupByArgs['orderBy'] }
      : { orderBy?: EnseignantClasseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EnseignantClasseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnseignantClasseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EnseignantClasse model
 */
readonly fields: EnseignantClasseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EnseignantClasse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EnseignantClasseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  enseignant<T extends Prisma.EnseignantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EnseignantDefaultArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  classe<T extends Prisma.ClasseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClasseDefaultArgs<ExtArgs>>): Prisma.Prisma__ClasseClient<runtime.Types.Result.GetResult<Prisma.$ClassePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EnseignantClasse model
 */
export interface EnseignantClasseFieldRefs {
  readonly id: Prisma.FieldRef<"EnseignantClasse", 'String'>
  readonly enseignantId: Prisma.FieldRef<"EnseignantClasse", 'String'>
  readonly classeId: Prisma.FieldRef<"EnseignantClasse", 'String'>
}
    

// Custom InputTypes
/**
 * EnseignantClasse findUnique
 */
export type EnseignantClasseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantClasse to fetch.
   */
  where: Prisma.EnseignantClasseWhereUniqueInput
}

/**
 * EnseignantClasse findUniqueOrThrow
 */
export type EnseignantClasseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantClasse to fetch.
   */
  where: Prisma.EnseignantClasseWhereUniqueInput
}

/**
 * EnseignantClasse findFirst
 */
export type EnseignantClasseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantClasse to fetch.
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantClasses to fetch.
   */
  orderBy?: Prisma.EnseignantClasseOrderByWithRelationInput | Prisma.EnseignantClasseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnseignantClasses.
   */
  cursor?: Prisma.EnseignantClasseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantClasses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantClasses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnseignantClasses.
   */
  distinct?: Prisma.EnseignantClasseScalarFieldEnum | Prisma.EnseignantClasseScalarFieldEnum[]
}

/**
 * EnseignantClasse findFirstOrThrow
 */
export type EnseignantClasseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantClasse to fetch.
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantClasses to fetch.
   */
  orderBy?: Prisma.EnseignantClasseOrderByWithRelationInput | Prisma.EnseignantClasseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnseignantClasses.
   */
  cursor?: Prisma.EnseignantClasseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantClasses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantClasses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnseignantClasses.
   */
  distinct?: Prisma.EnseignantClasseScalarFieldEnum | Prisma.EnseignantClasseScalarFieldEnum[]
}

/**
 * EnseignantClasse findMany
 */
export type EnseignantClasseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter, which EnseignantClasses to fetch.
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnseignantClasses to fetch.
   */
  orderBy?: Prisma.EnseignantClasseOrderByWithRelationInput | Prisma.EnseignantClasseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EnseignantClasses.
   */
  cursor?: Prisma.EnseignantClasseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnseignantClasses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnseignantClasses.
   */
  skip?: number
  distinct?: Prisma.EnseignantClasseScalarFieldEnum | Prisma.EnseignantClasseScalarFieldEnum[]
}

/**
 * EnseignantClasse create
 */
export type EnseignantClasseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * The data needed to create a EnseignantClasse.
   */
  data: Prisma.XOR<Prisma.EnseignantClasseCreateInput, Prisma.EnseignantClasseUncheckedCreateInput>
}

/**
 * EnseignantClasse createMany
 */
export type EnseignantClasseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EnseignantClasses.
   */
  data: Prisma.EnseignantClasseCreateManyInput | Prisma.EnseignantClasseCreateManyInput[]
}

/**
 * EnseignantClasse update
 */
export type EnseignantClasseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * The data needed to update a EnseignantClasse.
   */
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateInput, Prisma.EnseignantClasseUncheckedUpdateInput>
  /**
   * Choose, which EnseignantClasse to update.
   */
  where: Prisma.EnseignantClasseWhereUniqueInput
}

/**
 * EnseignantClasse updateMany
 */
export type EnseignantClasseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EnseignantClasses.
   */
  data: Prisma.XOR<Prisma.EnseignantClasseUpdateManyMutationInput, Prisma.EnseignantClasseUncheckedUpdateManyInput>
  /**
   * Filter which EnseignantClasses to update
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * Limit how many EnseignantClasses to update.
   */
  limit?: number
}

/**
 * EnseignantClasse upsert
 */
export type EnseignantClasseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * The filter to search for the EnseignantClasse to update in case it exists.
   */
  where: Prisma.EnseignantClasseWhereUniqueInput
  /**
   * In case the EnseignantClasse found by the `where` argument doesn't exist, create a new EnseignantClasse with this data.
   */
  create: Prisma.XOR<Prisma.EnseignantClasseCreateInput, Prisma.EnseignantClasseUncheckedCreateInput>
  /**
   * In case the EnseignantClasse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EnseignantClasseUpdateInput, Prisma.EnseignantClasseUncheckedUpdateInput>
}

/**
 * EnseignantClasse delete
 */
export type EnseignantClasseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
  /**
   * Filter which EnseignantClasse to delete.
   */
  where: Prisma.EnseignantClasseWhereUniqueInput
}

/**
 * EnseignantClasse deleteMany
 */
export type EnseignantClasseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnseignantClasses to delete
   */
  where?: Prisma.EnseignantClasseWhereInput
  /**
   * Limit how many EnseignantClasses to delete.
   */
  limit?: number
}

/**
 * EnseignantClasse findRaw
 */
export type EnseignantClasseFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * EnseignantClasse aggregateRaw
 */
export type EnseignantClasseAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * EnseignantClasse without action
 */
export type EnseignantClasseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnseignantClasse
   */
  select?: Prisma.EnseignantClasseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnseignantClasse
   */
  omit?: Prisma.EnseignantClasseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnseignantClasseInclude<ExtArgs> | null
}
