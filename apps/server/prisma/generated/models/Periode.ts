
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Periode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Periode
 * 
 */
export type PeriodeModel = runtime.Types.Result.DefaultSelection<Prisma.$PeriodePayload>

export type AggregatePeriode = {
  _count: PeriodeCountAggregateOutputType | null
  _min: PeriodeMinAggregateOutputType | null
  _max: PeriodeMaxAggregateOutputType | null
}

export type PeriodeMinAggregateOutputType = {
  id: string | null
  nom: string | null
  type: string | null
  dateDebut: Date | null
  dateFin: Date | null
  anneeScolaireId: string | null
  isActive: boolean | null
  isValidated: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PeriodeMaxAggregateOutputType = {
  id: string | null
  nom: string | null
  type: string | null
  dateDebut: Date | null
  dateFin: Date | null
  anneeScolaireId: string | null
  isActive: boolean | null
  isValidated: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PeriodeCountAggregateOutputType = {
  id: number
  nom: number
  type: number
  dateDebut: number
  dateFin: number
  anneeScolaireId: number
  isActive: number
  isValidated: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PeriodeMinAggregateInputType = {
  id?: true
  nom?: true
  type?: true
  dateDebut?: true
  dateFin?: true
  anneeScolaireId?: true
  isActive?: true
  isValidated?: true
  createdAt?: true
  updatedAt?: true
}

export type PeriodeMaxAggregateInputType = {
  id?: true
  nom?: true
  type?: true
  dateDebut?: true
  dateFin?: true
  anneeScolaireId?: true
  isActive?: true
  isValidated?: true
  createdAt?: true
  updatedAt?: true
}

export type PeriodeCountAggregateInputType = {
  id?: true
  nom?: true
  type?: true
  dateDebut?: true
  dateFin?: true
  anneeScolaireId?: true
  isActive?: true
  isValidated?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PeriodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Periode to aggregate.
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Periodes to fetch.
   */
  orderBy?: Prisma.PeriodeOrderByWithRelationInput | Prisma.PeriodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PeriodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Periodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Periodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Periodes
  **/
  _count?: true | PeriodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PeriodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PeriodeMaxAggregateInputType
}

export type GetPeriodeAggregateType<T extends PeriodeAggregateArgs> = {
      [P in keyof T & keyof AggregatePeriode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePeriode[P]>
    : Prisma.GetScalarType<T[P], AggregatePeriode[P]>
}




export type PeriodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PeriodeWhereInput
  orderBy?: Prisma.PeriodeOrderByWithAggregationInput | Prisma.PeriodeOrderByWithAggregationInput[]
  by: Prisma.PeriodeScalarFieldEnum[] | Prisma.PeriodeScalarFieldEnum
  having?: Prisma.PeriodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PeriodeCountAggregateInputType | true
  _min?: PeriodeMinAggregateInputType
  _max?: PeriodeMaxAggregateInputType
}

export type PeriodeGroupByOutputType = {
  id: string
  nom: string
  type: string
  dateDebut: Date
  dateFin: Date
  anneeScolaireId: string
  isActive: boolean
  isValidated: boolean
  createdAt: Date
  updatedAt: Date
  _count: PeriodeCountAggregateOutputType | null
  _min: PeriodeMinAggregateOutputType | null
  _max: PeriodeMaxAggregateOutputType | null
}

type GetPeriodeGroupByPayload<T extends PeriodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PeriodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PeriodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PeriodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PeriodeGroupByOutputType[P]>
      }
    >
  > 



export type PeriodeWhereInput = {
  AND?: Prisma.PeriodeWhereInput | Prisma.PeriodeWhereInput[]
  OR?: Prisma.PeriodeWhereInput[]
  NOT?: Prisma.PeriodeWhereInput | Prisma.PeriodeWhereInput[]
  id?: Prisma.StringFilter<"Periode"> | string
  nom?: Prisma.StringFilter<"Periode"> | string
  type?: Prisma.StringFilter<"Periode"> | string
  dateDebut?: Prisma.DateTimeFilter<"Periode"> | Date | string
  dateFin?: Prisma.DateTimeFilter<"Periode"> | Date | string
  anneeScolaireId?: Prisma.StringFilter<"Periode"> | string
  isActive?: Prisma.BoolFilter<"Periode"> | boolean
  isValidated?: Prisma.BoolFilter<"Periode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
  anneeScolaire?: Prisma.XOR<Prisma.AnneeScolaireScalarRelationFilter, Prisma.AnneeScolaireWhereInput>
  notes?: Prisma.NoteListRelationFilter
  bulletins?: Prisma.BulletinListRelationFilter
}

export type PeriodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  type?: Prisma.SortOrder
  dateDebut?: Prisma.SortOrder
  dateFin?: Prisma.SortOrder
  anneeScolaireId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  anneeScolaire?: Prisma.AnneeScolaireOrderByWithRelationInput
  notes?: Prisma.NoteOrderByRelationAggregateInput
  bulletins?: Prisma.BulletinOrderByRelationAggregateInput
}

export type PeriodeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PeriodeWhereInput | Prisma.PeriodeWhereInput[]
  OR?: Prisma.PeriodeWhereInput[]
  NOT?: Prisma.PeriodeWhereInput | Prisma.PeriodeWhereInput[]
  nom?: Prisma.StringFilter<"Periode"> | string
  type?: Prisma.StringFilter<"Periode"> | string
  dateDebut?: Prisma.DateTimeFilter<"Periode"> | Date | string
  dateFin?: Prisma.DateTimeFilter<"Periode"> | Date | string
  anneeScolaireId?: Prisma.StringFilter<"Periode"> | string
  isActive?: Prisma.BoolFilter<"Periode"> | boolean
  isValidated?: Prisma.BoolFilter<"Periode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
  anneeScolaire?: Prisma.XOR<Prisma.AnneeScolaireScalarRelationFilter, Prisma.AnneeScolaireWhereInput>
  notes?: Prisma.NoteListRelationFilter
  bulletins?: Prisma.BulletinListRelationFilter
}, "id">

export type PeriodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  type?: Prisma.SortOrder
  dateDebut?: Prisma.SortOrder
  dateFin?: Prisma.SortOrder
  anneeScolaireId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PeriodeCountOrderByAggregateInput
  _max?: Prisma.PeriodeMaxOrderByAggregateInput
  _min?: Prisma.PeriodeMinOrderByAggregateInput
}

export type PeriodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.PeriodeScalarWhereWithAggregatesInput | Prisma.PeriodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.PeriodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PeriodeScalarWhereWithAggregatesInput | Prisma.PeriodeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Periode"> | string
  nom?: Prisma.StringWithAggregatesFilter<"Periode"> | string
  type?: Prisma.StringWithAggregatesFilter<"Periode"> | string
  dateDebut?: Prisma.DateTimeWithAggregatesFilter<"Periode"> | Date | string
  dateFin?: Prisma.DateTimeWithAggregatesFilter<"Periode"> | Date | string
  anneeScolaireId?: Prisma.StringWithAggregatesFilter<"Periode"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"Periode"> | boolean
  isValidated?: Prisma.BoolWithAggregatesFilter<"Periode"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Periode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Periode"> | Date | string
}

export type PeriodeCreateInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  anneeScolaire: Prisma.AnneeScolaireCreateNestedOneWithoutPeriodesInput
  notes?: Prisma.NoteCreateNestedManyWithoutPeriodeInput
  bulletins?: Prisma.BulletinCreateNestedManyWithoutPeriodeInput
}

export type PeriodeUncheckedCreateInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  anneeScolaireId: string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  notes?: Prisma.NoteUncheckedCreateNestedManyWithoutPeriodeInput
  bulletins?: Prisma.BulletinUncheckedCreateNestedManyWithoutPeriodeInput
}

export type PeriodeUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaire?: Prisma.AnneeScolaireUpdateOneRequiredWithoutPeriodesNestedInput
  notes?: Prisma.NoteUpdateManyWithoutPeriodeNestedInput
  bulletins?: Prisma.BulletinUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeUncheckedUpdateInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaireId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NoteUncheckedUpdateManyWithoutPeriodeNestedInput
  bulletins?: Prisma.BulletinUncheckedUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeCreateManyInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  anneeScolaireId: string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PeriodeUpdateManyMutationInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PeriodeUncheckedUpdateManyInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaireId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PeriodeListRelationFilter = {
  every?: Prisma.PeriodeWhereInput
  some?: Prisma.PeriodeWhereInput
  none?: Prisma.PeriodeWhereInput
}

export type PeriodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PeriodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  type?: Prisma.SortOrder
  dateDebut?: Prisma.SortOrder
  dateFin?: Prisma.SortOrder
  anneeScolaireId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PeriodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  type?: Prisma.SortOrder
  dateDebut?: Prisma.SortOrder
  dateFin?: Prisma.SortOrder
  anneeScolaireId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PeriodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nom?: Prisma.SortOrder
  type?: Prisma.SortOrder
  dateDebut?: Prisma.SortOrder
  dateFin?: Prisma.SortOrder
  anneeScolaireId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PeriodeScalarRelationFilter = {
  is?: Prisma.PeriodeWhereInput
  isNot?: Prisma.PeriodeWhereInput
}

export type PeriodeCreateNestedManyWithoutAnneeScolaireInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput> | Prisma.PeriodeCreateWithoutAnneeScolaireInput[] | Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput[]
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput | Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput[]
  createMany?: Prisma.PeriodeCreateManyAnneeScolaireInputEnvelope
  connect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
}

export type PeriodeUncheckedCreateNestedManyWithoutAnneeScolaireInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput> | Prisma.PeriodeCreateWithoutAnneeScolaireInput[] | Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput[]
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput | Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput[]
  createMany?: Prisma.PeriodeCreateManyAnneeScolaireInputEnvelope
  connect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
}

export type PeriodeUpdateManyWithoutAnneeScolaireNestedInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput> | Prisma.PeriodeCreateWithoutAnneeScolaireInput[] | Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput[]
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput | Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput[]
  upsert?: Prisma.PeriodeUpsertWithWhereUniqueWithoutAnneeScolaireInput | Prisma.PeriodeUpsertWithWhereUniqueWithoutAnneeScolaireInput[]
  createMany?: Prisma.PeriodeCreateManyAnneeScolaireInputEnvelope
  set?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  disconnect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  delete?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  connect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  update?: Prisma.PeriodeUpdateWithWhereUniqueWithoutAnneeScolaireInput | Prisma.PeriodeUpdateWithWhereUniqueWithoutAnneeScolaireInput[]
  updateMany?: Prisma.PeriodeUpdateManyWithWhereWithoutAnneeScolaireInput | Prisma.PeriodeUpdateManyWithWhereWithoutAnneeScolaireInput[]
  deleteMany?: Prisma.PeriodeScalarWhereInput | Prisma.PeriodeScalarWhereInput[]
}

export type PeriodeUncheckedUpdateManyWithoutAnneeScolaireNestedInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput> | Prisma.PeriodeCreateWithoutAnneeScolaireInput[] | Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput[]
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput | Prisma.PeriodeCreateOrConnectWithoutAnneeScolaireInput[]
  upsert?: Prisma.PeriodeUpsertWithWhereUniqueWithoutAnneeScolaireInput | Prisma.PeriodeUpsertWithWhereUniqueWithoutAnneeScolaireInput[]
  createMany?: Prisma.PeriodeCreateManyAnneeScolaireInputEnvelope
  set?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  disconnect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  delete?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  connect?: Prisma.PeriodeWhereUniqueInput | Prisma.PeriodeWhereUniqueInput[]
  update?: Prisma.PeriodeUpdateWithWhereUniqueWithoutAnneeScolaireInput | Prisma.PeriodeUpdateWithWhereUniqueWithoutAnneeScolaireInput[]
  updateMany?: Prisma.PeriodeUpdateManyWithWhereWithoutAnneeScolaireInput | Prisma.PeriodeUpdateManyWithWhereWithoutAnneeScolaireInput[]
  deleteMany?: Prisma.PeriodeScalarWhereInput | Prisma.PeriodeScalarWhereInput[]
}

export type PeriodeCreateNestedOneWithoutNotesInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutNotesInput, Prisma.PeriodeUncheckedCreateWithoutNotesInput>
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutNotesInput
  connect?: Prisma.PeriodeWhereUniqueInput
}

export type PeriodeUpdateOneRequiredWithoutNotesNestedInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutNotesInput, Prisma.PeriodeUncheckedCreateWithoutNotesInput>
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutNotesInput
  upsert?: Prisma.PeriodeUpsertWithoutNotesInput
  connect?: Prisma.PeriodeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PeriodeUpdateToOneWithWhereWithoutNotesInput, Prisma.PeriodeUpdateWithoutNotesInput>, Prisma.PeriodeUncheckedUpdateWithoutNotesInput>
}

export type PeriodeCreateNestedOneWithoutBulletinsInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutBulletinsInput, Prisma.PeriodeUncheckedCreateWithoutBulletinsInput>
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutBulletinsInput
  connect?: Prisma.PeriodeWhereUniqueInput
}

export type PeriodeUpdateOneRequiredWithoutBulletinsNestedInput = {
  create?: Prisma.XOR<Prisma.PeriodeCreateWithoutBulletinsInput, Prisma.PeriodeUncheckedCreateWithoutBulletinsInput>
  connectOrCreate?: Prisma.PeriodeCreateOrConnectWithoutBulletinsInput
  upsert?: Prisma.PeriodeUpsertWithoutBulletinsInput
  connect?: Prisma.PeriodeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PeriodeUpdateToOneWithWhereWithoutBulletinsInput, Prisma.PeriodeUpdateWithoutBulletinsInput>, Prisma.PeriodeUncheckedUpdateWithoutBulletinsInput>
}

export type PeriodeCreateWithoutAnneeScolaireInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  notes?: Prisma.NoteCreateNestedManyWithoutPeriodeInput
  bulletins?: Prisma.BulletinCreateNestedManyWithoutPeriodeInput
}

export type PeriodeUncheckedCreateWithoutAnneeScolaireInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  notes?: Prisma.NoteUncheckedCreateNestedManyWithoutPeriodeInput
  bulletins?: Prisma.BulletinUncheckedCreateNestedManyWithoutPeriodeInput
}

export type PeriodeCreateOrConnectWithoutAnneeScolaireInput = {
  where: Prisma.PeriodeWhereUniqueInput
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput>
}

export type PeriodeCreateManyAnneeScolaireInputEnvelope = {
  data: Prisma.PeriodeCreateManyAnneeScolaireInput | Prisma.PeriodeCreateManyAnneeScolaireInput[]
}

export type PeriodeUpsertWithWhereUniqueWithoutAnneeScolaireInput = {
  where: Prisma.PeriodeWhereUniqueInput
  update: Prisma.XOR<Prisma.PeriodeUpdateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedUpdateWithoutAnneeScolaireInput>
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedCreateWithoutAnneeScolaireInput>
}

export type PeriodeUpdateWithWhereUniqueWithoutAnneeScolaireInput = {
  where: Prisma.PeriodeWhereUniqueInput
  data: Prisma.XOR<Prisma.PeriodeUpdateWithoutAnneeScolaireInput, Prisma.PeriodeUncheckedUpdateWithoutAnneeScolaireInput>
}

export type PeriodeUpdateManyWithWhereWithoutAnneeScolaireInput = {
  where: Prisma.PeriodeScalarWhereInput
  data: Prisma.XOR<Prisma.PeriodeUpdateManyMutationInput, Prisma.PeriodeUncheckedUpdateManyWithoutAnneeScolaireInput>
}

export type PeriodeScalarWhereInput = {
  AND?: Prisma.PeriodeScalarWhereInput | Prisma.PeriodeScalarWhereInput[]
  OR?: Prisma.PeriodeScalarWhereInput[]
  NOT?: Prisma.PeriodeScalarWhereInput | Prisma.PeriodeScalarWhereInput[]
  id?: Prisma.StringFilter<"Periode"> | string
  nom?: Prisma.StringFilter<"Periode"> | string
  type?: Prisma.StringFilter<"Periode"> | string
  dateDebut?: Prisma.DateTimeFilter<"Periode"> | Date | string
  dateFin?: Prisma.DateTimeFilter<"Periode"> | Date | string
  anneeScolaireId?: Prisma.StringFilter<"Periode"> | string
  isActive?: Prisma.BoolFilter<"Periode"> | boolean
  isValidated?: Prisma.BoolFilter<"Periode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Periode"> | Date | string
}

export type PeriodeCreateWithoutNotesInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  anneeScolaire: Prisma.AnneeScolaireCreateNestedOneWithoutPeriodesInput
  bulletins?: Prisma.BulletinCreateNestedManyWithoutPeriodeInput
}

export type PeriodeUncheckedCreateWithoutNotesInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  anneeScolaireId: string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  bulletins?: Prisma.BulletinUncheckedCreateNestedManyWithoutPeriodeInput
}

export type PeriodeCreateOrConnectWithoutNotesInput = {
  where: Prisma.PeriodeWhereUniqueInput
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutNotesInput, Prisma.PeriodeUncheckedCreateWithoutNotesInput>
}

export type PeriodeUpsertWithoutNotesInput = {
  update: Prisma.XOR<Prisma.PeriodeUpdateWithoutNotesInput, Prisma.PeriodeUncheckedUpdateWithoutNotesInput>
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutNotesInput, Prisma.PeriodeUncheckedCreateWithoutNotesInput>
  where?: Prisma.PeriodeWhereInput
}

export type PeriodeUpdateToOneWithWhereWithoutNotesInput = {
  where?: Prisma.PeriodeWhereInput
  data: Prisma.XOR<Prisma.PeriodeUpdateWithoutNotesInput, Prisma.PeriodeUncheckedUpdateWithoutNotesInput>
}

export type PeriodeUpdateWithoutNotesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaire?: Prisma.AnneeScolaireUpdateOneRequiredWithoutPeriodesNestedInput
  bulletins?: Prisma.BulletinUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeUncheckedUpdateWithoutNotesInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaireId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bulletins?: Prisma.BulletinUncheckedUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeCreateWithoutBulletinsInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  anneeScolaire: Prisma.AnneeScolaireCreateNestedOneWithoutPeriodesInput
  notes?: Prisma.NoteCreateNestedManyWithoutPeriodeInput
}

export type PeriodeUncheckedCreateWithoutBulletinsInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  anneeScolaireId: string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  notes?: Prisma.NoteUncheckedCreateNestedManyWithoutPeriodeInput
}

export type PeriodeCreateOrConnectWithoutBulletinsInput = {
  where: Prisma.PeriodeWhereUniqueInput
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutBulletinsInput, Prisma.PeriodeUncheckedCreateWithoutBulletinsInput>
}

export type PeriodeUpsertWithoutBulletinsInput = {
  update: Prisma.XOR<Prisma.PeriodeUpdateWithoutBulletinsInput, Prisma.PeriodeUncheckedUpdateWithoutBulletinsInput>
  create: Prisma.XOR<Prisma.PeriodeCreateWithoutBulletinsInput, Prisma.PeriodeUncheckedCreateWithoutBulletinsInput>
  where?: Prisma.PeriodeWhereInput
}

export type PeriodeUpdateToOneWithWhereWithoutBulletinsInput = {
  where?: Prisma.PeriodeWhereInput
  data: Prisma.XOR<Prisma.PeriodeUpdateWithoutBulletinsInput, Prisma.PeriodeUncheckedUpdateWithoutBulletinsInput>
}

export type PeriodeUpdateWithoutBulletinsInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaire?: Prisma.AnneeScolaireUpdateOneRequiredWithoutPeriodesNestedInput
  notes?: Prisma.NoteUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeUncheckedUpdateWithoutBulletinsInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  anneeScolaireId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NoteUncheckedUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeCreateManyAnneeScolaireInput = {
  id?: string
  nom: string
  type: string
  dateDebut: Date | string
  dateFin: Date | string
  isActive?: boolean
  isValidated?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PeriodeUpdateWithoutAnneeScolaireInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NoteUpdateManyWithoutPeriodeNestedInput
  bulletins?: Prisma.BulletinUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeUncheckedUpdateWithoutAnneeScolaireInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NoteUncheckedUpdateManyWithoutPeriodeNestedInput
  bulletins?: Prisma.BulletinUncheckedUpdateManyWithoutPeriodeNestedInput
}

export type PeriodeUncheckedUpdateManyWithoutAnneeScolaireInput = {
  nom?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  dateDebut?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateFin?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PeriodeCountOutputType
 */

export type PeriodeCountOutputType = {
  notes: number
  bulletins: number
}

export type PeriodeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notes?: boolean | PeriodeCountOutputTypeCountNotesArgs
  bulletins?: boolean | PeriodeCountOutputTypeCountBulletinsArgs
}

/**
 * PeriodeCountOutputType without action
 */
export type PeriodeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PeriodeCountOutputType
   */
  select?: Prisma.PeriodeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PeriodeCountOutputType without action
 */
export type PeriodeCountOutputTypeCountNotesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoteWhereInput
}

/**
 * PeriodeCountOutputType without action
 */
export type PeriodeCountOutputTypeCountBulletinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BulletinWhereInput
}


export type PeriodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nom?: boolean
  type?: boolean
  dateDebut?: boolean
  dateFin?: boolean
  anneeScolaireId?: boolean
  isActive?: boolean
  isValidated?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  anneeScolaire?: boolean | Prisma.AnneeScolaireDefaultArgs<ExtArgs>
  notes?: boolean | Prisma.Periode$notesArgs<ExtArgs>
  bulletins?: boolean | Prisma.Periode$bulletinsArgs<ExtArgs>
  _count?: boolean | Prisma.PeriodeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["periode"]>



export type PeriodeSelectScalar = {
  id?: boolean
  nom?: boolean
  type?: boolean
  dateDebut?: boolean
  dateFin?: boolean
  anneeScolaireId?: boolean
  isActive?: boolean
  isValidated?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PeriodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nom" | "type" | "dateDebut" | "dateFin" | "anneeScolaireId" | "isActive" | "isValidated" | "createdAt" | "updatedAt", ExtArgs["result"]["periode"]>
export type PeriodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  anneeScolaire?: boolean | Prisma.AnneeScolaireDefaultArgs<ExtArgs>
  notes?: boolean | Prisma.Periode$notesArgs<ExtArgs>
  bulletins?: boolean | Prisma.Periode$bulletinsArgs<ExtArgs>
  _count?: boolean | Prisma.PeriodeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $PeriodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Periode"
  objects: {
    anneeScolaire: Prisma.$AnneeScolairePayload<ExtArgs>
    notes: Prisma.$NotePayload<ExtArgs>[]
    bulletins: Prisma.$BulletinPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    nom: string
    type: string
    dateDebut: Date
    dateFin: Date
    anneeScolaireId: string
    isActive: boolean
    isValidated: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["periode"]>
  composites: {}
}

export type PeriodeGetPayload<S extends boolean | null | undefined | PeriodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PeriodePayload, S>

export type PeriodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PeriodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PeriodeCountAggregateInputType | true
  }

export interface PeriodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Periode'], meta: { name: 'Periode' } }
  /**
   * Find zero or one Periode that matches the filter.
   * @param {PeriodeFindUniqueArgs} args - Arguments to find a Periode
   * @example
   * // Get one Periode
   * const periode = await prisma.periode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PeriodeFindUniqueArgs>(args: Prisma.SelectSubset<T, PeriodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Periode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PeriodeFindUniqueOrThrowArgs} args - Arguments to find a Periode
   * @example
   * // Get one Periode
   * const periode = await prisma.periode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PeriodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PeriodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Periode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeFindFirstArgs} args - Arguments to find a Periode
   * @example
   * // Get one Periode
   * const periode = await prisma.periode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PeriodeFindFirstArgs>(args?: Prisma.SelectSubset<T, PeriodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Periode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeFindFirstOrThrowArgs} args - Arguments to find a Periode
   * @example
   * // Get one Periode
   * const periode = await prisma.periode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PeriodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PeriodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Periodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Periodes
   * const periodes = await prisma.periode.findMany()
   * 
   * // Get first 10 Periodes
   * const periodes = await prisma.periode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const periodeWithIdOnly = await prisma.periode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PeriodeFindManyArgs>(args?: Prisma.SelectSubset<T, PeriodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Periode.
   * @param {PeriodeCreateArgs} args - Arguments to create a Periode.
   * @example
   * // Create one Periode
   * const Periode = await prisma.periode.create({
   *   data: {
   *     // ... data to create a Periode
   *   }
   * })
   * 
   */
  create<T extends PeriodeCreateArgs>(args: Prisma.SelectSubset<T, PeriodeCreateArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Periodes.
   * @param {PeriodeCreateManyArgs} args - Arguments to create many Periodes.
   * @example
   * // Create many Periodes
   * const periode = await prisma.periode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PeriodeCreateManyArgs>(args?: Prisma.SelectSubset<T, PeriodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Periode.
   * @param {PeriodeDeleteArgs} args - Arguments to delete one Periode.
   * @example
   * // Delete one Periode
   * const Periode = await prisma.periode.delete({
   *   where: {
   *     // ... filter to delete one Periode
   *   }
   * })
   * 
   */
  delete<T extends PeriodeDeleteArgs>(args: Prisma.SelectSubset<T, PeriodeDeleteArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Periode.
   * @param {PeriodeUpdateArgs} args - Arguments to update one Periode.
   * @example
   * // Update one Periode
   * const periode = await prisma.periode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PeriodeUpdateArgs>(args: Prisma.SelectSubset<T, PeriodeUpdateArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Periodes.
   * @param {PeriodeDeleteManyArgs} args - Arguments to filter Periodes to delete.
   * @example
   * // Delete a few Periodes
   * const { count } = await prisma.periode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PeriodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, PeriodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Periodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Periodes
   * const periode = await prisma.periode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PeriodeUpdateManyArgs>(args: Prisma.SelectSubset<T, PeriodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Periode.
   * @param {PeriodeUpsertArgs} args - Arguments to update or create a Periode.
   * @example
   * // Update or create a Periode
   * const periode = await prisma.periode.upsert({
   *   create: {
   *     // ... data to create a Periode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Periode we want to update
   *   }
   * })
   */
  upsert<T extends PeriodeUpsertArgs>(args: Prisma.SelectSubset<T, PeriodeUpsertArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Periodes that matches the filter.
   * @param {PeriodeFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const periode = await prisma.periode.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.PeriodeFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Periode.
   * @param {PeriodeAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const periode = await prisma.periode.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.PeriodeAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Periodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeCountArgs} args - Arguments to filter Periodes to count.
   * @example
   * // Count the number of Periodes
   * const count = await prisma.periode.count({
   *   where: {
   *     // ... the filter for the Periodes we want to count
   *   }
   * })
  **/
  count<T extends PeriodeCountArgs>(
    args?: Prisma.Subset<T, PeriodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PeriodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Periode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PeriodeAggregateArgs>(args: Prisma.Subset<T, PeriodeAggregateArgs>): Prisma.PrismaPromise<GetPeriodeAggregateType<T>>

  /**
   * Group by Periode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeriodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PeriodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PeriodeGroupByArgs['orderBy'] }
      : { orderBy?: PeriodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PeriodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeriodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Periode model
 */
readonly fields: PeriodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Periode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PeriodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  anneeScolaire<T extends Prisma.AnneeScolaireDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AnneeScolaireDefaultArgs<ExtArgs>>): Prisma.Prisma__AnneeScolaireClient<runtime.Types.Result.GetResult<Prisma.$AnneeScolairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  notes<T extends Prisma.Periode$notesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Periode$notesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  bulletins<T extends Prisma.Periode$bulletinsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Periode$bulletinsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BulletinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Periode model
 */
export interface PeriodeFieldRefs {
  readonly id: Prisma.FieldRef<"Periode", 'String'>
  readonly nom: Prisma.FieldRef<"Periode", 'String'>
  readonly type: Prisma.FieldRef<"Periode", 'String'>
  readonly dateDebut: Prisma.FieldRef<"Periode", 'DateTime'>
  readonly dateFin: Prisma.FieldRef<"Periode", 'DateTime'>
  readonly anneeScolaireId: Prisma.FieldRef<"Periode", 'String'>
  readonly isActive: Prisma.FieldRef<"Periode", 'Boolean'>
  readonly isValidated: Prisma.FieldRef<"Periode", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Periode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Periode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Periode findUnique
 */
export type PeriodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter, which Periode to fetch.
   */
  where: Prisma.PeriodeWhereUniqueInput
}

/**
 * Periode findUniqueOrThrow
 */
export type PeriodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter, which Periode to fetch.
   */
  where: Prisma.PeriodeWhereUniqueInput
}

/**
 * Periode findFirst
 */
export type PeriodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter, which Periode to fetch.
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Periodes to fetch.
   */
  orderBy?: Prisma.PeriodeOrderByWithRelationInput | Prisma.PeriodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Periodes.
   */
  cursor?: Prisma.PeriodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Periodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Periodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Periodes.
   */
  distinct?: Prisma.PeriodeScalarFieldEnum | Prisma.PeriodeScalarFieldEnum[]
}

/**
 * Periode findFirstOrThrow
 */
export type PeriodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter, which Periode to fetch.
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Periodes to fetch.
   */
  orderBy?: Prisma.PeriodeOrderByWithRelationInput | Prisma.PeriodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Periodes.
   */
  cursor?: Prisma.PeriodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Periodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Periodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Periodes.
   */
  distinct?: Prisma.PeriodeScalarFieldEnum | Prisma.PeriodeScalarFieldEnum[]
}

/**
 * Periode findMany
 */
export type PeriodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter, which Periodes to fetch.
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Periodes to fetch.
   */
  orderBy?: Prisma.PeriodeOrderByWithRelationInput | Prisma.PeriodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Periodes.
   */
  cursor?: Prisma.PeriodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Periodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Periodes.
   */
  skip?: number
  distinct?: Prisma.PeriodeScalarFieldEnum | Prisma.PeriodeScalarFieldEnum[]
}

/**
 * Periode create
 */
export type PeriodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * The data needed to create a Periode.
   */
  data: Prisma.XOR<Prisma.PeriodeCreateInput, Prisma.PeriodeUncheckedCreateInput>
}

/**
 * Periode createMany
 */
export type PeriodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Periodes.
   */
  data: Prisma.PeriodeCreateManyInput | Prisma.PeriodeCreateManyInput[]
}

/**
 * Periode update
 */
export type PeriodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * The data needed to update a Periode.
   */
  data: Prisma.XOR<Prisma.PeriodeUpdateInput, Prisma.PeriodeUncheckedUpdateInput>
  /**
   * Choose, which Periode to update.
   */
  where: Prisma.PeriodeWhereUniqueInput
}

/**
 * Periode updateMany
 */
export type PeriodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Periodes.
   */
  data: Prisma.XOR<Prisma.PeriodeUpdateManyMutationInput, Prisma.PeriodeUncheckedUpdateManyInput>
  /**
   * Filter which Periodes to update
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * Limit how many Periodes to update.
   */
  limit?: number
}

/**
 * Periode upsert
 */
export type PeriodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * The filter to search for the Periode to update in case it exists.
   */
  where: Prisma.PeriodeWhereUniqueInput
  /**
   * In case the Periode found by the `where` argument doesn't exist, create a new Periode with this data.
   */
  create: Prisma.XOR<Prisma.PeriodeCreateInput, Prisma.PeriodeUncheckedCreateInput>
  /**
   * In case the Periode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PeriodeUpdateInput, Prisma.PeriodeUncheckedUpdateInput>
}

/**
 * Periode delete
 */
export type PeriodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
  /**
   * Filter which Periode to delete.
   */
  where: Prisma.PeriodeWhereUniqueInput
}

/**
 * Periode deleteMany
 */
export type PeriodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Periodes to delete
   */
  where?: Prisma.PeriodeWhereInput
  /**
   * Limit how many Periodes to delete.
   */
  limit?: number
}

/**
 * Periode findRaw
 */
export type PeriodeFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Periode aggregateRaw
 */
export type PeriodeAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Periode.notes
 */
export type Periode$notesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  where?: Prisma.NoteWhereInput
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  cursor?: Prisma.NoteWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Periode.bulletins
 */
export type Periode$bulletinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bulletin
   */
  select?: Prisma.BulletinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bulletin
   */
  omit?: Prisma.BulletinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BulletinInclude<ExtArgs> | null
  where?: Prisma.BulletinWhereInput
  orderBy?: Prisma.BulletinOrderByWithRelationInput | Prisma.BulletinOrderByWithRelationInput[]
  cursor?: Prisma.BulletinWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BulletinScalarFieldEnum | Prisma.BulletinScalarFieldEnum[]
}

/**
 * Periode without action
 */
export type PeriodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Periode
   */
  select?: Prisma.PeriodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Periode
   */
  omit?: Prisma.PeriodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PeriodeInclude<ExtArgs> | null
}
