
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Note` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Note
 * 
 */
export type NoteModel = runtime.Types.Result.DefaultSelection<Prisma.$NotePayload>

export type AggregateNote = {
  _count: NoteCountAggregateOutputType | null
  _avg: NoteAvgAggregateOutputType | null
  _sum: NoteSumAggregateOutputType | null
  _min: NoteMinAggregateOutputType | null
  _max: NoteMaxAggregateOutputType | null
}

export type NoteAvgAggregateOutputType = {
  valeur: number | null
  coefficient: number | null
}

export type NoteSumAggregateOutputType = {
  valeur: number | null
  coefficient: number | null
}

export type NoteMinAggregateOutputType = {
  id: string | null
  valeur: number | null
  studentId: string | null
  matiereId: string | null
  periodeId: string | null
  enseignantId: string | null
  typeEvaluation: string | null
  coefficient: number | null
  appreciation: string | null
  isValidated: boolean | null
  dateValidation: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoteMaxAggregateOutputType = {
  id: string | null
  valeur: number | null
  studentId: string | null
  matiereId: string | null
  periodeId: string | null
  enseignantId: string | null
  typeEvaluation: string | null
  coefficient: number | null
  appreciation: string | null
  isValidated: boolean | null
  dateValidation: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoteCountAggregateOutputType = {
  id: number
  valeur: number
  studentId: number
  matiereId: number
  periodeId: number
  enseignantId: number
  typeEvaluation: number
  coefficient: number
  appreciation: number
  isValidated: number
  dateValidation: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type NoteAvgAggregateInputType = {
  valeur?: true
  coefficient?: true
}

export type NoteSumAggregateInputType = {
  valeur?: true
  coefficient?: true
}

export type NoteMinAggregateInputType = {
  id?: true
  valeur?: true
  studentId?: true
  matiereId?: true
  periodeId?: true
  enseignantId?: true
  typeEvaluation?: true
  coefficient?: true
  appreciation?: true
  isValidated?: true
  dateValidation?: true
  createdAt?: true
  updatedAt?: true
}

export type NoteMaxAggregateInputType = {
  id?: true
  valeur?: true
  studentId?: true
  matiereId?: true
  periodeId?: true
  enseignantId?: true
  typeEvaluation?: true
  coefficient?: true
  appreciation?: true
  isValidated?: true
  dateValidation?: true
  createdAt?: true
  updatedAt?: true
}

export type NoteCountAggregateInputType = {
  id?: true
  valeur?: true
  studentId?: true
  matiereId?: true
  periodeId?: true
  enseignantId?: true
  typeEvaluation?: true
  coefficient?: true
  appreciation?: true
  isValidated?: true
  dateValidation?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NoteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Note to aggregate.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notes to fetch.
   */
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Notes
  **/
  _count?: true | NoteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NoteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NoteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NoteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NoteMaxAggregateInputType
}

export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
      [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNote[P]>
    : Prisma.GetScalarType<T[P], AggregateNote[P]>
}




export type NoteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NoteWhereInput
  orderBy?: Prisma.NoteOrderByWithAggregationInput | Prisma.NoteOrderByWithAggregationInput[]
  by: Prisma.NoteScalarFieldEnum[] | Prisma.NoteScalarFieldEnum
  having?: Prisma.NoteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NoteCountAggregateInputType | true
  _avg?: NoteAvgAggregateInputType
  _sum?: NoteSumAggregateInputType
  _min?: NoteMinAggregateInputType
  _max?: NoteMaxAggregateInputType
}

export type NoteGroupByOutputType = {
  id: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation: string
  coefficient: number
  appreciation: string | null
  isValidated: boolean
  dateValidation: Date | null
  createdAt: Date
  updatedAt: Date
  _count: NoteCountAggregateOutputType | null
  _avg: NoteAvgAggregateOutputType | null
  _sum: NoteSumAggregateOutputType | null
  _min: NoteMinAggregateOutputType | null
  _max: NoteMaxAggregateOutputType | null
}

type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NoteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NoteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NoteGroupByOutputType[P]>
      }
    >
  > 



export type NoteWhereInput = {
  AND?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  OR?: Prisma.NoteWhereInput[]
  NOT?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  id?: Prisma.StringFilter<"Note"> | string
  valeur?: Prisma.FloatFilter<"Note"> | number
  studentId?: Prisma.StringFilter<"Note"> | string
  matiereId?: Prisma.StringFilter<"Note"> | string
  periodeId?: Prisma.StringFilter<"Note"> | string
  enseignantId?: Prisma.StringFilter<"Note"> | string
  typeEvaluation?: Prisma.StringFilter<"Note"> | string
  coefficient?: Prisma.FloatFilter<"Note"> | number
  appreciation?: Prisma.StringNullableFilter<"Note"> | string | null
  isValidated?: Prisma.BoolFilter<"Note"> | boolean
  dateValidation?: Prisma.DateTimeNullableFilter<"Note"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Note"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Note"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  matiere?: Prisma.XOR<Prisma.MatiereScalarRelationFilter, Prisma.MatiereWhereInput>
  periode?: Prisma.XOR<Prisma.PeriodeScalarRelationFilter, Prisma.PeriodeWhereInput>
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  historiqueModifications?: Prisma.HistoriqueModificationListRelationFilter
}

export type NoteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  periodeId?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  typeEvaluation?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
  appreciation?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  dateValidation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  student?: Prisma.StudentOrderByWithRelationInput
  matiere?: Prisma.MatiereOrderByWithRelationInput
  periode?: Prisma.PeriodeOrderByWithRelationInput
  enseignant?: Prisma.EnseignantOrderByWithRelationInput
  historiqueModifications?: Prisma.HistoriqueModificationOrderByRelationAggregateInput
}

export type NoteWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  studentId_matiereId_periodeId_typeEvaluation?: Prisma.NoteStudentIdMatiereIdPeriodeIdTypeEvaluationCompoundUniqueInput
  AND?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  OR?: Prisma.NoteWhereInput[]
  NOT?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  valeur?: Prisma.FloatFilter<"Note"> | number
  studentId?: Prisma.StringFilter<"Note"> | string
  matiereId?: Prisma.StringFilter<"Note"> | string
  periodeId?: Prisma.StringFilter<"Note"> | string
  enseignantId?: Prisma.StringFilter<"Note"> | string
  typeEvaluation?: Prisma.StringFilter<"Note"> | string
  coefficient?: Prisma.FloatFilter<"Note"> | number
  appreciation?: Prisma.StringNullableFilter<"Note"> | string | null
  isValidated?: Prisma.BoolFilter<"Note"> | boolean
  dateValidation?: Prisma.DateTimeNullableFilter<"Note"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Note"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Note"> | Date | string
  student?: Prisma.XOR<Prisma.StudentScalarRelationFilter, Prisma.StudentWhereInput>
  matiere?: Prisma.XOR<Prisma.MatiereScalarRelationFilter, Prisma.MatiereWhereInput>
  periode?: Prisma.XOR<Prisma.PeriodeScalarRelationFilter, Prisma.PeriodeWhereInput>
  enseignant?: Prisma.XOR<Prisma.EnseignantScalarRelationFilter, Prisma.EnseignantWhereInput>
  historiqueModifications?: Prisma.HistoriqueModificationListRelationFilter
}, "id" | "studentId_matiereId_periodeId_typeEvaluation">

export type NoteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  periodeId?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  typeEvaluation?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
  appreciation?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  dateValidation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NoteCountOrderByAggregateInput
  _avg?: Prisma.NoteAvgOrderByAggregateInput
  _max?: Prisma.NoteMaxOrderByAggregateInput
  _min?: Prisma.NoteMinOrderByAggregateInput
  _sum?: Prisma.NoteSumOrderByAggregateInput
}

export type NoteScalarWhereWithAggregatesInput = {
  AND?: Prisma.NoteScalarWhereWithAggregatesInput | Prisma.NoteScalarWhereWithAggregatesInput[]
  OR?: Prisma.NoteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NoteScalarWhereWithAggregatesInput | Prisma.NoteScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Note"> | string
  valeur?: Prisma.FloatWithAggregatesFilter<"Note"> | number
  studentId?: Prisma.StringWithAggregatesFilter<"Note"> | string
  matiereId?: Prisma.StringWithAggregatesFilter<"Note"> | string
  periodeId?: Prisma.StringWithAggregatesFilter<"Note"> | string
  enseignantId?: Prisma.StringWithAggregatesFilter<"Note"> | string
  typeEvaluation?: Prisma.StringWithAggregatesFilter<"Note"> | string
  coefficient?: Prisma.FloatWithAggregatesFilter<"Note"> | number
  appreciation?: Prisma.StringNullableWithAggregatesFilter<"Note"> | string | null
  isValidated?: Prisma.BoolWithAggregatesFilter<"Note"> | boolean
  dateValidation?: Prisma.DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Note"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Note"> | Date | string
}

export type NoteCreateInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutNotesInput
  matiere: Prisma.MatiereCreateNestedOneWithoutNotesInput
  periode: Prisma.PeriodeCreateNestedOneWithoutNotesInput
  enseignant: Prisma.EnseignantCreateNestedOneWithoutNotesInput
  historiqueModifications?: Prisma.HistoriqueModificationCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteUpdateInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutNotesNestedInput
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutNotesNestedInput
  periode?: Prisma.PeriodeUpdateOneRequiredWithoutNotesNestedInput
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutNotesNestedInput
  historiqueModifications?: Prisma.HistoriqueModificationUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteCreateManyInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateManyMutationInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteUncheckedUpdateManyInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteListRelationFilter = {
  every?: Prisma.NoteWhereInput
  some?: Prisma.NoteWhereInput
  none?: Prisma.NoteWhereInput
}

export type NoteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NoteStudentIdMatiereIdPeriodeIdTypeEvaluationCompoundUniqueInput = {
  studentId: string
  matiereId: string
  periodeId: string
  typeEvaluation: string
}

export type NoteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  periodeId?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  typeEvaluation?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
  appreciation?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  dateValidation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteAvgOrderByAggregateInput = {
  valeur?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
}

export type NoteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  periodeId?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  typeEvaluation?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
  appreciation?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  dateValidation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valeur?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  matiereId?: Prisma.SortOrder
  periodeId?: Prisma.SortOrder
  enseignantId?: Prisma.SortOrder
  typeEvaluation?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
  appreciation?: Prisma.SortOrder
  isValidated?: Prisma.SortOrder
  dateValidation?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteSumOrderByAggregateInput = {
  valeur?: Prisma.SortOrder
  coefficient?: Prisma.SortOrder
}

export type NoteScalarRelationFilter = {
  is?: Prisma.NoteWhereInput
  isNot?: Prisma.NoteWhereInput
}

export type NoteCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput> | Prisma.NoteCreateWithoutStudentInput[] | Prisma.NoteUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutStudentInput | Prisma.NoteCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.NoteCreateManyStudentInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutStudentInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput> | Prisma.NoteCreateWithoutStudentInput[] | Prisma.NoteUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutStudentInput | Prisma.NoteCreateOrConnectWithoutStudentInput[]
  createMany?: Prisma.NoteCreateManyStudentInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput> | Prisma.NoteCreateWithoutStudentInput[] | Prisma.NoteUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutStudentInput | Prisma.NoteCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutStudentInput | Prisma.NoteUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.NoteCreateManyStudentInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutStudentInput | Prisma.NoteUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutStudentInput | Prisma.NoteUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutStudentNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput> | Prisma.NoteCreateWithoutStudentInput[] | Prisma.NoteUncheckedCreateWithoutStudentInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutStudentInput | Prisma.NoteCreateOrConnectWithoutStudentInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutStudentInput | Prisma.NoteUpsertWithWhereUniqueWithoutStudentInput[]
  createMany?: Prisma.NoteCreateManyStudentInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutStudentInput | Prisma.NoteUpdateWithWhereUniqueWithoutStudentInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutStudentInput | Prisma.NoteUpdateManyWithWhereWithoutStudentInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteCreateNestedManyWithoutMatiereInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput> | Prisma.NoteCreateWithoutMatiereInput[] | Prisma.NoteUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutMatiereInput | Prisma.NoteCreateOrConnectWithoutMatiereInput[]
  createMany?: Prisma.NoteCreateManyMatiereInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutMatiereInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput> | Prisma.NoteCreateWithoutMatiereInput[] | Prisma.NoteUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutMatiereInput | Prisma.NoteCreateOrConnectWithoutMatiereInput[]
  createMany?: Prisma.NoteCreateManyMatiereInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutMatiereNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput> | Prisma.NoteCreateWithoutMatiereInput[] | Prisma.NoteUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutMatiereInput | Prisma.NoteCreateOrConnectWithoutMatiereInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutMatiereInput | Prisma.NoteUpsertWithWhereUniqueWithoutMatiereInput[]
  createMany?: Prisma.NoteCreateManyMatiereInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutMatiereInput | Prisma.NoteUpdateWithWhereUniqueWithoutMatiereInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutMatiereInput | Prisma.NoteUpdateManyWithWhereWithoutMatiereInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutMatiereNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput> | Prisma.NoteCreateWithoutMatiereInput[] | Prisma.NoteUncheckedCreateWithoutMatiereInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutMatiereInput | Prisma.NoteCreateOrConnectWithoutMatiereInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutMatiereInput | Prisma.NoteUpsertWithWhereUniqueWithoutMatiereInput[]
  createMany?: Prisma.NoteCreateManyMatiereInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutMatiereInput | Prisma.NoteUpdateWithWhereUniqueWithoutMatiereInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutMatiereInput | Prisma.NoteUpdateManyWithWhereWithoutMatiereInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput> | Prisma.NoteCreateWithoutEnseignantInput[] | Prisma.NoteUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutEnseignantInput | Prisma.NoteCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.NoteCreateManyEnseignantInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutEnseignantInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput> | Prisma.NoteCreateWithoutEnseignantInput[] | Prisma.NoteUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutEnseignantInput | Prisma.NoteCreateOrConnectWithoutEnseignantInput[]
  createMany?: Prisma.NoteCreateManyEnseignantInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput> | Prisma.NoteCreateWithoutEnseignantInput[] | Prisma.NoteUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutEnseignantInput | Prisma.NoteCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.NoteUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.NoteCreateManyEnseignantInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.NoteUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutEnseignantInput | Prisma.NoteUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutEnseignantNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput> | Prisma.NoteCreateWithoutEnseignantInput[] | Prisma.NoteUncheckedCreateWithoutEnseignantInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutEnseignantInput | Prisma.NoteCreateOrConnectWithoutEnseignantInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutEnseignantInput | Prisma.NoteUpsertWithWhereUniqueWithoutEnseignantInput[]
  createMany?: Prisma.NoteCreateManyEnseignantInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutEnseignantInput | Prisma.NoteUpdateWithWhereUniqueWithoutEnseignantInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutEnseignantInput | Prisma.NoteUpdateManyWithWhereWithoutEnseignantInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteCreateNestedManyWithoutPeriodeInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput> | Prisma.NoteCreateWithoutPeriodeInput[] | Prisma.NoteUncheckedCreateWithoutPeriodeInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutPeriodeInput | Prisma.NoteCreateOrConnectWithoutPeriodeInput[]
  createMany?: Prisma.NoteCreateManyPeriodeInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutPeriodeInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput> | Prisma.NoteCreateWithoutPeriodeInput[] | Prisma.NoteUncheckedCreateWithoutPeriodeInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutPeriodeInput | Prisma.NoteCreateOrConnectWithoutPeriodeInput[]
  createMany?: Prisma.NoteCreateManyPeriodeInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutPeriodeNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput> | Prisma.NoteCreateWithoutPeriodeInput[] | Prisma.NoteUncheckedCreateWithoutPeriodeInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutPeriodeInput | Prisma.NoteCreateOrConnectWithoutPeriodeInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutPeriodeInput | Prisma.NoteUpsertWithWhereUniqueWithoutPeriodeInput[]
  createMany?: Prisma.NoteCreateManyPeriodeInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutPeriodeInput | Prisma.NoteUpdateWithWhereUniqueWithoutPeriodeInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutPeriodeInput | Prisma.NoteUpdateManyWithWhereWithoutPeriodeInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutPeriodeNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput> | Prisma.NoteCreateWithoutPeriodeInput[] | Prisma.NoteUncheckedCreateWithoutPeriodeInput[]
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutPeriodeInput | Prisma.NoteCreateOrConnectWithoutPeriodeInput[]
  upsert?: Prisma.NoteUpsertWithWhereUniqueWithoutPeriodeInput | Prisma.NoteUpsertWithWhereUniqueWithoutPeriodeInput[]
  createMany?: Prisma.NoteCreateManyPeriodeInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?: Prisma.NoteUpdateWithWhereUniqueWithoutPeriodeInput | Prisma.NoteUpdateWithWhereUniqueWithoutPeriodeInput[]
  updateMany?: Prisma.NoteUpdateManyWithWhereWithoutPeriodeInput | Prisma.NoteUpdateManyWithWhereWithoutPeriodeInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NoteCreateNestedOneWithoutHistoriqueModificationsInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedCreateWithoutHistoriqueModificationsInput>
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutHistoriqueModificationsInput
  connect?: Prisma.NoteWhereUniqueInput
}

export type NoteUpdateOneRequiredWithoutHistoriqueModificationsNestedInput = {
  create?: Prisma.XOR<Prisma.NoteCreateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedCreateWithoutHistoriqueModificationsInput>
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutHistoriqueModificationsInput
  upsert?: Prisma.NoteUpsertWithoutHistoriqueModificationsInput
  connect?: Prisma.NoteWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.NoteUpdateToOneWithWhereWithoutHistoriqueModificationsInput, Prisma.NoteUpdateWithoutHistoriqueModificationsInput>, Prisma.NoteUncheckedUpdateWithoutHistoriqueModificationsInput>
}

export type NoteCreateWithoutStudentInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  matiere: Prisma.MatiereCreateNestedOneWithoutNotesInput
  periode: Prisma.PeriodeCreateNestedOneWithoutNotesInput
  enseignant: Prisma.EnseignantCreateNestedOneWithoutNotesInput
  historiqueModifications?: Prisma.HistoriqueModificationCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutStudentInput = {
  id?: string
  valeur: number
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutStudentInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput>
}

export type NoteCreateManyStudentInputEnvelope = {
  data: Prisma.NoteCreateManyStudentInput | Prisma.NoteCreateManyStudentInput[]
}

export type NoteUpsertWithWhereUniqueWithoutStudentInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<Prisma.NoteUpdateWithoutStudentInput, Prisma.NoteUncheckedUpdateWithoutStudentInput>
  create: Prisma.XOR<Prisma.NoteCreateWithoutStudentInput, Prisma.NoteUncheckedCreateWithoutStudentInput>
}

export type NoteUpdateWithWhereUniqueWithoutStudentInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<Prisma.NoteUpdateWithoutStudentInput, Prisma.NoteUncheckedUpdateWithoutStudentInput>
}

export type NoteUpdateManyWithWhereWithoutStudentInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<Prisma.NoteUpdateManyMutationInput, Prisma.NoteUncheckedUpdateManyWithoutStudentInput>
}

export type NoteScalarWhereInput = {
  AND?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
  OR?: Prisma.NoteScalarWhereInput[]
  NOT?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
  id?: Prisma.StringFilter<"Note"> | string
  valeur?: Prisma.FloatFilter<"Note"> | number
  studentId?: Prisma.StringFilter<"Note"> | string
  matiereId?: Prisma.StringFilter<"Note"> | string
  periodeId?: Prisma.StringFilter<"Note"> | string
  enseignantId?: Prisma.StringFilter<"Note"> | string
  typeEvaluation?: Prisma.StringFilter<"Note"> | string
  coefficient?: Prisma.FloatFilter<"Note"> | number
  appreciation?: Prisma.StringNullableFilter<"Note"> | string | null
  isValidated?: Prisma.BoolFilter<"Note"> | boolean
  dateValidation?: Prisma.DateTimeNullableFilter<"Note"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Note"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Note"> | Date | string
}

export type NoteCreateWithoutMatiereInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutNotesInput
  periode: Prisma.PeriodeCreateNestedOneWithoutNotesInput
  enseignant: Prisma.EnseignantCreateNestedOneWithoutNotesInput
  historiqueModifications?: Prisma.HistoriqueModificationCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutMatiereInput = {
  id?: string
  valeur: number
  studentId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutMatiereInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput>
}

export type NoteCreateManyMatiereInputEnvelope = {
  data: Prisma.NoteCreateManyMatiereInput | Prisma.NoteCreateManyMatiereInput[]
}

export type NoteUpsertWithWhereUniqueWithoutMatiereInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<Prisma.NoteUpdateWithoutMatiereInput, Prisma.NoteUncheckedUpdateWithoutMatiereInput>
  create: Prisma.XOR<Prisma.NoteCreateWithoutMatiereInput, Prisma.NoteUncheckedCreateWithoutMatiereInput>
}

export type NoteUpdateWithWhereUniqueWithoutMatiereInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<Prisma.NoteUpdateWithoutMatiereInput, Prisma.NoteUncheckedUpdateWithoutMatiereInput>
}

export type NoteUpdateManyWithWhereWithoutMatiereInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<Prisma.NoteUpdateManyMutationInput, Prisma.NoteUncheckedUpdateManyWithoutMatiereInput>
}

export type NoteCreateWithoutEnseignantInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutNotesInput
  matiere: Prisma.MatiereCreateNestedOneWithoutNotesInput
  periode: Prisma.PeriodeCreateNestedOneWithoutNotesInput
  historiqueModifications?: Prisma.HistoriqueModificationCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutEnseignantInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutEnseignantInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput>
}

export type NoteCreateManyEnseignantInputEnvelope = {
  data: Prisma.NoteCreateManyEnseignantInput | Prisma.NoteCreateManyEnseignantInput[]
}

export type NoteUpsertWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<Prisma.NoteUpdateWithoutEnseignantInput, Prisma.NoteUncheckedUpdateWithoutEnseignantInput>
  create: Prisma.XOR<Prisma.NoteCreateWithoutEnseignantInput, Prisma.NoteUncheckedCreateWithoutEnseignantInput>
}

export type NoteUpdateWithWhereUniqueWithoutEnseignantInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<Prisma.NoteUpdateWithoutEnseignantInput, Prisma.NoteUncheckedUpdateWithoutEnseignantInput>
}

export type NoteUpdateManyWithWhereWithoutEnseignantInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<Prisma.NoteUpdateManyMutationInput, Prisma.NoteUncheckedUpdateManyWithoutEnseignantInput>
}

export type NoteCreateWithoutPeriodeInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutNotesInput
  matiere: Prisma.MatiereCreateNestedOneWithoutNotesInput
  enseignant: Prisma.EnseignantCreateNestedOneWithoutNotesInput
  historiqueModifications?: Prisma.HistoriqueModificationCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutPeriodeInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutPeriodeInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput>
}

export type NoteCreateManyPeriodeInputEnvelope = {
  data: Prisma.NoteCreateManyPeriodeInput | Prisma.NoteCreateManyPeriodeInput[]
}

export type NoteUpsertWithWhereUniqueWithoutPeriodeInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<Prisma.NoteUpdateWithoutPeriodeInput, Prisma.NoteUncheckedUpdateWithoutPeriodeInput>
  create: Prisma.XOR<Prisma.NoteCreateWithoutPeriodeInput, Prisma.NoteUncheckedCreateWithoutPeriodeInput>
}

export type NoteUpdateWithWhereUniqueWithoutPeriodeInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<Prisma.NoteUpdateWithoutPeriodeInput, Prisma.NoteUncheckedUpdateWithoutPeriodeInput>
}

export type NoteUpdateManyWithWhereWithoutPeriodeInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<Prisma.NoteUpdateManyMutationInput, Prisma.NoteUncheckedUpdateManyWithoutPeriodeInput>
}

export type NoteCreateWithoutHistoriqueModificationsInput = {
  id?: string
  valeur: number
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  student: Prisma.StudentCreateNestedOneWithoutNotesInput
  matiere: Prisma.MatiereCreateNestedOneWithoutNotesInput
  periode: Prisma.PeriodeCreateNestedOneWithoutNotesInput
  enseignant: Prisma.EnseignantCreateNestedOneWithoutNotesInput
}

export type NoteUncheckedCreateWithoutHistoriqueModificationsInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteCreateOrConnectWithoutHistoriqueModificationsInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<Prisma.NoteCreateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedCreateWithoutHistoriqueModificationsInput>
}

export type NoteUpsertWithoutHistoriqueModificationsInput = {
  update: Prisma.XOR<Prisma.NoteUpdateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedUpdateWithoutHistoriqueModificationsInput>
  create: Prisma.XOR<Prisma.NoteCreateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedCreateWithoutHistoriqueModificationsInput>
  where?: Prisma.NoteWhereInput
}

export type NoteUpdateToOneWithWhereWithoutHistoriqueModificationsInput = {
  where?: Prisma.NoteWhereInput
  data: Prisma.XOR<Prisma.NoteUpdateWithoutHistoriqueModificationsInput, Prisma.NoteUncheckedUpdateWithoutHistoriqueModificationsInput>
}

export type NoteUpdateWithoutHistoriqueModificationsInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutNotesNestedInput
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutNotesNestedInput
  periode?: Prisma.PeriodeUpdateOneRequiredWithoutNotesNestedInput
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutNotesNestedInput
}

export type NoteUncheckedUpdateWithoutHistoriqueModificationsInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyStudentInput = {
  id?: string
  valeur: number
  matiereId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutStudentInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutNotesNestedInput
  periode?: Prisma.PeriodeUpdateOneRequiredWithoutNotesNestedInput
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutNotesNestedInput
  historiqueModifications?: Prisma.HistoriqueModificationUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutStudentInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutStudentInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyMatiereInput = {
  id?: string
  valeur: number
  studentId: string
  periodeId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutMatiereInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutNotesNestedInput
  periode?: Prisma.PeriodeUpdateOneRequiredWithoutNotesNestedInput
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutNotesNestedInput
  historiqueModifications?: Prisma.HistoriqueModificationUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutMatiereInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutMatiereInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyEnseignantInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  periodeId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutEnseignantInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutNotesNestedInput
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutNotesNestedInput
  periode?: Prisma.PeriodeUpdateOneRequiredWithoutNotesNestedInput
  historiqueModifications?: Prisma.HistoriqueModificationUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutEnseignantInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutEnseignantInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  periodeId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyPeriodeInput = {
  id?: string
  valeur: number
  studentId: string
  matiereId: string
  enseignantId: string
  typeEvaluation?: string
  coefficient?: number
  appreciation?: string | null
  isValidated?: boolean
  dateValidation?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutPeriodeInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  student?: Prisma.StudentUpdateOneRequiredWithoutNotesNestedInput
  matiere?: Prisma.MatiereUpdateOneRequiredWithoutNotesNestedInput
  enseignant?: Prisma.EnseignantUpdateOneRequiredWithoutNotesNestedInput
  historiqueModifications?: Prisma.HistoriqueModificationUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutPeriodeInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  historiqueModifications?: Prisma.HistoriqueModificationUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutPeriodeInput = {
  valeur?: Prisma.FloatFieldUpdateOperationsInput | number
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  matiereId?: Prisma.StringFieldUpdateOperationsInput | string
  enseignantId?: Prisma.StringFieldUpdateOperationsInput | string
  typeEvaluation?: Prisma.StringFieldUpdateOperationsInput | string
  coefficient?: Prisma.FloatFieldUpdateOperationsInput | number
  appreciation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isValidated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateValidation?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type NoteCountOutputType
 */

export type NoteCountOutputType = {
  historiqueModifications: number
}

export type NoteCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  historiqueModifications?: boolean | NoteCountOutputTypeCountHistoriqueModificationsArgs
}

/**
 * NoteCountOutputType without action
 */
export type NoteCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NoteCountOutputType
   */
  select?: Prisma.NoteCountOutputTypeSelect<ExtArgs> | null
}

/**
 * NoteCountOutputType without action
 */
export type NoteCountOutputTypeCountHistoriqueModificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HistoriqueModificationWhereInput
}


export type NoteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  valeur?: boolean
  studentId?: boolean
  matiereId?: boolean
  periodeId?: boolean
  enseignantId?: boolean
  typeEvaluation?: boolean
  coefficient?: boolean
  appreciation?: boolean
  isValidated?: boolean
  dateValidation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  matiere?: boolean | Prisma.MatiereDefaultArgs<ExtArgs>
  periode?: boolean | Prisma.PeriodeDefaultArgs<ExtArgs>
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  historiqueModifications?: boolean | Prisma.Note$historiqueModificationsArgs<ExtArgs>
  _count?: boolean | Prisma.NoteCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["note"]>



export type NoteSelectScalar = {
  id?: boolean
  valeur?: boolean
  studentId?: boolean
  matiereId?: boolean
  periodeId?: boolean
  enseignantId?: boolean
  typeEvaluation?: boolean
  coefficient?: boolean
  appreciation?: boolean
  isValidated?: boolean
  dateValidation?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NoteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "valeur" | "studentId" | "matiereId" | "periodeId" | "enseignantId" | "typeEvaluation" | "coefficient" | "appreciation" | "isValidated" | "dateValidation" | "createdAt" | "updatedAt", ExtArgs["result"]["note"]>
export type NoteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  student?: boolean | Prisma.StudentDefaultArgs<ExtArgs>
  matiere?: boolean | Prisma.MatiereDefaultArgs<ExtArgs>
  periode?: boolean | Prisma.PeriodeDefaultArgs<ExtArgs>
  enseignant?: boolean | Prisma.EnseignantDefaultArgs<ExtArgs>
  historiqueModifications?: boolean | Prisma.Note$historiqueModificationsArgs<ExtArgs>
  _count?: boolean | Prisma.NoteCountOutputTypeDefaultArgs<ExtArgs>
}

export type $NotePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Note"
  objects: {
    student: Prisma.$StudentPayload<ExtArgs>
    matiere: Prisma.$MatierePayload<ExtArgs>
    periode: Prisma.$PeriodePayload<ExtArgs>
    enseignant: Prisma.$EnseignantPayload<ExtArgs>
    historiqueModifications: Prisma.$HistoriqueModificationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    valeur: number
    studentId: string
    matiereId: string
    periodeId: string
    enseignantId: string
    typeEvaluation: string
    coefficient: number
    appreciation: string | null
    isValidated: boolean
    dateValidation: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["note"]>
  composites: {}
}

export type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NotePayload, S>

export type NoteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NoteCountAggregateInputType | true
  }

export interface NoteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
  /**
   * Find zero or one Note that matches the filter.
   * @param {NoteFindUniqueArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NoteFindUniqueArgs>(args: Prisma.SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Note that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Note that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindFirstArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NoteFindFirstArgs>(args?: Prisma.SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Note that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notes
   * const notes = await prisma.note.findMany()
   * 
   * // Get first 10 Notes
   * const notes = await prisma.note.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NoteFindManyArgs>(args?: Prisma.SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Note.
   * @param {NoteCreateArgs} args - Arguments to create a Note.
   * @example
   * // Create one Note
   * const Note = await prisma.note.create({
   *   data: {
   *     // ... data to create a Note
   *   }
   * })
   * 
   */
  create<T extends NoteCreateArgs>(args: Prisma.SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Notes.
   * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
   * @example
   * // Create many Notes
   * const note = await prisma.note.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NoteCreateManyArgs>(args?: Prisma.SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Note.
   * @param {NoteDeleteArgs} args - Arguments to delete one Note.
   * @example
   * // Delete one Note
   * const Note = await prisma.note.delete({
   *   where: {
   *     // ... filter to delete one Note
   *   }
   * })
   * 
   */
  delete<T extends NoteDeleteArgs>(args: Prisma.SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Note.
   * @param {NoteUpdateArgs} args - Arguments to update one Note.
   * @example
   * // Update one Note
   * const note = await prisma.note.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NoteUpdateArgs>(args: Prisma.SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Notes.
   * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
   * @example
   * // Delete a few Notes
   * const { count } = await prisma.note.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NoteDeleteManyArgs>(args?: Prisma.SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notes
   * const note = await prisma.note.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NoteUpdateManyArgs>(args: Prisma.SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Note.
   * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
   * @example
   * // Update or create a Note
   * const note = await prisma.note.upsert({
   *   create: {
   *     // ... data to create a Note
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Note we want to update
   *   }
   * })
   */
  upsert<T extends NoteUpsertArgs>(args: Prisma.SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma.Prisma__NoteClient<runtime.Types.Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notes that matches the filter.
   * @param {NoteFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const note = await prisma.note.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.NoteFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Note.
   * @param {NoteAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const note = await prisma.note.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.NoteAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteCountArgs} args - Arguments to filter Notes to count.
   * @example
   * // Count the number of Notes
   * const count = await prisma.note.count({
   *   where: {
   *     // ... the filter for the Notes we want to count
   *   }
   * })
  **/
  count<T extends NoteCountArgs>(
    args?: Prisma.Subset<T, NoteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NoteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Note.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NoteAggregateArgs>(args: Prisma.Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

  /**
   * Group by Note.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NoteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NoteGroupByArgs['orderBy'] }
      : { orderBy?: NoteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Note model
 */
readonly fields: NoteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Note.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NoteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  student<T extends Prisma.StudentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StudentDefaultArgs<ExtArgs>>): Prisma.Prisma__StudentClient<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  matiere<T extends Prisma.MatiereDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MatiereDefaultArgs<ExtArgs>>): Prisma.Prisma__MatiereClient<runtime.Types.Result.GetResult<Prisma.$MatierePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  periode<T extends Prisma.PeriodeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PeriodeDefaultArgs<ExtArgs>>): Prisma.Prisma__PeriodeClient<runtime.Types.Result.GetResult<Prisma.$PeriodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  enseignant<T extends Prisma.EnseignantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EnseignantDefaultArgs<ExtArgs>>): Prisma.Prisma__EnseignantClient<runtime.Types.Result.GetResult<Prisma.$EnseignantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  historiqueModifications<T extends Prisma.Note$historiqueModificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Note$historiqueModificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HistoriqueModificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Note model
 */
export interface NoteFieldRefs {
  readonly id: Prisma.FieldRef<"Note", 'String'>
  readonly valeur: Prisma.FieldRef<"Note", 'Float'>
  readonly studentId: Prisma.FieldRef<"Note", 'String'>
  readonly matiereId: Prisma.FieldRef<"Note", 'String'>
  readonly periodeId: Prisma.FieldRef<"Note", 'String'>
  readonly enseignantId: Prisma.FieldRef<"Note", 'String'>
  readonly typeEvaluation: Prisma.FieldRef<"Note", 'String'>
  readonly coefficient: Prisma.FieldRef<"Note", 'Float'>
  readonly appreciation: Prisma.FieldRef<"Note", 'String'>
  readonly isValidated: Prisma.FieldRef<"Note", 'Boolean'>
  readonly dateValidation: Prisma.FieldRef<"Note", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Note", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Note", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Note findUnique
 */
export type NoteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note findUniqueOrThrow
 */
export type NoteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note findFirst
 */
export type NoteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notes to fetch.
   */
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notes.
   */
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note findFirstOrThrow
 */
export type NoteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notes to fetch.
   */
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notes.
   */
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note findMany
 */
export type NoteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Notes to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notes to fetch.
   */
  orderBy?: Prisma.NoteOrderByWithRelationInput | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notes.
   */
  skip?: number
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note create
 */
export type NoteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The data needed to create a Note.
   */
  data: Prisma.XOR<Prisma.NoteCreateInput, Prisma.NoteUncheckedCreateInput>
}

/**
 * Note createMany
 */
export type NoteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Notes.
   */
  data: Prisma.NoteCreateManyInput | Prisma.NoteCreateManyInput[]
}

/**
 * Note update
 */
export type NoteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The data needed to update a Note.
   */
  data: Prisma.XOR<Prisma.NoteUpdateInput, Prisma.NoteUncheckedUpdateInput>
  /**
   * Choose, which Note to update.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note updateMany
 */
export type NoteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Notes.
   */
  data: Prisma.XOR<Prisma.NoteUpdateManyMutationInput, Prisma.NoteUncheckedUpdateManyInput>
  /**
   * Filter which Notes to update
   */
  where?: Prisma.NoteWhereInput
  /**
   * Limit how many Notes to update.
   */
  limit?: number
}

/**
 * Note upsert
 */
export type NoteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The filter to search for the Note to update in case it exists.
   */
  where: Prisma.NoteWhereUniqueInput
  /**
   * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
   */
  create: Prisma.XOR<Prisma.NoteCreateInput, Prisma.NoteUncheckedCreateInput>
  /**
   * In case the Note was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NoteUpdateInput, Prisma.NoteUncheckedUpdateInput>
}

/**
 * Note delete
 */
export type NoteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter which Note to delete.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note deleteMany
 */
export type NoteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Notes to delete
   */
  where?: Prisma.NoteWhereInput
  /**
   * Limit how many Notes to delete.
   */
  limit?: number
}

/**
 * Note findRaw
 */
export type NoteFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Note aggregateRaw
 */
export type NoteAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Note.historiqueModifications
 */
export type Note$historiqueModificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HistoriqueModification
   */
  select?: Prisma.HistoriqueModificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HistoriqueModification
   */
  omit?: Prisma.HistoriqueModificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HistoriqueModificationInclude<ExtArgs> | null
  where?: Prisma.HistoriqueModificationWhereInput
  orderBy?: Prisma.HistoriqueModificationOrderByWithRelationInput | Prisma.HistoriqueModificationOrderByWithRelationInput[]
  cursor?: Prisma.HistoriqueModificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.HistoriqueModificationScalarFieldEnum | Prisma.HistoriqueModificationScalarFieldEnum[]
}

/**
 * Note without action
 */
export type NoteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
}
